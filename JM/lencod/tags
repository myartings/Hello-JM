!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	src/block.c	/^static const int A[4][4] = {$/;"	v	file:
ADDINCDIR	Makefile	/^ADDINCDIR= ..\/lcommon\/inc$/;"	m
ADDSRC	Makefile	/^ADDSRC= $(wildcard $(ADDSRCDIR)\/*.c)$/;"	m
ADDSRCDIR	Makefile	/^ADDSRCDIR= ..\/lcommon\/src$/;"	m
ADD_UP_BLOCKS	src/me_fullfast.c	198;"	d	file:
ADD_XRATE1	src/context_ini.c	237;"	d	file:
ADD_XRATE1	src/context_ini.c	321;"	d	file:
ADD_XRATE2	src/context_ini.c	228;"	d	file:
ADD_XRATE2	src/context_ini.c	320;"	d	file:
AGGREGATION_PACKET_TYPE	inc/sei.h	30;"	d
AGGREGATION_SEI	inc/sei.h	34;"	d
ALLOW_GRAYSCALE	inc/defines.h	41;"	d
ALPHA_TABLE	inc/loop_filter.h	/^static const byte ALPHA_TABLE[52]  = {0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,4,4,5,6,  7,8,9,10,12,13,15,17,  20,22,25,28,32,36,40,45,  50,56,63,71,80,90,101,113,  127,144,162,182,203,226,255,255} ;$/;"	v
ALT_DIRECT	src/image_mp.c	/^  ALT_DIRECT = 4,$/;"	e	enum:__anon47	file:
ALT_ENTROPY	src/image_mp.c	/^  ALT_ENTROPY = 5,$/;"	e	enum:__anon47	file:
ARCofAdj4x4	inc/global.h	/^  int ****ARCofAdj4x4;         \/\/!< Transform coefficients for 4x4 luma\/chroma. $/;"	m	struct:video_par
ARCofAdj8x8	inc/global.h	/^  int ****ARCofAdj8x8;         \/\/!< Transform coefficients for 4x4 luma\/chroma. $/;"	m	struct:video_par
AdaptRndChroma	inc/params.h	/^  int AdaptRndChroma;$/;"	m	struct:inp_par_enc
AdaptRndCrPos	src/q_around.c	/^static const int AdaptRndCrPos[2][5] =$/;"	v	file:
AdaptRndCrWFactor	inc/params.h	/^  int AdaptRndCrWFactor[2][NUM_SLICE_TYPES];     \/\/!< Weighting factors for chroma components based on reference indicator and slice type$/;"	m	struct:inp_par_enc
AdaptRndCrWeight	inc/global.h	/^  int AdaptRndCrWeight;$/;"	m	struct:video_par
AdaptRndPeriod	inc/params.h	/^  int AdaptRndPeriod;                            \/\/!< Set period for adaptive rounding of JVT-N011 in MBs$/;"	m	struct:inp_par_enc
AdaptRndPos	src/q_around.c	/^static const int AdaptRndPos[4][5] =$/;"	v	file:
AdaptRndWFactor	inc/params.h	/^  int AdaptRndWFactor  [2][NUM_SLICE_TYPES];     \/\/!< Weighting factors for luma component based on reference indicator and slice type$/;"	m	struct:inp_par_enc
AdaptRndWeight	inc/global.h	/^  int AdaptRndWeight;$/;"	m	struct:video_par
AdaptRoundingFixed	inc/params.h	/^  int AdaptRoundingFixed;                        \/\/!< Global rounding for all qps$/;"	m	struct:inp_par_enc
AdaptiveRounding	inc/global.h	/^  int AdaptiveRounding;   \/\/!< Adaptive Rounding parameter based on JVT-N011$/;"	m	struct:video_par
AdaptiveRounding	inc/params.h	/^  int AdaptiveRounding;                          \/\/!< Adaptive Rounding parameter based on JVT-N011$/;"	m	struct:inp_par_enc
AlphaFourth_1	inc/me_umhex.h	/^  float AlphaFourth_1[8];$/;"	m	struct:umhex_struct
AlphaFourth_2	inc/me_umhex.h	/^  float AlphaFourth_2[8];$/;"	m	struct:umhex_struct
AppendTmpbits2Buf	src/sei.c	/^void AppendTmpbits2Buf( Bitstream* dest, Bitstream* source )$/;"	f
AveWb	inc/rc_types.h	/^  double AveWb;$/;"	m	struct:rc_quadratic
AveWp	inc/rc_types.h	/^  double AveWp;$/;"	m	struct:rc_quadratic
AverageFrameQP	inc/global.h	/^  int AverageFrameQP;$/;"	m	struct:prev_coding_stats
AverageFrameQP	inc/global.h	/^  int AverageFrameQP;$/;"	m	struct:video_par
B0_MORE_REF	inc/defines.h	68;"	d
B8Mode2Value	src/macroblock.c	/^int B8Mode2Value (Slice *currSlice, short b8mode, short b8pdir)$/;"	f
BASELINE	inc/defines.h	/^  BASELINE       = 66,       \/\/!< YUV 4:2:0\/8  "Baseline"$/;"	e	enum:__anon34
BETAP	inc/rc_types.h	/^  double BETAP;                 \/\/LIZG, JVT019r1$/;"	m	struct:rc_quadratic
BETA_TABLE	inc/loop_filter.h	/^static const byte  BETA_TABLE[52]  = {0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,2,2,2,3,  3,3,3, 4, 4, 4, 6, 6,   7, 7, 8, 8, 9, 9,10,10,  11,11,12,12,13,13, 14, 14,   15, 15, 16, 16, 17, 17, 18, 18} ;$/;"	v
BIARI_CTX_INIT2	src/context_ini.c	75;"	d	file:
BIDPartitionCost	src/mv_search.c	/^distblk BIDPartitionCost (Macroblock *currMB, $/;"	f
BIN	Makefile	/^BIN=    $(BINDIR)\/$(NAME)$(SUFFIX).exe$/;"	m
BINDIR	Makefile	/^BINDIR= ..\/bin$/;"	m
BITS_TO_LOAD	inc/biariencode.h	35;"	d
BIdenticalList	inc/params.h	/^  int BIdenticalList;$/;"	m	struct:inp_par_enc
BLOCK_CONTEXT	inc/defines.h	152;"	d
BLOCK_MULTIPLE	inc/defines.h	150;"	d
BLOCK_PARENT	src/me_epzs_common.c	/^static const short BLOCK_PARENT[8] = { 1, 1, 1, 1, 2, 4, 4, 5 };  \/\/!< {skip, 16x16, 16x8, 8x16, 8x8, 8x4, 4x8, 4x4}$/;"	v	file:
BLOCK_PIXELS	inc/defines.h	145;"	d
BLOCK_SHIFT	inc/defines.h	141;"	d
BLOCK_SIZE	inc/defines.h	142;"	d
BLOCK_SIZE_8x8	inc/defines.h	143;"	d
BLOCK_SIZE_8x8_SP	inc/defines.h	155;"	d
BLOCK_SIZE_SP	inc/defines.h	154;"	d
BLevel0MoreRef	inc/params.h	/^  int BLevel0MoreRef;$/;"	m	struct:inp_par_enc
BPredPartitionCost	src/mv_search.c	/^distblk BPredPartitionCost (Macroblock *currMB,$/;"	f
BRefPictures	inc/params.h	/^  int BRefPictures;                  \/\/!< B coded reference pictures replace P pictures (0: not used, 1: used)$/;"	m	struct:inp_par_enc
BSKIP_DIRECT	inc/defines.h	/^  BSKIP_DIRECT =  0,$/;"	e	enum:__anon35
BUCFMAD	inc/rc_types.h	/^  double *BUCFMAD;$/;"	m	struct:rc_quadratic
BUPFMAD	inc/rc_types.h	/^  double *BUPFMAD;$/;"	m	struct:rc_quadratic
B_BITS	inc/biariencode.h	34;"	d
B_COMP	inc/defines.h	/^  B_COMP = 5,    \/\/ B Component$/;"	e	enum:__anon39
B_LOAD_MASK	inc/biariencode.h	43;"	d
B_List0_refs	inc/params.h	/^  int B_List0_refs[2];                  \/\/!< number of reference picture in list 0 in B pictures$/;"	m	struct:inp_par_enc
B_List0_refs_org	inc/params.h	/^  int B_List0_refs_org[2];                  \/\/!< number of reference picture in list 0 in B pictures$/;"	m	struct:inp_par_enc
B_List1_refs	inc/params.h	/^  int B_List1_refs[2];                  \/\/!< number of reference picture in list 1 in B pictures$/;"	m	struct:inp_par_enc
B_List1_refs_org	inc/params.h	/^  int B_List1_refs_org[2];                  \/\/!< number of reference picture in list 1 in B pictures$/;"	m	struct:inp_par_enc
BasicUnit	inc/global.h	/^  unsigned int BasicUnit;$/;"	m	struct:video_par
BasicUnitQP	inc/global.h	/^  int BasicUnitQP;$/;"	m	struct:video_par
BestMode	inc/rdopt.h	/^} BestMode;$/;"	t	typeref:struct:__anon27
BiContextType	inc/global.h	/^typedef struct bi_context_type BiContextType;$/;"	t	typeref:struct:bi_context_type
BiContextTypePtr	inc/global.h	/^typedef BiContextType *BiContextTypePtr;$/;"	t
BiPredBlockMotionSearch	src/mv_search.c	/^static distblk BiPredBlockMotionSearch(Macroblock   *currMB,      \/\/!< Current Macroblock$/;"	f	file:
BiPredME	inc/global.h	/^  distblk (*BiPredME)       (struct macroblock_enc *currMB, int, MotionVector *, MotionVector *, MotionVector *, MotionVector *, struct me_block *, int, distblk, int);$/;"	m	struct:macroblock_enc
BiPredMERefinements	inc/params.h	/^  int BiPredMERefinements;              \/\/!< Max number of Iterations for Bi-predictive motion estimation$/;"	m	struct:inp_par_enc
BiPredMESearchRange	inc/params.h	/^  int BiPredMESearchRange[2];           \/\/!< Search range of Bi-predictive motion estimation$/;"	m	struct:inp_par_enc
BiPredMESubPel	inc/params.h	/^  int BiPredMESubPel;                   \/\/!< Use of subpixel refinement for Bi-predictive motion estimation$/;"	m	struct:inp_par_enc
BiPredMVInfo	inc/global.h	/^} BiPredMVInfo;$/;"	t	typeref:struct:__anon4
BiPredMotionEstimation	inc/params.h	/^  int BiPredMotionEstimation;           \/\/!< Use of Bipredictive motion estimation$/;"	m	struct:inp_par_enc
BiPredSearch	inc/params.h	/^  int BiPredSearch[4];                  \/\/!< Bipredictive motion estimation for modes 16x16, 16x8, 8x16, and 8x8  $/;"	m	struct:inp_par_enc
BiasSkipRDO	inc/params.h	/^  int BiasSkipRDO;$/;"	m	struct:inp_par_enc
Big_Hexagon_Thd	src/me_umhex.c	/^static const int   Big_Hexagon_Thd[8]  = {0, 3000, 1500, 1500, 800, 400,  400, 200};$/;"	v	file:
Big_Hexagon_Thd_MB	inc/me_umhex.h	/^  distblk Big_Hexagon_Thd_MB[8];$/;"	m	struct:umhex_struct
Big_Hexagon_X	src/me_umhex.c	/^static const short Big_Hexagon_X[16] = {0,-8, -16,-16,-16, -16, -16, -8,  0,  8,  16, 16, 16, 16, 16, 8};$/;"	v	file:
Big_Hexagon_X	src/me_umhexsmp.c	/^static const short Big_Hexagon_X[16] = {-16, 16, 0, 0,-16, 16,-16, 16,-16, 16,-16, 16,-8, 8,-8, 8};$/;"	v	file:
Big_Hexagon_Y	src/me_umhex.c	/^static const short Big_Hexagon_Y[16] = {8, 12, 8,  4, 0, -4, -8, -12, -16, -12, -8, -4, 0, 4, 8, 12};$/;"	v	file:
Big_Hexagon_Y	src/me_umhexsmp.c	/^static const short Big_Hexagon_Y[16] = { 0, 0,-16, 16,-4, 4, 4,-4,-8, 8, 8,-8,-12, 12, 12,-12};$/;"	v	file:
BitCounter	inc/global.h	/^typedef struct bit_counter BitCounter;$/;"	t	typeref:struct:bit_counter
Bit_Buffer	inc/global.h	/^  long *Bit_Buffer;$/;"	m	struct:video_par
Bitstream	inc/global.h	/^typedef struct bit_stream_enc Bitstream;$/;"	t	typeref:struct:bit_stream_enc
BlkCount	inc/me_epzs_common.h	/^  uint16 BlkCount;$/;"	m	struct:epzs_params
Block8x8Info	inc/global.h	/^} Block8x8Info;$/;"	t	typeref:struct:block_8x8_info
BlockMotionSearch	src/mv_search.c	/^BlockMotionSearch (Macroblock *currMB,      \/\/!< Current Macroblock$/;"	f
BlockPos	inc/global.h	/^typedef struct block_pos BlockPos;$/;"	t	typeref:struct:block_pos
BlockSAD	inc/me_fullfast.h	/^  distpel   *****BlockSAD;        \/\/!< SAD for all blocksize, ref. frames and motion vectors$/;"	m	struct:me_full_fast
BlockType_LUT	inc/me_umhex.h	/^  int BlockType_LUT[4][4];$/;"	m	struct:umhex_struct
Bsize	inc/me_umhex.h	/^  float  Bsize[8];$/;"	m	struct:umhex_struct
Build_Status_Map	src/errdo_dist_mhyp.c	/^static void Build_Status_Map(VideoParameters *p_Vid, InputParameters *p_Inp, byte **s_map)$/;"	f	file:
C	inc/global.h	/^  int           C;$/;"	m	struct:encoding_environment
CABACBlockTypes	inc/defines.h	/^} CABACBlockTypes;$/;"	v	typeref:enum:__anon38
CABAC_TRACE	src/cabac.c	22;"	d	file:
CABAC_TRACE	src/cabac.c	24;"	d	file:
CALM_MF_FACTOR_THRESHOLD	inc/defines.h	318;"	d
CAVLCBlockTypes	inc/defines.h	/^} CAVLCBlockTypes;$/;"	v	typeref:enum:__anon37
CAVLC_LEVEL_LIMIT	inc/defines.h	99;"	d
CAVLC_init	src/slice.c	/^static void CAVLC_init(Slice *currSlice)$/;"	f	file:
CB	inc/defines.h	/^  CB                =  3,$/;"	e	enum:__anon37
CB_16AC	inc/defines.h	/^  CB_16AC       =  11,$/;"	e	enum:__anon38
CB_16DC	inc/defines.h	/^  CB_16DC       =  10,$/;"	e	enum:__anon38
CB_4x4	inc/defines.h	/^  CB_4x4        =  15,$/;"	e	enum:__anon38
CB_4x8	inc/defines.h	/^  CB_4x8        =  14,$/;"	e	enum:__anon38
CB_8x4	inc/defines.h	/^  CB_8x4        =  13,$/;"	e	enum:__anon38
CB_8x8	inc/defines.h	/^  CB_8x8        =  12,$/;"	e	enum:__anon38
CB_INTRA16x16AC	inc/defines.h	/^  CB_INTRA16x16AC   =  5,$/;"	e	enum:__anon37
CB_INTRA16x16DC	inc/defines.h	/^  CB_INTRA16x16DC   =  4,$/;"	e	enum:__anon37
CHECKOVERFLOW	src/me_distortion.c	30;"	d	file:
CHECKOVERFLOW	src/me_distortion_otf.c	29;"	d	file:
CHROMA_AC	inc/defines.h	/^  CHROMA_AC     =   7,$/;"	e	enum:__anon38
CHROMA_DC	inc/defines.h	/^  CHROMA_DC     =   6,$/;"	e	enum:__anon38
CHROMA_DC_2x4	inc/defines.h	/^  CHROMA_DC_2x4 =   8,$/;"	e	enum:__anon38
CHROMA_DC_4x4	inc/defines.h	/^  CHROMA_DC_4x4 =   9,$/;"	e	enum:__anon38
CLIP_TAB	inc/loop_filter.h	/^static const byte CLIP_TAB[52][5]  =$/;"	v
COEF	src/lln_mc_prediction.c	/^static const int COEF[6] = { 1, -5, 20, 20, -5, 1 };$/;"	v	file:
COEFF_COST4x4	src/block.c	/^static const byte COEFF_COST4x4[2][16] =$/;"	v	file:
COEFF_COST8x8	src/transform8x8.c	/^static const byte COEFF_COST8x8[2][64] =$/;"	v	file:
CONTEXT_INI_C	src/context_ini.c	16;"	d	file:
CR	inc/defines.h	/^  CR                =  8,$/;"	e	enum:__anon37
CRA	inc/defines.h	70;"	d
CR_16AC	inc/defines.h	/^  CR_16AC       =  17,$/;"	e	enum:__anon38
CR_16DC	inc/defines.h	/^  CR_16DC       =  16,$/;"	e	enum:__anon38
CR_4x4	inc/defines.h	/^  CR_4x4        =  21$/;"	e	enum:__anon38
CR_4x8	inc/defines.h	/^  CR_4x8        =  20,$/;"	e	enum:__anon38
CR_8x4	inc/defines.h	/^  CR_8x4        =  19,$/;"	e	enum:__anon38
CR_8x8	inc/defines.h	/^  CR_8x8        =  18,$/;"	e	enum:__anon38
CR_INTRA16x16AC	inc/defines.h	/^  CR_INTRA16x16AC   = 10$/;"	e	enum:__anon37
CR_INTRA16x16DC	inc/defines.h	/^  CR_INTRA16x16DC   =  9,$/;"	e	enum:__anon37
CSobj	inc/rdopt_coding_state.h	/^typedef struct coding_state CSobj;$/;"	t	typeref:struct:coding_state
CalcMaxLamdaMD	src/lambda.c	/^static void CalcMaxLamdaMD(VideoParameters *p_Vid, double *p_lambda_md)$/;"	f	file:
CalculateOffset4x4Param	src/q_offsets.c	/^void CalculateOffset4x4Param (VideoParameters *p_Vid)$/;"	f
CalculateOffset8x8Param	src/q_offsets.c	/^void CalculateOffset8x8Param (VideoParameters *p_Vid)$/;"	f
CalculateQuant4x4Param	src/q_matrix.c	/^void CalculateQuant4x4Param(VideoParameters *p_Vid)$/;"	f
CalculateQuant8x8Param	src/q_matrix.c	/^void CalculateQuant8x8Param(VideoParameters *p_Vid)$/;"	f
CalculateSparePicture	src/sei.c	/^void CalculateSparePicture()$/;"	f
CbCr_predmode_8x8	inc/global.h	/^  int CbCr_predmode_8x8[4]; $/;"	m	struct:video_par
CeilLog2	src/lencod.c	/^static unsigned CeilLog2( unsigned uiVal)$/;"	f	file:
CheckAvailabilityOfNeighbors	src/mb_access.c	/^void CheckAvailabilityOfNeighbors(Macroblock *currMB)$/;"	f
CheckAvailabilityOfNeighborsCABAC	src/cabac.c	/^void CheckAvailabilityOfNeighborsCABAC(Macroblock *currMB)$/;"	f
CheckOffsetParameterName	src/q_offsets.c	/^int CheckOffsetParameterName (char *s, int *type)$/;"	f
CheckParameterName	src/q_matrix.c	/^static int CheckParameterName (char *s, int *type)$/;"	f	file:
CheckPredictionParams	src/conformance.c	/^Boolean CheckPredictionParams(Macroblock  *currMB, Block8x8Info *b8x8info, int mode)$/;"	f
CheckReliabilityOfRef	src/rdopt.c	/^int CheckReliabilityOfRef (Macroblock *currMB, int block, int list_idx, int ref, int mode)$/;"	f
CheckSearchRange	src/mv_search.c	/^void CheckSearchRange(VideoParameters *p_Vid, MotionVector *pPredMV, MotionVector *pSWC, MEBlock *mv_block)$/;"	f
ChromaArrayType	inc/global.h	/^  int ChromaArrayType;$/;"	m	struct:video_par
ChromaIntraDisable	inc/params.h	/^  int ChromaIntraDisable;$/;"	m	struct:inp_par_enc
ChromaMCBuffer	inc/params.h	/^  int ChromaMCBuffer;$/;"	m	struct:inp_par_enc
ChromaMEEnable	inc/global.h	/^  int              ChromaMEEnable;$/;"	m	struct:me_block
ChromaMEEnable	inc/params.h	/^  int ChromaMEEnable;$/;"	m	struct:inp_par_enc
ChromaMEWeight	inc/global.h	/^  int              ChromaMEWeight;$/;"	m	struct:me_block
ChromaMEWeight	inc/params.h	/^  int ChromaMEWeight;$/;"	m	struct:inp_par_enc
ChromaWeightSupport	inc/params.h	/^  int ChromaWeightSupport;           \/\/!< Weighted prediction support for chroma (0: disabled, 1: enabled)$/;"	m	struct:inp_par_enc
ClearBufferingPeriod	src/sei.c	/^void ClearBufferingPeriod(SEIParameters *p_SEI, seq_parameter_set_rbsp_t *active_sps)$/;"	f
ClearDRPMRepetition	src/sei.c	/^void ClearDRPMRepetition(SEIParameters *p_SEI)$/;"	f
ClearFramePackingArrangement	src/sei.c	/^void ClearFramePackingArrangement(SEIParameters *p_SEI)$/;"	f
ClearPanScanRectInfoPayload	src/sei.c	/^void ClearPanScanRectInfoPayload(SEIParameters *p_SEI)$/;"	f
ClearPicTiming	src/sei.c	/^void ClearPicTiming(SEIParameters *p_SEI)$/;"	f
ClearPostFilterHints	src/sei.c	/^static void ClearPostFilterHints(SEIParameters *p_SEI)$/;"	f	file:
ClearRandomAccess	src/sei.c	/^void ClearRandomAccess(SEIParameters *p_SEI)$/;"	f
ClearSubseqCharPayload	src/sei.c	/^static void ClearSubseqCharPayload(SEIParameters *p_SEI)$/;"	f	file:
ClearSubseqInfoPayload	src/sei.c	/^static void ClearSubseqInfoPayload(SEIParameters *p_SEI, int currLayer)$/;"	f	file:
ClearToneMapping	src/sei.c	/^static void ClearToneMapping(SEIParameters *p_SEI) $/;"	f	file:
ClearUser_data_registered_itu_t_t35	src/sei.c	/^static void ClearUser_data_registered_itu_t_t35(SEIParameters *p_SEI)$/;"	f	file:
ClearUser_data_unregistered	src/sei.c	/^static void ClearUser_data_unregistered(SEIParameters *p_SEI)$/;"	f	file:
ClipLambda	src/lambda.c	/^static void ClipLambda(double *p_lambda_max, double *p_lambda)$/;"	f	file:
ClipWPParams	src/slice.c	/^static void  ClipWPParams(Slice *currSlice )$/;"	f	file:
CloseAnnexbFile	src/annexb.c	/^void CloseAnnexbFile(FILE *f_annexb) $/;"	f
CloseBufferingPeriod	src/sei.c	/^static void CloseBufferingPeriod(SEIParameters *p_SEI)$/;"	f	file:
CloseDRPMRepetition	src/sei.c	/^static void CloseDRPMRepetition(SEIParameters *p_SEI)$/;"	f	file:
CloseExplicitSeqFile	src/explicit_seq.c	/^void CloseExplicitSeqFile(VideoParameters *p_Vid)$/;"	f
CloseFramePackingArrangement	src/sei.c	/^static void CloseFramePackingArrangement(SEIParameters *p_SEI)$/;"	f	file:
ClosePanScanRectInfo	src/sei.c	/^void ClosePanScanRectInfo(SEIParameters *p_SEI)$/;"	f
ClosePicTiming	src/sei.c	/^static void ClosePicTiming(SEIParameters *p_SEI)$/;"	f	file:
ClosePostFilterHints	src/sei.c	/^static void ClosePostFilterHints(SEIParameters *p_SEI)$/;"	f	file:
CloseRTPFile	src/rtp.c	/^void CloseRTPFile (FILE *f_rtp)$/;"	f
CloseRandomAccess	src/sei.c	/^void CloseRandomAccess(SEIParameters *p_SEI)$/;"	f
CloseSEIMessages	src/sei.c	/^void CloseSEIMessages(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
CloseSceneInformation	src/sei.c	/^void CloseSceneInformation(SEIParameters *p_SEI)$/;"	f
CloseSparePicture	src/sei.c	/^static void CloseSparePicture(SEIParameters *p_SEI)$/;"	f	file:
CloseSubseqChar	src/sei.c	/^static void CloseSubseqChar(SEIParameters *p_SEI)$/;"	f	file:
CloseSubseqInfo	src/sei.c	/^void CloseSubseqInfo(SEIParameters *p_SEI, int currLayer)$/;"	f
CloseSubseqLayerInfo	src/sei.c	/^void CloseSubseqLayerInfo()$/;"	f
CloseToneMapping	src/sei.c	/^static void CloseToneMapping(SEIParameters *p_SEI) $/;"	f	file:
CloseUser_data_registered_itu_t_t35	src/sei.c	/^void CloseUser_data_registered_itu_t_t35(SEIParameters *p_SEI)$/;"	f
CloseUser_data_unregistered	src/sei.c	/^static void CloseUser_data_unregistered(SEIParameters *p_SEI)$/;"	f	file:
CodedBasicUnit	inc/rc_types.h	/^  int    CodedBasicUnit;$/;"	m	struct:rc_quadratic
CodingInfo	inc/image.h	/^} CodingInfo;$/;"	t	typeref:struct:coding_info
CodingParameters	inc/global.h	/^}CodingParameters;$/;"	t	typeref:struct:coding_par
ColorComponent	inc/defines.h	/^} ColorComponent;$/;"	v	typeref:enum:__anon39
ComposeRTPPacket	src/rtp.c	/^int ComposeRTPPacket (RTPpacket_t *p)$/;"	f
ComposeSparePictureMessage	src/sei.c	/^void ComposeSparePictureMessage(SEIParameters *p_SEI, int delta_spare_frame_num, int ref_area_indicator, Bitstream *tmpBitstream)$/;"	f
CompressSpareMBMap	src/sei.c	/^Boolean CompressSpareMBMap(VideoParameters *p_Vid, unsigned char **map_sp, Bitstream *bitstream)$/;"	f
ComputeBlockNormMean	src/wp_lms.c	/^static double ComputeBlockNormMean(imgpel **CurrentImage, $/;"	f	file:
ComputeBlockSum	src/weighted_prediction.c	/^static int ComputeBlockSum(imgpel **CurrentImage, int height_in_blk, int width_in_blk, int blk_size_y, int blk_size_x, int cur_blk)$/;"	f	file:
ComputeExplicitWPParamsJNT	src/wp_lms.c	/^void ComputeExplicitWPParamsJNT(Slice *currSlice,                                  $/;"	f
ComputeExplicitWPParamsLMS	src/wp_lms.c	/^void ComputeExplicitWPParamsLMS(Slice *currSlice,$/;"	f
ComputeFrameMAD	src/ratectl.c	/^double ComputeFrameMAD(VideoParameters *p_Vid)$/;"	f
ComputeImgSum	src/weighted_prediction.c	/^double ComputeImgSum(imgpel **CurrentImage, int height, int width)$/;"	f
ComputeImgSumBlockBased	src/weighted_prediction.c	/^void ComputeImgSumBlockBased(imgpel **CurrentImage, $/;"	f
ComputeImplicitWeights	src/weighted_prediction.c	/^void ComputeImplicitWeights(Slice *currSlice,$/;"	f
ComputeMBMAD	src/ratectl.c	/^int ComputeMBMAD(int diffy[16][16])$/;"	f
ComputeNormMeanBlockBased	src/wp_lms.c	/^static void ComputeNormMeanBlockBased(imgpel **CurrentImage, int height_in_blk, int width_in_blk, $/;"	f	file:
ComputeSumBlockBased	src/weighted_prediction.c	/^int64 ComputeSumBlockBased(imgpel **CurrentImage, $/;"	f
Configure	src/configfile.c	/^void Configure (VideoParameters *p_Vid, InputParameters *p_Inp, int ac, char *av[])$/;"	f
ConvergeThreshold	inc/me_umhexsmp.h	/^  distblk  ConvergeThreshold;$/;"	m	struct:umhex_smp_struct
CopyMVBlock16	src/md_common.c	/^static inline void CopyMVBlock16(PicMotionParams **mv_info, MotionVector **rdo_mv, int list, int block_x, int block_y, int start, int end)$/;"	f	file:
CopyMVBlock8	src/md_common.c	/^static inline void CopyMVBlock8(PicMotionParams **mv_info, MotionVector **rdo_mv, int list, int block_x, int start, int end, int offset)$/;"	f	file:
CtxAdptLagrangeMult	inc/params.h	/^  int CtxAdptLagrangeMult;    \/\/!< context adaptive lagrangian multiplier$/;"	m	struct:inp_par_enc
CurrLastQP	inc/rc_types.h	/^  int    CurrLastQP; \/\/ QP of the last coded frame in the primary layer$/;"	m	struct:rc_quadratic
CurrentBUMAD	inc/rc_types.h	/^  double CurrentBUMAD;$/;"	m	struct:rc_quadratic
CurrentBufferFullness	inc/rc_types.h	/^  int64 CurrentBufferFullness; \/\/LIZG 25\/10\/2002$/;"	m	struct:rc_generic
CurrentFrameMAD	inc/rc_types.h	/^  double CurrentFrameMAD;$/;"	m	struct:rc_quadratic
CurrentRTPSequenceNumber	inc/global.h	/^  uint16 CurrentRTPSequenceNumber;     \/\/!< The RTP sequence number of the current packet$/;"	m	struct:video_par
CurrentRTPTimestamp	inc/global.h	/^  int CurrentRTPTimestamp;             \/\/!< The RTP timestamp of the current packet,$/;"	m	struct:video_par
DBG	Makefile	/^DBG?= 0$/;"	m
DBG_IMAGE_MP	src/image_mp.c	23;"	d	file:
DB_OFF	src/image_mp.c	/^  DB_OFF = 6,$/;"	e	enum:__anon47	file:
DC_PRED	inc/defines.h	/^  DC_PRED              = 2,$/;"	e	enum:__anon40
DC_PRED_16	inc/defines.h	/^  DC_PRED_16     = 2,$/;"	e	enum:__anon41
DC_PRED_8	inc/defines.h	/^  DC_PRED_8     =  0,$/;"	e	enum:__anon42
DDquant	inc/rc_types.h	/^  int    DDquant;$/;"	m	struct:rc_quadratic
DEBUG_BITDEPTH	inc/defines.h	40;"	d
DEBUG_PRED_STRUCT	src/pred_struct.c	20;"	d	file:
DEBUG_WP	inc/wp.h	26;"	d
DEFAULTCONFIGFILENAME	inc/configfile.h	18;"	d
DEFAULT_CTX_MODEL	src/context_ini.c	26;"	d	file:
DEPEND	Makefile	/^DEPEND= dependencies$/;"	m
DE_Type	inc/errdo.h	/^} DE_Type;$/;"	t	typeref:enum:__anon25
DFAlpha	inc/params.h	/^  int DFAlpha     [2][NUM_SLICE_TYPES];$/;"	m	struct:inp_par_enc
DFAlphaC0Offset	inc/global.h	/^  char                DFAlphaC0Offset;                          \/\/!< Deblocking Filter Alpha offset$/;"	m	struct:slice
DFAlphaC0Offset	inc/global.h	/^  char                DFAlphaC0Offset;$/;"	m	struct:macroblock_enc
DFAlphaC0Offset	inc/global.h	/^  char DFAlphaC0Offset;$/;"	m	struct:video_par
DFBeta	inc/params.h	/^  int DFBeta      [2][NUM_SLICE_TYPES];$/;"	m	struct:inp_par_enc
DFBetaOffset	inc/global.h	/^  char                DFBetaOffset;                             \/\/!< Deblocking Filter Beta offset$/;"	m	struct:slice
DFBetaOffset	inc/global.h	/^  char                DFBetaOffset;$/;"	m	struct:macroblock_enc
DFBetaOffset	inc/global.h	/^  char DFBetaOffset;$/;"	m	struct:video_par
DFDisableIdc	inc/global.h	/^  char                DFDisableIdc;                             \/\/!< Deblocking Filter Disable indicator$/;"	m	struct:slice
DFDisableIdc	inc/global.h	/^  char                DFDisableIdc;$/;"	m	struct:macroblock_enc
DFDisableIdc	inc/global.h	/^  char DFDisableIdc;$/;"	m	struct:video_par
DFDisableIdc	inc/params.h	/^  int DFDisableIdc[2][NUM_SLICE_TYPES];$/;"	m	struct:inp_par_enc
DFSendParameters	inc/params.h	/^  int DFSendParameters;$/;"	m	struct:inp_par_enc
DIAG_DOWN_LEFT_PRED	inc/defines.h	/^  DIAG_DOWN_LEFT_PRED  = 3,$/;"	e	enum:__anon40
DIAG_DOWN_RIGHT_PRED	inc/defines.h	/^  DIAG_DOWN_RIGHT_PRED = 4,$/;"	e	enum:__anon40
DIR_SPATIAL	inc/defines.h	/^  DIR_SPATIAL  = 1 \/\/!< Spatial Direct Mode$/;"	e	enum:__anon36
DIR_TEMPORAL	inc/defines.h	/^  DIR_TEMPORAL = 0, \/\/!< Temporal Direct Mode$/;"	e	enum:__anon36
DISTBLK_MAX	inc/defines.h	133;"	d
DISTBLK_MAX	inc/defines.h	135;"	d
DQ_BITS	inc/defines.h	312;"	d
DQ_BITS_8	inc/defines.h	315;"	d
DUMMY	inc/defines.h	126;"	d
DUMP_DPB	inc/defines.h	35;"	d
DataPartition	inc/global.h	/^} DataPartition;$/;"	t	typeref:struct:datapartition_enc
DeblockCall	inc/global.h	/^  Boolean             DeblockCall;$/;"	m	struct:macroblock_enc
DeblockFrame	src/loopFilter.c	/^void DeblockFrame(VideoParameters *p_Vid, imgpel **imgY, imgpel ***imgUV)$/;"	f
DeblockMb	src/loopFilter.c	/^static void DeblockMb(VideoParameters *p_Vid, imgpel **imgY, imgpel ***imgUV, int MbQAddr)$/;"	f	file:
DeblockParallel	src/loopFilter.c	/^static void DeblockParallel(VideoParameters *p_Vid, imgpel **imgY, imgpel ***imgUV, unsigned int column, int block, int n_last)$/;"	f	file:
DecRefPicMarking_s	inc/global.h	/^typedef struct DecRefPicMarking_s$/;"	s
DecRefPicMarking_t	inc/global.h	/^} DecRefPicMarking_t;$/;"	t	typeref:struct:DecRefPicMarking_s
DecodedPictureBuffer	inc/mbuffer.h	/^}DecodedPictureBuffer;$/;"	t	typeref:struct:decoded_picture_buffer
Decoders	inc/errdo.h	/^typedef struct decoders Decoders;$/;"	t	typeref:struct:decoders
DeltaP	inc/rc_types.h	/^  double DeltaP;$/;"	m	struct:rc_quadratic
Diamond	src/me_umhex.c	/^static const MotionVector Diamond[4] = {{-4, 0}, {4, 0}, {0, -4}, {0, 4}};$/;"	v	file:
Diamond	src/me_umhexsmp.c	/^static const MotionVector Diamond[4] = {{-4, 0}, {4, 0}, {0, -4}, {0, 4}};$/;"	v	file:
DiamondOctagon	src/me_umhex.c	/^static const MotionVector DiamondOctagon[12] = {{-4, 0}, {4, 0}, {0, -4},{0, 4}, {-8, 4}, {-4, 8}, {4, 8}, {8, 4}, {8, -4}, {4, -8}, {-4, -8}, {-8, -4}};$/;"	v	file:
Diamond_SubPelSearch	src/me_umhexsmp.c	/^static const MotionVector Diamond_SubPelSearch[4] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};$/;"	v	file:
DirectModes	inc/defines.h	/^} DirectModes;$/;"	v	typeref:enum:__anon36
DisableIntra16x16	inc/params.h	/^  int DisableIntra16x16;$/;"	m	struct:inp_par_enc
DisableIntra4x4	inc/params.h	/^  int DisableIntra4x4;$/;"	m	struct:inp_par_enc
DisableIntraInInter	inc/params.h	/^  int DisableIntraInInter[2];$/;"	m	struct:inp_par_enc
DisableMEPrediction	inc/params.h	/^  int DisableMEPrediction;$/;"	m	struct:inp_par_enc
DisableSubpelME	inc/params.h	/^  int DisableSubpelME[2];               \/\/!< Disable sub-pixel motion estimation$/;"	m	struct:inp_par_enc
DispPQPOffset	inc/params.h	/^  int DispPQPOffset;$/;"	m	struct:inp_par_enc
DisplayEncParams	inc/params.h	/^  int DisplayEncParams;$/;"	m	struct:inp_par_enc
DisplayEncoderParams	src/configfile.c	/^static int DisplayEncoderParams(Mapping *Map)$/;"	f	file:
DisposableP	inc/params.h	/^  int DisposableP;$/;"	m	struct:inp_par_enc
DistMetric	inc/global.h	/^} DistMetric;$/;"	t	typeref:struct:distortion_metric
Dist_Estm	inc/mbuffer.h	/^typedef struct distortion_estimation Dist_Estm;$/;"	t	typeref:struct:distortion_estimation
Distortion	inc/params.h	/^  int Distortion[TOTAL_DIST_TYPES];$/;"	m	struct:inp_par_enc
DistortionParams	inc/global.h	/^} DistortionParams;$/;"	t	typeref:struct:distortion_params
DistortionType	src/report.c	/^static const char DistortionType[3][20] = {"SAD", "SSE", "Hadamard SAD"};$/;"	v	file:
DistortionYUVtoRGB	inc/params.h	/^  int DistortionYUVtoRGB;$/;"	m	struct:inp_par_enc
E	inc/global.h	/^  int           E;$/;"	m	struct:encoding_environment
EARLY_TERMINATION	inc/me_umhex.h	62;"	d
EDIAMOND	inc/me_epzs_common.h	/^  EDIAMOND  = 2,$/;"	e	enum:__anon30
ENABLE_FIELD_CTX	inc/defines.h	38;"	d
ENABLE_HIGH444_CTX	inc/defines.h	39;"	d
EOS	inc/defines.h	/^  EOS = 1,    \/\/!< End Of Sequence$/;"	e	enum:__anon43
EOS_OUTPUT	inc/defines.h	54;"	d
EPZSBlockType	inc/params.h	/^  int EPZSBlockType;$/;"	m	struct:inp_par_enc
EPZSBlockTypePredictors	src/me_epzs_common.c	/^EPZSBlockTypePredictors (Slice * currSlice, MEBlock *mv_block, SPoint * point, int *prednum)$/;"	f
EPZSBlockTypePredictorsMB	src/me_epzs_common.c	/^EPZSBlockTypePredictorsMB (Slice * currSlice, MEBlock * mv_block, SPoint * point, int *prednum)$/;"	f
EPZSColocParams	inc/me_epzs_common.h	/^} EPZSColocParams;$/;"	t	typeref:struct:__anon28
EPZSDelete	src/me_epzs_common.c	/^EPZSDelete (VideoParameters * p_Vid)$/;"	f
EPZSDetermineStopCriterion	src/me_epzs_common.c	/^EPZSDetermineStopCriterion (EPZSParameters * p_EPZS, distblk *prevSad, MEBlock * mv_block, distblk lambda_dist)$/;"	f
EPZSDual	inc/params.h	/^  int EPZSDual;$/;"	m	struct:inp_par_enc
EPZSFixed	inc/params.h	/^  int EPZSFixed;$/;"	m	struct:inp_par_enc
EPZSInit	src/me_epzs_common.c	/^EPZSInit (VideoParameters * p_Vid)$/;"	f
EPZSMap	inc/me_epzs_common.h	/^  uint16 **EPZSMap;  \/\/!< Memory Map definition$/;"	m	struct:epzs_params
EPZSMaxThresScale	inc/params.h	/^  int EPZSMaxThresScale;$/;"	m	struct:inp_par_enc
EPZSMaxThresScale	inc/params.h	/^  int EPZSMaxThresScale[2];$/;"	m	struct:inp_par_enc
EPZSMedThresScale	inc/params.h	/^  int EPZSMedThresScale;$/;"	m	struct:inp_par_enc
EPZSMedThresScale	inc/params.h	/^  int EPZSMedThresScale[2];$/;"	m	struct:inp_par_enc
EPZSMinThresScale	inc/params.h	/^  int EPZSMinThresScale;$/;"	m	struct:inp_par_enc
EPZSMinThresScale	inc/params.h	/^  int EPZSMinThresScale[2];$/;"	m	struct:inp_par_enc
EPZSOutputStats	src/me_epzs_common.c	/^EPZSOutputStats (InputParameters * p_Inp, FILE * stat, short stats_file)$/;"	f
EPZSParameters	inc/me_epzs_common.h	/^} EPZSParameters;$/;"	t	typeref:struct:epzs_params
EPZSPattern	inc/params.h	/^  int EPZSPattern;$/;"	m	struct:inp_par_enc
EPZSPatterns	inc/me_epzs_common.h	/^} EPZSPatterns;$/;"	t	typeref:enum:__anon30
EPZSREF	inc/defines.h	56;"	d
EPZSSliceInit	src/me_epzs_common.c	/^EPZSSliceInit (Slice * currSlice)$/;"	f
EPZSSpatialMem	inc/params.h	/^  int EPZSSpatialMem;$/;"	m	struct:inp_par_enc
EPZSStructDelete	src/me_epzs_common.c	/^EPZSStructDelete (Slice * currSlice)$/;"	f
EPZSStructInit	src/me_epzs_common.c	/^EPZSStructInit (Slice * currSlice)$/;"	f
EPZSStructure	inc/me_epzs_common.h	/^typedef struct epzs_struct EPZSStructure;$/;"	t	typeref:struct:epzs_struct
EPZSSubPelGrid	inc/params.h	/^  int EPZSSubPelGrid;$/;"	m	struct:inp_par_enc
EPZSSubPelME	inc/params.h	/^  int EPZSSubPelME;$/;"	m	struct:inp_par_enc
EPZSSubPelMEBiPred	inc/params.h	/^  int EPZSSubPelMEBiPred;$/;"	m	struct:inp_par_enc
EPZSSubPelThresScale	inc/params.h	/^  int EPZSSubPelThresScale;$/;"	m	struct:inp_par_enc
EPZSSubPelThresScale	inc/params.h	/^  int EPZSSubPelThresScale[2];$/;"	m	struct:inp_par_enc
EPZSTemporal	inc/params.h	/^  int EPZSTemporal;  $/;"	m	struct:inp_par_enc
EPZSTemporal	inc/params.h	/^  int EPZSTemporal[2];$/;"	m	struct:inp_par_enc
EPZSWindowPredictorInit	src/me_epzs_common.c	/^EPZSWindowPredictorInit (short search_range, EPZSStructure * predictor, short mode)$/;"	f	file:
EPZSWindowPredictors	src/me_epzs_common.c	/^EPZSWindowPredictors (MotionVector * mv, EPZSStructure * predictor, int *prednum, EPZSStructure * windowPred)$/;"	f
EPZS_DUAL_PATTERN	src/me_epzs_common.c	/^static const char EPZS_DUAL_PATTERN[7][20] =$/;"	v	file:
EPZS_FIXED_PREDICTORS	src/me_epzs_common.c	/^static const char EPZS_FIXED_PREDICTORS[4][20] = { "Disabled", "All P", "All P + B", "Aggressive" };$/;"	v	file:
EPZS_OTHER_PREDICTORS	src/me_epzs_common.c	/^static const char EPZS_OTHER_PREDICTORS[2][20] = { "Disabled", "Enabled" };$/;"	v	file:
EPZS_PATTERN	src/me_epzs_common.c	/^static const char EPZS_PATTERN[6][20] = { "Diamond", "Square", "Extended Diamond", "Large Diamond", "SBP Large Diamond", "PMVFAST" };$/;"	v	file:
EPZS_SUBPEL_METHOD	src/me_epzs_common.c	/^static const char EPZS_SUBPEL_METHOD[3][20]    = { "Full", "Basic", "Enhanced" };$/;"	v	file:
EPZS_bipred_motion_estimation	src/me_epzs.c	/^EPZS_bipred_motion_estimation (Macroblock * currMB,     \/\/ <--  Current Macroblock$/;"	f
EPZS_integer_bipred_motion_estimation	src/me_epzs_int.c	/^EPZS_integer_bipred_motion_estimation (Macroblock * currMB,      \/\/ <--  Current Macroblock$/;"	f
EPZS_integer_motion_estimation	src/me_epzs_int.c	/^EPZS_integer_motion_estimation (Macroblock * currMB,     \/\/ <--  current Macroblock$/;"	f
EPZS_integer_subMB_motion_estimation	src/me_epzs_int.c	/^EPZS_integer_subMB_motion_estimation (Macroblock * currMB,    \/\/ <--  current Macroblock$/;"	f
EPZS_motion_estimation	src/me_epzs.c	/^EPZS_motion_estimation (Macroblock * currMB,     \/\/ <--  current Macroblock$/;"	f
EPZS_setup_engine	src/me_epzs_common.c	/^void EPZS_setup_engine(Macroblock *currMB, InputParameters *p_Inp)$/;"	f
EPZS_spatial_memory_predictors	src/me_epzs_common.c	/^EPZS_spatial_memory_predictors (EPZSParameters * p_EPZS,  \/\/!< EPZS Parameters$/;"	f
EPZS_spatial_predictors	src/me_epzs_common.c	/^EPZS_spatial_predictors (EPZSParameters * p_EPZS, MEBlock *mv_block, int list, int list_offset, short ref, struct pic_motion_params **mv_info)$/;"	f
EPZS_subMB_motion_estimation	src/me_epzs.c	/^EPZS_subMB_motion_estimation  (Macroblock * currMB,     \/\/ <--  current Macroblock$/;"	f
EPZS_sub_pel_bipred_motion_estimation	src/me_epzs_sub.c	/^EPZS_sub_pel_bipred_motion_estimation (Macroblock *currMB,      \/\/ <--  current Macroblock$/;"	f
EPZS_sub_pel_motion_estimation	src/me_epzs_sub.c	/^EPZS_sub_pel_motion_estimation ( Macroblock *currMB,      \/\/ <--  current Macroblock$/;"	f
EPZS_temporal_predictors	src/me_epzs_common.c	/^EPZS_temporal_predictors (Macroblock *currMB,                 \/\/! <-- Current Macroblock$/;"	f
ET_SIZE	inc/defines.h	127;"	d
EXP_WP	src/image_mp.c	/^  EXP_WP  = 1,$/;"	e	enum:__anon47	file:
EXTENDED	inc/defines.h	/^  EXTENDED       = 88,       \/\/!< YUV 4:2:0\/8  "Extended"$/;"	e	enum:__anon34
EXT_VERSION	inc/defines.h	32;"	d
EarlySkipEnable	inc/params.h	/^  int EarlySkipEnable;$/;"	m	struct:inp_par_enc
Ebits_to_go	inc/global.h	/^  unsigned int  Ebits_to_go;$/;"	m	struct:encoding_environment
Ebuffer	inc/global.h	/^  unsigned int  Ebuffer;$/;"	m	struct:encoding_environment
Echunks_outstanding	inc/global.h	/^  unsigned int  Echunks_outstanding;$/;"	m	struct:encoding_environment
Ecodestrm	inc/global.h	/^  byte          *Ecodestrm;$/;"	m	struct:encoding_environment
Ecodestrm_len	inc/global.h	/^  int           *Ecodestrm_len;$/;"	m	struct:encoding_environment
EdgeLoopChromaHor	inc/global.h	/^  void (*EdgeLoopChromaHor)(imgpel** Img, byte Strength[16], Macroblock *MbQ, int edge, int width, int uv);$/;"	m	struct:video_par
EdgeLoopChromaHor	src/loop_filter_normal.c	/^static void EdgeLoopChromaHor(imgpel** Img, byte Strength[16], Macroblock *MbQ, int edge, int width, int uv)$/;"	f	file:
EdgeLoopChromaVer	inc/global.h	/^  void (*EdgeLoopChromaVer)(imgpel** Img, byte Strength[16], Macroblock *MbQ, int edge, int uv);$/;"	m	struct:video_par
EdgeLoopChromaVer	src/loop_filter_normal.c	/^static void EdgeLoopChromaVer(imgpel** Img, byte Strength[16], Macroblock *MbQ, int edge, int uv)$/;"	f	file:
EdgeLoopLumaHor	inc/global.h	/^  void (*EdgeLoopLumaHor)   (ColorPlane pl, imgpel** Img, byte Strength[16], Macroblock *MbQ, int edge, int width);$/;"	m	struct:video_par
EdgeLoopLumaHor	src/loop_filter_normal.c	/^static void EdgeLoopLumaHor(ColorPlane pl, imgpel** Img, byte Strength[16], Macroblock *MbQ, int edge, int width)$/;"	f	file:
EdgeLoopLumaVer	inc/global.h	/^  void (*EdgeLoopLumaVer)   (ColorPlane pl, imgpel** Img, byte Strength[16], Macroblock *MbQ, int edge);$/;"	m	struct:video_par
EdgeLoopLumaVer	src/loop_filter_normal.c	/^static void EdgeLoopLumaVer(ColorPlane pl, imgpel** Img, byte Strength[16], Macroblock *MbQ, int edge)$/;"	f	file:
Elow	inc/global.h	/^  unsigned int  Elow, Erange;$/;"	m	struct:encoding_environment
EnableEnhLayerEPZSScalers	inc/params.h	/^  int EnableEnhLayerEPZSScalers;$/;"	m	struct:inp_par_enc
EnableIDRGOP	inc/params.h	/^  int  EnableIDRGOP;                    \/\/!< support for IDR closed gops with no shared B coded pictures.$/;"	m	struct:inp_par_enc
EnableIPCM	inc/params.h	/^  int EnableIPCM;$/;"	m	struct:inp_par_enc
EnableOpenGOP	inc/params.h	/^  int  EnableOpenGOP;                   \/\/!< support for open gops.$/;"	m	struct:inp_par_enc
EnableVUISupport	inc/params.h	/^  int EnableVUISupport;$/;"	m	struct:inp_par_enc
EncoderParams	inc/global.h	/^} EncoderParams;$/;"	t	typeref:struct:encoder_params
EncodingEnvironment	inc/global.h	/^typedef struct encoding_environment EncodingEnvironment;$/;"	t	typeref:struct:encoding_environment
EncodingEnvironmentPtr	inc/global.h	/^typedef EncodingEnvironment *EncodingEnvironmentPtr;$/;"	t
EnhLayerDFAlpha	inc/params.h	/^  int EnhLayerDFAlpha     [2][NUM_SLICE_TYPES];$/;"	m	struct:inp_par_enc
EnhLayerDFBeta	inc/params.h	/^  int EnhLayerDFBeta      [2][NUM_SLICE_TYPES];$/;"	m	struct:inp_par_enc
EnhLayerDFDisableIdc	inc/params.h	/^  int EnhLayerDFDisableIdc[2][NUM_SLICE_TYPES];$/;"	m	struct:inp_par_enc
EnhancedBWeightSupport	inc/params.h	/^  int EnhancedBWeightSupport;$/;"	m	struct:inp_par_enc
Epbuf	inc/global.h	/^  int           Epbuf;$/;"	m	struct:encoding_environment
Erange	inc/global.h	/^  unsigned int  Elow, Erange;$/;"	m	struct:encoding_environment
ErrorConcealment	inc/params.h	/^  int ErrorConcealment;       \/\/!< Error concealment method used for loss-aware RDO (0: Copy Concealment)$/;"	m	struct:inp_par_enc
EstimateWPBSlice	inc/global.h	/^  void (*EstimateWPBSlice) (struct slice *currSlice);$/;"	m	struct:video_par
EstimateWPBSliceAlg0	src/weighted_prediction.c	/^void EstimateWPBSliceAlg0(Slice *currSlice)$/;"	f
EstimateWPBSliceAlg1	src/wp_lms.c	/^void EstimateWPBSliceAlg1(Slice *currSlice)$/;"	f
EstimateWPBSliceAlg2	src/wp_mciter.c	/^void EstimateWPBSliceAlg2(Slice *currSlice)$/;"	f
EstimateWPBSlicePeriodic	src/wp_periodic.c	/^void EstimateWPBSlicePeriodic(Slice *currSlice)$/;"	f
EstimateWPBSliceRandom	src/wp_random.c	/^void EstimateWPBSliceRandom(Slice *currSlice)$/;"	f
EstimateWPPSlice	inc/global.h	/^  void (*EstimateWPPSlice) (struct slice *currSlice, int offset);$/;"	m	struct:video_par
EstimateWPPSliceAlg0	src/weighted_prediction.c	/^void EstimateWPPSliceAlg0(Slice *currSlice, int select_offset)$/;"	f
EstimateWPPSliceAlg1	src/wp_lms.c	/^void EstimateWPPSliceAlg1(Slice *currSlice, int select_offset)$/;"	f
EstimateWPPSliceAlg2	src/wp_mciter.c	/^void EstimateWPPSliceAlg2(Slice *currSlice, int select_offset)$/;"	f
EstimateWPPSlicePeriodic	src/wp_periodic.c	/^void EstimateWPPSlicePeriodic(Slice *currSlice, int select_offset)$/;"	f
EstimateWPPSliceRandom	src/wp_random.c	/^void EstimateWPPSliceRandom(Slice *currSlice, int select_offset)$/;"	f
EvaluateDBOff	inc/global.h	/^  int EvaluateDBOff;$/;"	m	struct:video_par
ExpFrameInfo	inc/explicit_seq.h	/^} ExpFrameInfo;$/;"	t	typeref:struct:__anon26
ExpSeqInfo	inc/explicit_seq.h	/^} ExpSeqInfo;$/;"	t	typeref:struct:exp_seq_info
ExplicitHierarchyFormat	inc/params.h	/^  char ExplicitHierarchyFormat[INPUT_TEXT_SIZE]; \/\/!< Explicit GOP format (HierarchicalCoding==3).$/;"	m	struct:inp_par_enc
ExplicitSeqCoding	inc/params.h	/^  int  ExplicitSeqCoding;$/;"	m	struct:inp_par_enc
ExplicitSeqFile	inc/params.h	/^  char ExplicitSeqFile[FILE_NAME_SIZE];$/;"	m	struct:inp_par_enc
FASTMODE	src/rdopt.c	49;"	d	file:
FCBUCFMAD	inc/rc_types.h	/^  double *FCBUCFMAD;$/;"	m	struct:rc_quadratic
FCBUPFMAD	inc/rc_types.h	/^  double *FCBUPFMAD;$/;"	m	struct:rc_quadratic
FIELD_SCAN	src/block.c	/^static const byte FIELD_SCAN[16][2] =$/;"	v	file:
FIELD_SCAN8x8	src/transform8x8.c	/^static const byte FIELD_SCAN8x8[64][2] = {   \/\/ 8x8$/;"	v	file:
FIELD_SCAN8x8_CAVLC	src/transform8x8.c	/^static const byte FIELD_SCAN8x8_CAVLC[64][2] = {$/;"	v	file:
FILE_NAME_SIZE	inc/defines.h	96;"	d
FIXED	src/context_ini.c	29;"	d	file:
FLAGS	Makefile	/^FLAGS=  $(CFLAGS) -Wall -I$(INCDIR) -I$(ADDINCDIR) -D __USE_LARGEFILE64 -D _FILE_OFFSET_BITS=64$/;"	m
FRAME_QP	src/image_mp.c	/^  FRAME_QP = 3,$/;"	e	enum:__anon47	file:
FRAME_TYPE	src/image_mp.c	/^  FRAME_TYPE = 2, \/\/ only applicable to P $/;"	e	enum:__anon47	file:
FRAME_TYPES	src/context_ini.c	28;"	d	file:
FREXT_CAVLC444	inc/defines.h	/^  FREXT_CAVLC444 = 44,       \/\/!< YUV 4:4:4\/14 "CAVLC 4:4:4"$/;"	e	enum:__anon34
FREXT_HP	inc/defines.h	/^  FREXT_HP       = 100,      \/\/!< YUV 4:2:0\/8  "High"$/;"	e	enum:__anon34
FREXT_Hi10P	inc/defines.h	/^  FREXT_Hi10P    = 110,      \/\/!< YUV 4:2:0\/10 "High 10"$/;"	e	enum:__anon34
FREXT_Hi422	inc/defines.h	/^  FREXT_Hi422    = 122,      \/\/!< YUV 4:2:2\/10 "High 4:2:2"$/;"	e	enum:__anon34
FREXT_Hi444	inc/defines.h	/^  FREXT_Hi444    = 244,      \/\/!< YUV 4:4:4\/14 "High 4:4:4"$/;"	e	enum:__anon34
FastCrIntraDecision	inc/params.h	/^  int FastCrIntraDecision;$/;"	m	struct:inp_par_enc
FastIntra16x16	inc/params.h	/^  int FastIntra16x16;$/;"	m	struct:inp_par_enc
FastIntra4x4	inc/params.h	/^  int FastIntra4x4;$/;"	m	struct:inp_par_enc
FastIntra8x8	inc/params.h	/^  int FastIntra8x8;$/;"	m	struct:inp_par_enc
FastIntraChroma	inc/params.h	/^  int FastIntraChroma;$/;"	m	struct:inp_par_enc
FastIntraMD	inc/params.h	/^  int FastIntraMD; $/;"	m	struct:inp_par_enc
FastLine4X	inc/refbuf.h	/^static inline imgpel *FastLine4X (StorablePicture *ref, int y, int x)$/;"	f
FastLine8X_chroma	inc/refbuf.h	/^static inline imgpel *FastLine8X_chroma (StorablePicture *ref, int cmp, int y, int x)$/;"	f
FastMDEnable	inc/params.h	/^  int FastMDEnable; $/;"	m	struct:inp_par_enc
FieldAveHeaderBits	inc/rc_types.h	/^  int    FieldAveHeaderBits;$/;"	m	struct:rc_quadratic
FieldControl	inc/rc_types.h	/^  int   FieldControl;$/;"	m	struct:rc_generic
FieldFrame	inc/rc_types.h	/^  int   FieldFrame;$/;"	m	struct:rc_generic
FieldQPBuffer	inc/rc_types.h	/^  int    FieldQPBuffer;$/;"	m	struct:rc_quadratic
FinalizeBufferingPeriod	src/sei.c	/^static void FinalizeBufferingPeriod(SEIParameters *p_SEI, seq_parameter_set_rbsp_t *active_sps)$/;"	f	file:
FinalizeDRPMRepetition	src/sei.c	/^static void FinalizeDRPMRepetition(VideoParameters *p_Vid)$/;"	f	file:
FinalizeFramePackingArrangement	src/sei.c	/^static void FinalizeFramePackingArrangement(SEIParameters *p_SEI, InputParameters *p_Inp)$/;"	f	file:
FinalizePanScanRectInfo	src/sei.c	/^void FinalizePanScanRectInfo(SEIParameters *p_SEI)$/;"	f
FinalizePicTiming	src/sei.c	/^static void FinalizePicTiming(VideoParameters *p_Vid)$/;"	f	file:
FinalizePostFilterHints	src/sei.c	/^static void FinalizePostFilterHints(SEIParameters *p_SEI)$/;"	f	file:
FinalizeRandomAccess	src/sei.c	/^static void FinalizeRandomAccess(SEIParameters *p_SEI)$/;"	f	file:
FinalizeSceneInformation	src/sei.c	/^void FinalizeSceneInformation(SEIParameters *p_SEI)$/;"	f
FinalizeSpareMBMap	src/sei.c	/^static void FinalizeSpareMBMap(VideoParameters *p_Vid)$/;"	f	file:
FinalizeSubseqChar	src/sei.c	/^static void FinalizeSubseqChar(SEIParameters *p_SEI)$/;"	f	file:
FinalizeSubseqInfo	src/sei.c	/^static void FinalizeSubseqInfo(SEIParameters *p_SEI, int currLayer)$/;"	f	file:
FinalizeSubseqLayerInfo	src/sei.c	/^static void FinalizeSubseqLayerInfo(SEIParameters *p_SEI)$/;"	f	file:
FinalizeToneMapping	src/sei.c	/^static void FinalizeToneMapping(VideoParameters *p_Vid)$/;"	f	file:
FinalizeUser_data_registered_itu_t_t35	src/sei.c	/^static void FinalizeUser_data_registered_itu_t_t35(SEIParameters *p_SEI)$/;"	f	file:
FinalizeUser_data_unregistered	src/sei.c	/^static void FinalizeUser_data_unregistered(SEIParameters *p_SEI)$/;"	f	file:
FindSkipModeMotionVector	src/mv_search.c	/^void FindSkipModeMotionVector (Macroblock *currMB)$/;"	f
FirstFrameCorrect	inc/params.h	/^  int FirstFrameCorrect;      \/\/!< the first frame is encoded under the assumption that it is always correctly received.$/;"	m	struct:inp_par_enc
FirstMBInSlice	inc/global.h	/^  int FirstMBInSlice[MAXSLICEGROUPIDS];$/;"	m	struct:video_par
FixedLambda	inc/params.h	/^  double FixedLambda[6];$/;"	m	struct:inp_par_enc
FmoEndPicture	src/fmo.c	/^int FmoEndPicture ()$/;"	f
FmoGenerateMBAmap	src/fmo.c	/^static int FmoGenerateMBAmap (VideoParameters * p_Vid, seq_parameter_set_rbsp_t* sps)$/;"	f	file:
FmoGenerateMapUnitToSliceGroupMap	src/fmo.c	/^static int FmoGenerateMapUnitToSliceGroupMap (VideoParameters * p_Vid, pic_parameter_set_rbsp_t * pps)$/;"	f	file:
FmoGenerateType0MapUnitMap	src/fmo.c	/^static void FmoGenerateType0MapUnitMap (VideoParameters * p_Vid, pic_parameter_set_rbsp_t * pps )$/;"	f	file:
FmoGenerateType1MapUnitMap	src/fmo.c	/^static void FmoGenerateType1MapUnitMap (VideoParameters * p_Vid, pic_parameter_set_rbsp_t * pps )$/;"	f	file:
FmoGenerateType2MapUnitMap	src/fmo.c	/^static void FmoGenerateType2MapUnitMap (VideoParameters * p_Vid, pic_parameter_set_rbsp_t * pps )$/;"	f	file:
FmoGenerateType3MapUnitMap	src/fmo.c	/^static void FmoGenerateType3MapUnitMap (VideoParameters * p_Vid, pic_parameter_set_rbsp_t * pps )$/;"	f	file:
FmoGenerateType4MapUnitMap	src/fmo.c	/^static void FmoGenerateType4MapUnitMap (VideoParameters * p_Vid, pic_parameter_set_rbsp_t * pps )$/;"	f	file:
FmoGenerateType5MapUnitMap	src/fmo.c	/^static void FmoGenerateType5MapUnitMap (VideoParameters * p_Vid, pic_parameter_set_rbsp_t * pps )$/;"	f	file:
FmoGenerateType6MapUnitMap	src/fmo.c	/^static void FmoGenerateType6MapUnitMap (VideoParameters * p_Vid, pic_parameter_set_rbsp_t * pps )$/;"	f	file:
FmoGetFirstMBOfSliceGroup	src/fmo.c	/^int FmoGetFirstMBOfSliceGroup (VideoParameters *p_Vid, int SliceGroupID)$/;"	f
FmoGetFirstMacroblockInSlice	src/fmo.c	/^int FmoGetFirstMacroblockInSlice ( VideoParameters *p_Vid, int SliceGroup)$/;"	f
FmoGetLastCodedMBOfSliceGroup	src/fmo.c	/^int FmoGetLastCodedMBOfSliceGroup (VideoParameters *p_Vid, int SliceGroupID)$/;"	f
FmoGetNextMBNr	src/fmo.c	/^int FmoGetNextMBNr (VideoParameters *p_Vid, int CurrentMbNr)$/;"	f
FmoGetPreviousMBNr	src/fmo.c	/^int FmoGetPreviousMBNr (VideoParameters *p_Vid, int CurrentMbNr)$/;"	f
FmoInit	src/fmo.c	/^int FmoInit(VideoParameters * p_Vid, pic_parameter_set_rbsp_t * pps, seq_parameter_set_rbsp_t * sps)$/;"	f
FmoMB2SliceGroup	src/fmo.c	/^int FmoMB2SliceGroup (VideoParameters *p_Vid, int mb)$/;"	f
FmoSetLastMacroblockInSlice	src/fmo.c	/^void FmoSetLastMacroblockInSlice ( VideoParameters *p_Vid, int mb)$/;"	f
FmoSliceGroupCompletelyCoded	src/fmo.c	/^int FmoSliceGroupCompletelyCoded( VideoParameters *p_Vid, int SliceGroupID)$/;"	f
FmoStartPicture	src/fmo.c	/^int FmoStartPicture (VideoParameters *p_Vid)$/;"	f
FmoUninit	src/fmo.c	/^void FmoUninit(VideoParameters *p_Vid)$/;"	f
ForceTrueRateRDO	inc/params.h	/^  int ForceTrueRateRDO;$/;"	m	struct:inp_par_enc
FrameAveHeaderBits	inc/rc_types.h	/^  int    FrameAveHeaderBits;$/;"	m	struct:rc_quadratic
FrameCodingMethod	src/image_mp.c	/^} FrameCodingMethod;$/;"	t	typeref:enum:__anon47	file:
FrameHeightInMbs	inc/global.h	/^  unsigned int FrameHeightInMbs;$/;"	m	struct:coding_par
FrameHeightInMbs	inc/global.h	/^  unsigned int FrameHeightInMbs;$/;"	m	struct:video_par
FrameNumOffset	inc/global.h	/^  int FrameNumOffset;         \/\/!< POC type 1$/;"	m	struct:video_par
FrameNumOffset	inc/global.h	/^  unsigned int FrameNumOffset;$/;"	m	struct:coding_par
FrameQPBuffer	inc/rc_types.h	/^  int    FrameQPBuffer;$/;"	m	struct:rc_quadratic
FrameRate	inc/params.h	/^  double FrameRate;$/;"	m	struct:inp_par_enc
FrameSizeInMbs	inc/global.h	/^  unsigned int FrameSizeInMbs;$/;"	m	struct:coding_par
FrameSizeInMbs	inc/global.h	/^  unsigned int FrameSizeInMbs;$/;"	m	struct:video_par
FrameStore	inc/mbuffer.h	/^typedef struct frame_store FrameStore;$/;"	t	typeref:struct:frame_store
FrameUnitStruct	inc/pred_struct_types.h	/^} FrameUnitStruct;        \/\/ here "frame" is as in the real thing: the displayed frame; not as "frame" in "frame picture" in H.264$/;"	t	typeref:struct:frame_struct
FreeParameterSets	src/parset.c	/^void FreeParameterSets (VideoParameters *p_Vid)$/;"	f
FrmStructBufferLength	inc/params.h	/^  int FrmStructBufferLength; \/\/!< Number of frames that is populated every time populate_frm_struct is called$/;"	m	struct:inp_par_enc
GAMMAP	inc/rc_types.h	/^  double GAMMAP;                \/\/LIZG, JVT019r1$/;"	m	struct:rc_quadratic
GET_METIME	inc/defines.h	34;"	d
GOPOverdue	inc/rc_types.h	/^  Boolean GOPOverdue;$/;"	m	struct:rc_quadratic
GOPTargetBufferLevel	inc/rc_types.h	/^  double GOPTargetBufferLevel;$/;"	m	struct:rc_quadratic
GOP_DATA	inc/global.h	/^} GOP_DATA;$/;"	t	typeref:struct:__anon5
GROUP_SIZE	inc/loop_filter.h	23;"	d
G_COMP	inc/defines.h	/^  G_COMP = 4,    \/\/ G Component$/;"	e	enum:__anon39
GenerateMultiplePPS	inc/params.h	/^  int GenerateMultiplePPS;$/;"	m	struct:inp_par_enc
GeneratePic_parameter_set_NALU	src/parset.c	/^NALU_t *GeneratePic_parameter_set_NALU(VideoParameters *p_Vid, int PPS_id)$/;"	f
GeneratePic_parameter_set_rbsp	src/parset.c	/^int GeneratePic_parameter_set_rbsp (VideoParameters *p_Vid, pic_parameter_set_rbsp_t *pps, byte *rbsp)$/;"	f
GeneratePictureParameterSet	src/parset.c	/^void GeneratePictureParameterSet( pic_parameter_set_rbsp_t *pps, \/\/!< Picture Parameter Set to be filled$/;"	f
GenerateSEIMessage	inc/params.h	/^  int GenerateSEIMessage;$/;"	m	struct:inp_par_enc
GenerateSEImessage_NALU	src/parset.c	/^NALU_t *GenerateSEImessage_NALU(InputParameters *p_Inp)$/;"	f
GenerateSEImessage_rbsp	src/parset.c	/^int GenerateSEImessage_rbsp (InputParameters *p_Inp, int id, byte *rbsp)$/;"	f
GenerateSeq_parameter_set_NALU	src/parset.c	/^NALU_t *GenerateSeq_parameter_set_NALU (VideoParameters *p_Vid)$/;"	f
GenerateSeq_parameter_set_rbsp	src/parset.c	/^int GenerateSeq_parameter_set_rbsp (VideoParameters *p_Vid, seq_parameter_set_rbsp_t *sps, byte *rbsp, short Is_Subset)$/;"	f
GenerateSequenceParameterSet	src/parset.c	/^void GenerateSequenceParameterSet( seq_parameter_set_rbsp_t *sps,  \/\/!< Sequence Parameter Set to be filled$/;"	f
GenerateSubsetSeq_parameter_set_NALU	src/parset.c	/^NALU_t *GenerateSubsetSeq_parameter_set_NALU (VideoParameters *p_Vid)$/;"	f
GenerateVUIParameters	src/parset.c	/^void GenerateVUIParameters(seq_parameter_set_rbsp_t *sps, InputParameters *p_Inp)$/;"	f
GenerateVUI_parameters_rbsp	src/parset.c	/^static int GenerateVUI_parameters_rbsp(seq_parameter_set_rbsp_t *sps, Bitstream *bitstream)$/;"	f	file:
GetBits	src/vlc.c	/^int GetBits (byte *buffer,$/;"	f
GetCtxModelNumber	src/context_ini.c	/^void GetCtxModelNumber (Slice *currSlice, int* mnumber, MotionInfoContexts* mc, TextureInfoContexts* tc)$/;"	f
GetDirectCost8x8	src/mv_search.c	/^distblk GetDirectCost8x8 (Macroblock *currMB, int block, distblk *cost8x8)$/;"	f
GetDirectCostMB	src/mv_search.c	/^distblk GetDirectCostMB (Macroblock *currMB)$/;"	f
GetMVPredictor	inc/global.h	/^  void (*GetMVPredictor) (struct macroblock_enc *currMB, PixelPos *block, MotionVector *pmv, short ref_frame, $/;"	m	struct:macroblock_enc
GetMaxMVD	inc/mv_search.h	/^static inline int GetMaxMVD(MotionVector *pMV, MotionVector *pRefMV)$/;"	f
GetSkipCostMB	src/mv_search.c	/^static distblk GetSkipCostMB (Macroblock *currMB, int lambda)$/;"	f	file:
GetStrengthHor	inc/global.h	/^  void (*GetStrengthHor)    (byte Strength[16], Macroblock *MbQ, int edge, int mvlimit);$/;"	m	struct:video_par
GetStrengthHor	src/loop_filter_normal.c	/^static void GetStrengthHor(byte Strength[MB_BLOCK_SIZE], Macroblock *MbQ, int edge, int mvlimit)$/;"	f	file:
GetStrengthVer	inc/global.h	/^  void (*GetStrengthVer)    (byte Strength[16], Macroblock *MbQ, int edge, int mvlimit);$/;"	m	struct:video_par
GetStrengthVer	src/loop_filter_normal.c	/^static void GetStrengthVer(byte Strength[MB_BLOCK_SIZE], Macroblock *MbQ, int edge, int mvlimit)$/;"	f	file:
Get_Direct_MV_Spatial_MBAFF	src/mv_direct.c	/^void Get_Direct_MV_Spatial_MBAFF (Macroblock *currMB)$/;"	f
Get_Direct_MV_Spatial_Normal	src/mv_direct.c	/^void Get_Direct_MV_Spatial_Normal (Macroblock *currMB)$/;"	f
Get_Direct_MV_Temporal	src/mv_direct.c	/^void Get_Direct_MV_Temporal (Macroblock *currMB)$/;"	f
Get_Direct_Motion_Vectors	inc/global.h	/^  void    (*Get_Direct_Motion_Vectors)          (Macroblock *currMB);$/;"	m	struct:slice
H264PAYLOADTYPE	inc/rtp.h	25;"	d
H264SSRC	inc/rtp.h	26;"	d
HALF	inc/biariencode.h	40;"	d
HM50RefStructure	inc/params.h	/^  int HM50RefStructure;$/;"	m	struct:inp_par_enc
HM50_LIKE_MMCO	inc/defines.h	75;"	d
HOR_DOWN_PRED	inc/defines.h	/^  HOR_DOWN_PRED        = 6,$/;"	e	enum:__anon40
HOR_PRED	inc/defines.h	/^  HOR_PRED             = 1,$/;"	e	enum:__anon40
HOR_PRED_16	inc/defines.h	/^  HOR_PRED_16    = 1,$/;"	e	enum:__anon41
HOR_PRED_8	inc/defines.h	/^  HOR_PRED_8    =  1,$/;"	e	enum:__anon42
HOR_UP_PRED	inc/defines.h	/^  HOR_UP_PRED          = 8$/;"	e	enum:__anon40
HadamardSAD4x4	src/me_distortion.c	/^int HadamardSAD4x4 (short* diff)$/;"	f
HadamardSAD8x8	src/me_distortion.c	/^int HadamardSAD8x8 (short* diff)$/;"	f
HaveAggregationSEI	src/sei.c	/^Boolean HaveAggregationSEI(VideoParameters *p_Vid)$/;"	f
Hexagon	src/me_umhex.c	/^static const MotionVector Hexagon[6] = {{-8, 0}, {8, 0},{-4, -8}, {4, 8}, {-4, 8}, {4 , -8}};$/;"	v	file:
Hexagon	src/me_umhexsmp.c	/^static const MotionVector Hexagon[6] = {{-8, 0}, {8, 0},{-4, -8}, {4, 8}, {-4, 8}, {4 , -8}};$/;"	v	file:
HierarchicalCoding	inc/params.h	/^  int HierarchicalCoding;$/;"	m	struct:inp_par_enc
HierarchyLevelQPEnable	inc/params.h	/^  int HierarchyLevelQPEnable;$/;"	m	struct:inp_par_enc
I16MB	inc/defines.h	/^  I16MB        = 10,$/;"	e	enum:__anon35
I16Offset	src/rdopt.c	/^short I16Offset (int cbp, short i16mode)$/;"	f
I16rdo	inc/params.h	/^  int I16rdo; $/;"	m	struct:inp_par_enc
I16x16PredModes	inc/defines.h	/^} I16x16PredModes;$/;"	v	typeref:enum:__anon41
I4MB	inc/defines.h	/^  I4MB         =  9,$/;"	e	enum:__anon35
I4x4PredModes	inc/defines.h	/^} I4x4PredModes;$/;"	v	typeref:enum:__anon40
I8MB	inc/defines.h	/^  I8MB         = 13,$/;"	e	enum:__anon35
I8x8PredModes	inc/defines.h	/^} I8x8PredModes;$/;"	v	typeref:enum:__anon42
IBLOCK	inc/defines.h	/^  IBLOCK       = 11,$/;"	e	enum:__anon35
IMGTYPE	inc/defines.h	37;"	d
IMG_PAD_SIZE_X	inc/defines.h	120;"	d
IMG_PAD_SIZE_Y	inc/defines.h	121;"	d
IMP_WP	src/image_mp.c	/^  IMP_WP  = 2,    \/\/ only applicable to B$/;"	e	enum:__anon47	file:
INCDIR	Makefile	/^INCDIR= inc$/;"	m
INCLUDED_BY_CONFIGFILE_C	src/configfile.c	59;"	d	file:
INCREMENT	src/me_fullfast.c	199;"	d	file:
INIT_FRAME_RATE	inc/defines.h	285;"	d
INPUT_TEXT_SIZE	inc/defines.h	97;"	d
INTRA_RDCOSTCALC_ET	inc/defines.h	47;"	d
INTRA_RDCOSTCALC_NNZ	inc/defines.h	48;"	d
INVALIDINDEX	inc/defines.h	124;"	d
IPCM	inc/defines.h	/^  IPCM         = 14,$/;"	e	enum:__anon35
IS_BW	src/rdopt.c	1224;"	d	file:
IS_BW	src/rdopt.c	1313;"	d	file:
IS_FW	src/rdopt.c	1223;"	d	file:
IS_FW	src/rdopt.c	1312;"	d	file:
ImageStructure	inc/global.h	/^typedef struct image_structure ImageStructure;$/;"	t	typeref:struct:image_structure
Info8x8	inc/global.h	/^typedef struct info_8x8 Info8x8;$/;"	t	typeref:struct:info_8x8
InitBufferingPeriod	src/sei.c	/^void InitBufferingPeriod(VideoParameters *p_Vid)$/;"	f
InitDRPMRepetition	src/sei.c	/^static void InitDRPMRepetition(SEIParameters *p_SEI)$/;"	f	file:
InitFramePackingArrangement	src/sei.c	/^static void InitFramePackingArrangement(VideoParameters *p_Vid)$/;"	f	file:
InitOffsetParam	src/q_offsets.c	/^void InitOffsetParam (QuantParameters *p_Quant, InputParameters *p_Inp)$/;"	f
InitPanScanRectInfo	src/sei.c	/^static void InitPanScanRectInfo(SEIParameters *p_SEI)$/;"	f	file:
InitPicTiming	src/sei.c	/^void InitPicTiming(SEIParameters *p_SEI)$/;"	f
InitPostFilterHints	src/sei.c	/^static void InitPostFilterHints(SEIParameters *p_SEI)$/;"	f	file:
InitRandomAccess	src/sei.c	/^static void InitRandomAccess(SEIParameters *p_SEI)$/;"	f	file:
InitSEIMessages	src/sei.c	/^void InitSEIMessages(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
InitSceneInformation	src/sei.c	/^void InitSceneInformation(SEIParameters *p_SEI)$/;"	f
InitSparePicture	src/sei.c	/^static void InitSparePicture(SEIParameters *p_SEI)$/;"	f	file:
InitSubseqChar	src/sei.c	/^void InitSubseqChar(VideoParameters *p_Vid)$/;"	f
InitSubseqInfo	src/sei.c	/^void InitSubseqInfo(SEIParameters *p_SEI, int currLayer)$/;"	f
InitSubseqLayerInfo	src/sei.c	/^static void InitSubseqLayerInfo(SEIParameters *p_SEI)$/;"	f	file:
InitToneMapping	src/sei.c	/^static void InitToneMapping(SEIParameters *p_SEI, InputParameters *p_Inp) $/;"	f	file:
InitUser_data_registered_itu_t_t35	src/sei.c	/^void InitUser_data_registered_itu_t_t35(SEIParameters *p_SEI)$/;"	f
InitUser_data_unregistered	src/sei.c	/^static void InitUser_data_unregistered(SEIParameters *p_SEI)$/;"	f	file:
InitWP	src/weighted_prediction.c	/^void InitWP(VideoParameters *p_Vid, InputParameters *p_Inp, int force_wp_method)$/;"	f
InputParameters	inc/global.h	/^typedef struct inp_par_enc InputParameters;$/;"	t	typeref:struct:inp_par_enc
IntPelME	inc/global.h	/^  distblk (*IntPelME)       (struct macroblock_enc *currMB, MotionVector *, struct me_block *mv_block, distblk, int);$/;"	m	struct:macroblock_enc
InterSearch	inc/params.h	/^  int InterSearch[2][2][8];$/;"	m	struct:inp_par_enc
Intra16x16ParDisable	inc/params.h	/^  int Intra16x16ParDisable;$/;"	m	struct:inp_par_enc
Intra16x16PlaneDisable	inc/params.h	/^  int Intra16x16PlaneDisable;$/;"	m	struct:inp_par_enc
Intra4x4DiagDisable	inc/params.h	/^  int Intra4x4DiagDisable;$/;"	m	struct:inp_par_enc
Intra4x4DirDisable	inc/params.h	/^  int Intra4x4DirDisable;$/;"	m	struct:inp_par_enc
Intra4x4ParDisable	inc/params.h	/^  int Intra4x4ParDisable;$/;"	m	struct:inp_par_enc
IntraBottom	inc/params.h	/^  int IntraBottom;            \/\/!< Force Intra Bottom at GOP periods.$/;"	m	struct:inp_par_enc
IntraChromaPredModeFlag	inc/global.h	/^  char                IntraChromaPredModeFlag;$/;"	m	struct:macroblock_enc
IntraChromaPrediction4x4	src/mc_prediction.c	/^void IntraChromaPrediction4x4 (Macroblock* currMB, \/\/!< Current Macroblock$/;"	f
IntraDisableInterOnly	inc/params.h	/^  int IntraDisableInterOnly;$/;"	m	struct:inp_par_enc
IntraMBs	inc/global.h	/^  int *IntraMBs;$/;"	m	struct:video_par
IntraProfile	inc/params.h	/^  int IntraProfile;                     \/\/!< Enable Intra profiles$/;"	m	struct:inp_par_enc
Inv_Residual_DPCM_16x16	src/block.c	/^static int Inv_Residual_DPCM_16x16(int **m7, int ipmode)$/;"	f	file:
Inv_Residual_DPCM_4x4	src/block.c	/^static int Inv_Residual_DPCM_4x4(Macroblock *currMB, int **m7, int block_y, int block_x)  $/;"	f	file:
Inv_Residual_DPCM_8x8	src/transform8x8.c	/^static int Inv_Residual_DPCM_8x8(Macroblock *currMB, int **m7, int block_y, int block_x)  $/;"	f	file:
Inv_Residual_DPCM_Chroma	src/block.c	/^static int Inv_Residual_DPCM_Chroma(int ipmode, int **m7, int width, int height)  $/;"	f	file:
InvalidMotionVectors	src/conformance.c	/^int InvalidMotionVectors(VideoParameters *p_Vid, Slice *currSlice, Block8x8Info* b8x8info, int mode)$/;"	f
InvalidWeightsForBiPrediction	src/conformance.c	/^int InvalidWeightsForBiPrediction(Slice *currSlice, Block8x8Info* b8x8info, int mode)$/;"	f
JCOST_CALC_SCALEUP	inc/defines.h	46;"	d
JCOST_OVERFLOWCHECK	inc/defines.h	49;"	d
JM	inc/defines.h	30;"	d
JMHelpExit	src/configfile.c	/^void JMHelpExit (void)$/;"	f
JM_INT_DIVIDE	inc/defines.h	44;"	d
JM_MEM_DISTORTION	inc/defines.h	45;"	d
JM_PARALLEL_DEBLOCK	inc/defines.h	50;"	d
JND	inc/global.h	/^  double JND[NUM_WAVELET_LEVEL][4];$/;"	m	struct:video_par
JVmotion	inc/mbuffer.h	/^  PicMotionParamsOld JVmotion[MAX_PLANE];    \/\/!< Motion info for 4:4:4 independent coding$/;"	m	struct:storable_picture
JVmv_info	inc/mbuffer.h	/^  PicMotionParams **JVmv_info[MAX_PLANE];    \/\/!< Motion info for 4:4:4 independent coding$/;"	m	struct:storable_picture
K0	src/cconv_yuv2rgb.c	/^static const float K0 = 1.000f;$/;"	v	file:
K0	src/cconv_yuv2rgb.c	/^static const float K0 = 1.164f;$/;"	v	file:
K1	src/cconv_yuv2rgb.c	/^static const float K1 = 1.402f;$/;"	v	file:
K1	src/cconv_yuv2rgb.c	/^static const float K1 = 1.596f;$/;"	v	file:
K2	src/cconv_yuv2rgb.c	/^static const float K2 = 0.34414f;$/;"	v	file:
K2	src/cconv_yuv2rgb.c	/^static const float K2 = 0.391f;$/;"	v	file:
K3	src/cconv_yuv2rgb.c	/^static const float K3 = 0.71414f;$/;"	v	file:
K3	src/cconv_yuv2rgb.c	/^static const float K3 = 0.813f;$/;"	v	file:
K4	src/cconv_yuv2rgb.c	/^static const float K4 = 1.772f;$/;"	v	file:
K4	src/cconv_yuv2rgb.c	/^static const float K4 = 2.018f;$/;"	v	file:
KEEP_B_SAME_LIST	inc/defines.h	69;"	d
LAMBDA_ACCURACY_BITS	inc/defines.h	129;"	d
LAMBDA_FACTOR	inc/defines.h	130;"	d
LDIAMOND	inc/me_epzs_common.h	/^  LDIAMOND  = 3,$/;"	e	enum:__anon30
LDRefSetting	inc/params.h	/^  int LDRefSetting;$/;"	m	struct:inp_par_enc
LD_REF_SETTING	inc/defines.h	76;"	d
LEVELHMVLIMIT	src/conformance.c	/^const int LEVELHMVLIMIT[6] =  { -2047, 2047, -4096, 4095, -8192, 8191};$/;"	v
LEVELVMVLIMIT	src/conformance.c	/^static const int LEVELVMVLIMIT[17][6] =$/;"	v	file:
LEVEL_IDC	inc/configfile.h	21;"	d
LEVEL_NUM	inc/defines.h	246;"	d
LIBS	Makefile	/^LIBS=   -lm $(STATIC)$/;"	m
LLN	inc/errdo.h	/^  LLN = 0,$/;"	e	enum:__anon25
LUMA	inc/defines.h	/^  LUMA              =  0,$/;"	e	enum:__anon37
LUMA_16AC	inc/defines.h	/^  LUMA_16AC     =   1,$/;"	e	enum:__anon38
LUMA_16DC	inc/defines.h	/^  LUMA_16DC     =   0,$/;"	e	enum:__anon38
LUMA_4x4	inc/defines.h	/^  LUMA_4x4      =   5,$/;"	e	enum:__anon38
LUMA_4x8	inc/defines.h	/^  LUMA_4x8      =   4,$/;"	e	enum:__anon38
LUMA_8x4	inc/defines.h	/^  LUMA_8x4      =   3,$/;"	e	enum:__anon38
LUMA_8x8	inc/defines.h	/^  LUMA_8x8      =   2,$/;"	e	enum:__anon38
LUMA_INTRA16x16AC	inc/defines.h	/^  LUMA_INTRA16x16AC =  2,$/;"	e	enum:__anon37
LUMA_INTRA16x16DC	inc/defines.h	/^  LUMA_INTRA16x16DC =  1,$/;"	e	enum:__anon37
LambdaWeight	inc/params.h	/^  double LambdaWeight[6];$/;"	m	struct:inp_par_enc
LeakyBucketParamFile	inc/params.h	/^  char LeakyBucketParamFile[FILE_NAME_SIZE];$/;"	m	struct:inp_par_enc
LeakyBucketRateFile	inc/params.h	/^  char LeakyBucketRateFile[FILE_NAME_SIZE];$/;"	m	struct:inp_par_enc
LevelIDC	inc/params.h	/^  int LevelIDC;                         \/\/!< value of syntax element level_idc$/;"	m	struct:inp_par_enc
LevelIndex	inc/global.h	/^  int LevelIndex;              \/\/!< mapped level idc$/;"	m	struct:video_par
Log2MaxFNumMinus4	inc/params.h	/^  int Log2MaxFNumMinus4;                \/\/!< value of syntax element log2_max_frame_num$/;"	m	struct:inp_par_enc
Log2MaxPOCLsbMinus4	inc/params.h	/^  int Log2MaxPOCLsbMinus4;              \/\/!< value of syntax element log2_max_pic_order_cnt_lsb_minus4$/;"	m	struct:inp_par_enc
LossRateA	inc/params.h	/^  double LossRateA;              \/\/!< assumed loss probablility of partition A (or full slice), in per cent, used for loss-aware R\/D optimization$/;"	m	struct:inp_par_enc
LossRateB	inc/params.h	/^  double LossRateB;              \/\/!< assumed loss probablility of partition B, in per cent, used for loss-aware R\/D$/;"	m	struct:inp_par_enc
LossRateC	inc/params.h	/^  double LossRateC;              \/\/!< assumed loss probablility of partition C, in per cent, used for loss-aware R\/D$/;"	m	struct:inp_par_enc
LosslessCoding	inc/params.h	/^  int LosslessCoding;$/;"	m	struct:inp_par_enc
LowDelay	inc/params.h	/^  int  LowDelay;                      \/\/!< Apply HierarchicalCoding without delay (i.e., encode in the captured\/display order)$/;"	m	struct:inp_par_enc
LowPassForIntra8x8Pred	src/intra8x8.c	/^void LowPassForIntra8x8Pred(imgpel *PredPel, int block_up_left, int block_up, int block_left)$/;"	f
LowerBound	inc/rc_types.h	/^  int    UpperBound1, UpperBound2, LowerBound;$/;"	m	struct:rc_quadratic
M32	Makefile	/^M32?= 0$/;"	m
MADModelEstimator	src/rc_quadratic.c	/^void MADModelEstimator (VideoParameters *p_Vid, InputParameters *p_Inp, RCQuadratic *p_quad, int n_windowSize, Boolean *PictureRejected)$/;"	f
MADPictureC1	inc/rc_types.h	/^  double MADPictureC1;$/;"	m	struct:rc_quadratic
MADPictureC2	inc/rc_types.h	/^  double MADPictureC2;$/;"	m	struct:rc_quadratic
MADm_windowSize	inc/rc_types.h	/^  int    MADm_windowSize;$/;"	m	struct:rc_quadratic
MADofMB	inc/rc_types.h	/^  int   *MADofMB;$/;"	m	struct:rc_generic
MAIN	inc/defines.h	/^  MAIN           = 77,       \/\/!< YUV 4:2:0\/8  "Main"$/;"	e	enum:__anon34
MASK_BITS	inc/biariencode.h	37;"	d
MAXMODE	inc/defines.h	/^  MAXMODE      = 15$/;"	e	enum:__anon35
MAXPARTITIONMODES	inc/elements.h	30;"	d
MAXRTPPACKETSIZE	inc/rtp.h	24;"	d
MAXRTPPAYLOADLEN	inc/rtp.h	23;"	d
MAXSLICEGROUPIDS	inc/defines.h	322;"	d
MAXSLICEPERPICTURE	inc/defines.h	138;"	d
MAX_BITS	inc/biariencode.h	36;"	d
MAX_CODED_BIT_DEPTH	inc/sei.h	21;"	d
MAX_CPB_CNT_MINUS1	inc/sei.h	26;"	d
MAX_DEPENDENT_SUBSEQ	inc/sei.h	19;"	d
MAX_FN	inc/sei.h	28;"	d
MAX_ITEMS_TO_PARSE	src/configfile.c	80;"	d	file:
MAX_ITEMS_TO_PARSE	src/q_matrix.c	18;"	d	file:
MAX_ITEMS_TO_PARSE	src/q_offsets.c	19;"	d	file:
MAX_LAYER_NUMBER	inc/sei.h	18;"	d
MAX_LIST_SIZE	inc/mbuffer.h	23;"	d
MAX_LIST_SIZE	src/mbuffer.c	39;"	d	file:
MAX_NUM_DPB_LAYERS	inc/defines.h	62;"	d
MAX_NUM_PIVOTS	inc/sei.h	23;"	d
MAX_PART_NR	inc/defines.h	304;"	d
MAX_PIC_STRUCT_VALUE	inc/sei.h	27;"	d
MAX_PLANE	inc/defines.h	320;"	d
MAX_PREC_COEFF	inc/defines.h	161;"	d
MAX_QP	inc/defines.h	253;"	d
MAX_RC_MODE	inc/defines.h	58;"	d
MAX_REFERENCE_PICTURES	inc/defines.h	139;"	d
MAX_SEI_BIT_DEPTH	inc/sei.h	22;"	d
MAX_SSIM_LEVELS	src/img_dist_ms_ssim.c	37;"	d	file:
MAX_SYMBOLS_PER_MB	inc/defines.h	300;"	d
MAX_THRES_BASE	src/me_epzs_common.c	/^static const int MAX_THRES_BASE[8] = { 0, 768, 384, 384, 192, 96, 96, 48 };$/;"	v	file:
MAX_VALUE	inc/defines.h	123;"	d
MBAmap	inc/global.h	/^  byte *MBAmap;$/;"	m	struct:video_par
MBModeTypes	inc/defines.h	/^} MBModeTypes;$/;"	v	typeref:enum:__anon35
MBPairIsField	inc/global.h	/^  byte  MBPairIsField;     \/\/!< For MB level field\/frame coding tools$/;"	m	struct:video_par
MBPerRow	inc/rc_types.h	/^  unsigned int    MBPerRow;$/;"	m	struct:rc_quadratic
MBType2Value	src/macroblock.c	/^int MBType2Value (Macroblock* currMB)$/;"	f
MB_BLOCK_PARTITIONS	inc/defines.h	151;"	d
MB_BLOCK_SHIFT	inc/defines.h	149;"	d
MB_BLOCK_SIZE	inc/defines.h	146;"	d
MB_PIXELS	inc/defines.h	147;"	d
MB_PIXELS_SHIFT	inc/defines.h	148;"	d
MDReference	inc/params.h	/^  int MDReference[2];$/;"	m	struct:inp_par_enc
MEBlock	inc/global.h	/^} MEBlock;$/;"	t	typeref:struct:me_block
MED_THRES_BASE	src/me_epzs_common.c	/^static const int MED_THRES_BASE[8] = { 0, 256, 128, 128, 64, 32, 32, 16 };$/;"	v	file:
MEErrorMetric	inc/params.h	/^  int MEErrorMetric[3];$/;"	m	struct:inp_par_enc
MEFullFast	inc/me_fullfast.h	/^} MEFullFast;$/;"	t	typeref:struct:me_full_fast
MESoftenSSEMetric	inc/params.h	/^  int MESoftenSSEMetric;$/;"	m	struct:inp_par_enc
MINVALUE	src/rc_quadratic.c	/^static const float MINVALUE = 4.0F;$/;"	v	file:
MIN_BITS_TO_GO	inc/biariencode.h	42;"	d
MIN_IMG_WIDTH	src/me_umhex.c	41;"	d	file:
MIN_QP	inc/defines.h	252;"	d
MIN_THRES_BASE	src/me_epzs_common.c	/^static const int MIN_THRES_BASE[8] = { 0, 64, 32, 32, 16, 8, 8, 4 };$/;"	v	file:
MPS	inc/global.h	/^  unsigned char  MPS;           \/\/ Least Probable Symbol 0\/1 CP  $/;"	m	struct:bi_context_type
MS_SSIM_BETA0	src/img_dist_ms_ssim.c	31;"	d	file:
MS_SSIM_BETA1	src/img_dist_ms_ssim.c	32;"	d	file:
MS_SSIM_BETA2	src/img_dist_ms_ssim.c	33;"	d	file:
MS_SSIM_BETA3	src/img_dist_ms_ssim.c	34;"	d	file:
MS_SSIM_BETA4	src/img_dist_ms_ssim.c	35;"	d	file:
MS_SSIM_PAD	src/img_dist_ms_ssim.c	28;"	d	file:
MS_SSIM_PAD2	src/img_dist_ms_ssim.c	29;"	d	file:
MULTIVIEW_HIGH	inc/defines.h	/^  MULTIVIEW_HIGH = 118,      \/\/!< YUV 4:2:0\/8  "Multiview High"$/;"	e	enum:__anon34
MVCD_bestY_b8x8	inc/errdo.h	/^  int ***MVCD_bestY_b8x8;$/;"	m	struct:decoders
MVCD_bestY_mb	inc/errdo.h	/^  int **MVCD_bestY_mb;$/;"	m	struct:decoders
MVCFlipViews	inc/params.h	/^  int MVCFlipViews;                     \/\/!< Reverse the order of the views in the bitstream (view 1 has VOIdx 0 and view 1 has VOIdx 0)$/;"	m	struct:inp_par_enc
MVCInterViewForceB	inc/params.h	/^  int MVCInterViewForceB;               \/\/!< Force B slices for enhancement layer$/;"	m	struct:inp_par_enc
MVCInterViewReorder	inc/global.h	/^  int MVCInterViewReorder;$/;"	m	struct:video_par
MVCInterViewReorder	inc/params.h	/^  int MVCInterViewReorder;              \/\/!< Reorder References according to interview pictures$/;"	m	struct:inp_par_enc
MVC_EXTENSION_ENABLE	inc/defines.h	53;"	d
MVPRED_L	inc/defines.h	/^  MVPRED_L        = 1,$/;"	e	enum:__anon44
MVPRED_MEDIAN	inc/defines.h	/^  MVPRED_MEDIAN   = 0,$/;"	e	enum:__anon44
MVPRED_U	inc/defines.h	/^  MVPRED_U        = 2,$/;"	e	enum:__anon44
MVPRED_UR	inc/defines.h	/^  MVPRED_UR       = 3$/;"	e	enum:__anon44
MVPredTypes	inc/defines.h	/^} MVPredTypes;$/;"	v	typeref:enum:__anon44
MV_con_diff_UV	inc/errdo.h	/^  int *** MV_con_diff_UV;                 \/\/!< for storing the MV concealment difference for component UV in rmpc algorithm $/;"	m	struct:distortion_estimation
MV_con_diff_Y	inc/errdo.h	/^  int **  MV_con_diff_Y;                  \/\/!< for storing the MV concealment difference for component Y in rmpc algorithm$/;"	m	struct:distortion_estimation
Macroblock	inc/global.h	/^} Macroblock;$/;"	t	typeref:struct:macroblock_enc
Map	inc/configfile.h	/^Mapping Map[] = {$/;"	v
MapUnitToSliceGroupMap	inc/global.h	/^  byte *MapUnitToSliceGroupMap;$/;"	m	struct:video_par
MapView1	inc/configfile.h	/^Mapping MapView1[] = {$/;"	v
MatrixType4x4	src/q_matrix.c	/^static const char MatrixType4x4[6][20] =$/;"	v	file:
MatrixType8x8	src/q_matrix.c	/^static const char MatrixType8x8[6][20] =$/;"	v	file:
MaxBR	src/conformance.c	/^static const unsigned int  MaxBR [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 64,128, 192, 384, 768, 0, 0, 0, 0, 0, 0,2000,4000,4000, 0, 0, 0, 0, 0, 0, 0,  $/;"	v	file:
MaxCPB	src/conformance.c	/^static const unsigned int  MaxCPB[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0,175,350, 500,1000,2000, 0, 0, 0, 0, 0, 0,2000,4000,4000, 0, 0, 0, 0, 0, 0, 0,  $/;"	v	file:
MaxFs	src/conformance.c	/^static const unsigned int  MaxFs [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 99, 396, 396, 396, 0, 0, 0, 0, 0, 0, 396, 792, 1620, 0, 0, 0, 0, 0, 0, 0,  $/;"	v	file:
MaxHmvR	inc/global.h	/^  int MaxHmvR[6];              \/\/!< maximum horizontal motion vector$/;"	m	struct:video_par
MaxMBPS	src/conformance.c	/^static const unsigned int MaxMBPS[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1485, 1485, 3000, 6000, 11880, 0, 0, 0, 0, 0, 0, 11880, 19800, 20250, 0, 0, 0, 0, 0, 0, 0,  $/;"	v	file:
MaxVmvR	inc/global.h	/^  int MaxVmvR[6];              \/\/!< maximum vertical motion vector$/;"	m	struct:video_par
MbAffPostProc	src/image.c	/^void MbAffPostProc(VideoParameters *p_Vid)$/;"	f
MbHeightC	src/nal.c	/^static const int MbHeightC [4]= { 0, 8, 16, 16};$/;"	v	file:
MbInterlace	inc/params.h	/^  int MbInterlace;            \/\/!< macroblock adaptive frame\/field$/;"	m	struct:inp_par_enc
MbWidthC	src/nal.c	/^static const int MbWidthC  [4]= { 0, 8, 8,  16};$/;"	v	file:
McostState	inc/me_umhex.h	/^  byte **McostState;                          \/\/!< state for integer pel search$/;"	m	struct:umhex_struct
Median_Pred_Thd	src/me_umhex.c	/^static const int   Median_Pred_Thd[8]  = {0,  750,  350,  350, 170,  80,   80,  40};$/;"	v	file:
Median_Pred_Thd_MB	inc/me_umhex.h	/^  distblk Median_Pred_Thd_MB[8];$/;"	m	struct:umhex_struct
MinCR	src/conformance.c	/^static const unsigned int  MinCR [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0,  2,  2,   2,   2,   2, 0, 0, 0, 0, 0, 0,   2,   2,   2, 0, 0, 0, 0, 0, 0, 0,  $/;"	v	file:
MinIDRDistance	inc/params.h	/^  int  MinIDRDistance;$/;"	m	struct:inp_par_enc
ModeDecisionMetric	inc/params.h	/^  int ModeDecisionMetric;$/;"	m	struct:inp_par_enc
Mode_Decision_for_IntraSubMBlocks	src/rd_intra_jm.c	/^int Mode_Decision_for_IntraSubMBlocks(Macroblock *currMB, int b8, int lambda, distblk *cost, int non_zero[3])$/;"	f
ModifiedUMHEXIntegerPelBlockMotionSearch	src/me_umhex.c	/^ModifiedUMHEXIntegerPelBlockMotionSearch  (Macroblock *currMB,     \/\/ <--  current Macroblock$/;"	f
MotionInfoContexts	inc/global.h	/^} MotionInfoContexts;$/;"	t	typeref:struct:__anon1
MotionVector	inc/global.h	/^} MotionVector;$/;"	t	typeref:struct:__anon3
MultiSourceData	inc/params.h	/^  int  MultiSourceData;$/;"	m	struct:inp_par_enc
Multi_Ref_Thd	src/me_umhex.c	/^static const int   Multi_Ref_Thd[8]    = {0,  300,  120,  120,  60,  30,   30,  15};$/;"	v	file:
Multi_Ref_Thd_MB	inc/me_umhex.h	/^  distblk Multi_Ref_Thd_MB[8];$/;"	m	struct:umhex_struct
MyInitialQp	inc/rc_types.h	/^  int    MyInitialQp;$/;"	m	struct:rc_quadratic
NAME	Makefile	/^NAME=   lencod$/;"	m
NCBP	src/vlc.c	/^static const byte NCBP[2][48][2]=$/;"	v	file:
NISlice	inc/rc_types.h	/^  int   NISlice;$/;"	m	struct:rc_generic
NORMAL_SEI	inc/sei.h	33;"	d
NO_INTRA_PMODE	inc/defines.h	187;"	d
NPSlice	inc/rc_types.h	/^  int   NPSlice;$/;"	m	struct:rc_generic
NUM_ABS_CTX	inc/defines.h	341;"	d
NUM_B8_TYPE_CTX	inc/defines.h	326;"	d
NUM_BCBP_CTX	inc/defines.h	337;"	d
NUM_BLOCK_TYPES	inc/defines.h	102;"	d
NUM_BLOCK_TYPES	inc/defines.h	104;"	d
NUM_CBP_CTX	inc/defines.h	336;"	d
NUM_CIPR_CTX	inc/defines.h	335;"	d
NUM_DELTA_QP_CTX	inc/defines.h	329;"	d
NUM_IPR_CTX	inc/defines.h	334;"	d
NUM_LAST_CTX	inc/defines.h	339;"	d
NUM_MAP_CTX	inc/defines.h	338;"	d
NUM_MB_AFF_CTX	inc/defines.h	330;"	d
NUM_MB_TYPE_CTX	inc/defines.h	325;"	d
NUM_MV_RES_CTX	inc/defines.h	327;"	d
NUM_ONE_CTX	inc/defines.h	340;"	d
NUM_REF_NO_CTX	inc/defines.h	328;"	d
NUM_TRANSFORM_SIZE_CTX	inc/defines.h	332;"	d
NUM_WAVELET_LEVEL	inc/defines.h	158;"	d
Nb	inc/rc_types.h	/^  int    Np, Nb, bits_topfield;$/;"	m	struct:rc_quadratic
Next	inc/global.h	/^  struct DecRefPicMarking_s *Next;$/;"	m	struct:DecRefPicMarking_s	typeref:struct:DecRefPicMarking_s::DecRefPicMarking_s
NoGranularFieldRC	inc/rc_types.h	/^  int   NoGranularFieldRC;$/;"	m	struct:rc_generic
NoMbPartLessThan8x8Flag	inc/global.h	/^  Boolean NoMbPartLessThan8x8Flag;$/;"	m	struct:rd_data
NoMbPartLessThan8x8Flag	inc/global.h	/^  byte                NoMbPartLessThan8x8Flag;$/;"	m	struct:macroblock_enc
NoOfDecoders	inc/params.h	/^  int NoOfDecoders;$/;"	m	struct:inp_par_enc
NoResidueDirect	inc/global.h	/^  short               NoResidueDirect;$/;"	m	struct:slice
Np	inc/rc_types.h	/^  int    Np, Nb, bits_topfield;$/;"	m	struct:rc_quadratic
NumFramesInELSubSeq	inc/params.h	/^  int NumFramesInELSubSeq;$/;"	m	struct:inp_par_enc
NumRedundantHierarchy	inc/params.h	/^  int NumRedundantHierarchy;   \/\/!< number of entries to allocate redundant pictures in a GOP$/;"	m	struct:inp_par_enc
NumRefPrimary	inc/params.h	/^  int NumRefPrimary;           \/\/!< number of reference frames for primary picture$/;"	m	struct:inp_par_enc
NumberBFrames	inc/params.h	/^  int NumberBFrames;                    \/\/!< number of B frames that will be used$/;"	m	struct:inp_par_enc
NumberIntraPerPicture	inc/global.h	/^  int NumberIntraPerPicture;$/;"	m	struct:video_par
NumberLeakyBuckets	inc/params.h	/^  int  NumberLeakyBuckets;$/;"	m	struct:inp_par_enc
NumberOfMBs	inc/global.h	/^  int NumberOfMBs;$/;"	m	struct:video_par
NumberofBFrames	inc/rc_types.h	/^  int    NumberofBFrames;$/;"	m	struct:rc_quadratic
NumberofBasicUnit	inc/rc_types.h	/^  int    NumberofBasicUnit;$/;"	m	struct:rc_quadratic
NumberofBasicUnitHeaderBits	inc/rc_types.h	/^  int   NumberofBasicUnitHeaderBits;$/;"	m	struct:rc_generic
NumberofBasicUnitTextureBits	inc/rc_types.h	/^  int   NumberofBasicUnitTextureBits;$/;"	m	struct:rc_generic
NumberofCodedBFrame	inc/rc_types.h	/^  int   NumberofCodedBFrame;  $/;"	m	struct:rc_generic
NumberofCodedMacroBlocks	inc/global.h	/^  int NumberofCodedMacroBlocks;$/;"	m	struct:video_par
NumberofCodedPFrame	inc/rc_types.h	/^  int    NumberofCodedPFrame;  $/;"	m	struct:rc_quadratic
NumberofGOP	inc/rc_types.h	/^  int   NumberofGOP;$/;"	m	struct:rc_generic
NumberofHeaderBits	inc/rc_types.h	/^  int   NumberofHeaderBits;$/;"	m	struct:rc_generic
NumberofMBHeaderBits	inc/global.h	/^  int NumberofMBHeaderBits;$/;"	m	struct:video_par
NumberofMBTextureBits	inc/global.h	/^  int NumberofMBTextureBits;$/;"	m	struct:video_par
NumberofPPicture	inc/rc_types.h	/^  int    NumberofPPicture;$/;"	m	struct:rc_quadratic
NumberofTextureBits	inc/rc_types.h	/^  int   NumberofTextureBits;$/;"	m	struct:rc_generic
OBJ	Makefile	/^OBJ=    $(SRC:$(SRCDIR)\/%.c=$(OBJDIR)\/%.o$(SUFFIX)) $(ADDSRC:$(ADDSRCDIR)\/%.c=$(OBJDIR)\/%.o$(SUFFIX)) $/;"	m
OBJDIR	Makefile	/^OBJDIR= obj$/;"	m
OBJSUF	Makefile	/^OBJSUF= .o$(SUFFIX)$/;"	m
OFFSET_Y	src/cconv_yuv2rgb.c	23;"	d	file:
OMEGA	src/rc_quadratic.c	/^static const float OMEGA = 0.9F;$/;"	v	file:
ONE	inc/biariencode.h	38;"	d
ONE_FOURTH_TAP	inc/img_luma.h	/^static const int ONE_FOURTH_TAP[2][3] =$/;"	v
ONE_M1	inc/biariencode.h	39;"	d
OPENMP	Makefile	/^OPENMP?= 0$/;"	m
OPT	Makefile	/^OPT?= 3$/;"	m
OPT_FLAG	Makefile	/^OPT_FLAG = -O$(OPT)$/;"	m
OTFFunction	inc/defines.h	/^} OTFFunction;$/;"	v	typeref:enum:__anon46
OTFMode	inc/defines.h	/^} OTFMode;$/;"	v	typeref:enum:__anon45
OTF_L0	inc/defines.h	/^  OTF_L0 = 0, \/\/ Disable, interpolate & store all positions$/;"	e	enum:__anon45
OTF_L1	inc/defines.h	/^  OTF_L1 = 1, \/\/ Store full pel & interpolated 1\/2 pel positions; 1\/4 pel positions interpolate on-the-fly$/;"	e	enum:__anon45
OTF_L2	inc/defines.h	/^  OTF_L2 = 2  \/\/ Store only full pell positions; 1\/2 & 1\/4 pel positions interpolate on-the-fly  $/;"	e	enum:__anon45
OTF_MC	inc/defines.h	/^  OTF_MC = 1$/;"	e	enum:__anon46
OTF_ME	inc/defines.h	/^  OTF_ME = 0,$/;"	e	enum:__anon46
OUTPUT_REF_LIST	inc/defines.h	66;"	d
Offset8_inter_default	src/q_offsets.c	/^static const short Offset8_inter_default[64] = {$/;"	v	file:
Offset8_intra_default_chroma	src/q_offsets.c	/^static const short Offset8_intra_default_chroma[64] = {$/;"	v	file:
Offset8_intra_default_inter	src/q_offsets.c	/^static const short Offset8_intra_default_inter[64] = {$/;"	v	file:
Offset8_intra_default_intra	src/q_offsets.c	/^static const short Offset8_intra_default_intra[64] = {$/;"	v	file:
OffsetBits	inc/q_offsets.h	/^static const int OffsetBits = 11;$/;"	v
OffsetMatrixPresentFlag	inc/params.h	/^  int  OffsetMatrixPresentFlag;                  \/\/!< Enable Explicit Quantization Offset Matrices$/;"	m	struct:inp_par_enc
OffsetType4x4	src/q_offsets.c	/^static const char OffsetType4x4[15][24] = {$/;"	v	file:
OffsetType8x8	src/q_offsets.c	/^static const char OffsetType8x8[15][24] = {$/;"	v	file:
Offset_inter_default	src/q_offsets.c	/^static const short Offset_inter_default[16] = {$/;"	v	file:
Offset_intra_default_chroma	src/q_offsets.c	/^static const short Offset_intra_default_chroma[16] = {$/;"	v	file:
Offset_intra_default_inter	src/q_offsets.c	/^static const short Offset_intra_default_inter[16] = {$/;"	v	file:
Offset_intra_default_intra	src/q_offsets.c	/^static const short Offset_intra_default_intra[16] = {$/;"	v	file:
OnTheFlyFractMCP	inc/params.h	/^  int OnTheFlyFractMCP;         \/\/!< On the fly interpolation mode$/;"	m	struct:inp_par_enc
OneComponentChromaPrediction	src/mc_prediction.c	/^void OneComponentChromaPrediction (VideoParameters *p_Vid, \/\/!< video encoding parameters for current picture$/;"	f	file:
OneComponentChromaPrediction4x4	inc/global.h	/^  void (*OneComponentChromaPrediction4x4)   (Macroblock *currMB, imgpel* , int , int , MotionVector ** , struct storable_picture *listX, int );$/;"	m	struct:video_par
OneComponentChromaPrediction4x4_regenerate	src/mc_prediction.c	/^void OneComponentChromaPrediction4x4_regenerate ($/;"	f
OneComponentChromaPrediction4x4_retrieve	src/mc_prediction.c	/^void OneComponentChromaPrediction4x4_retrieve ($/;"	f
OneComponentLumaPrediction	src/mc_prediction.c	/^static inline void OneComponentLumaPrediction ( VideoParameters *p_Vid, \/\/!< video encoding parameters for current picture$/;"	f	file:
OpenAnnexbFile	src/annexb.c	/^void OpenAnnexbFile (char *Filename, FILE **f_annexb)$/;"	f
OpenExplicitSeqFile	src/explicit_seq.c	/^void OpenExplicitSeqFile(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
OpenRTPFile	src/rtp.c	/^void OpenRTPFile (char *Filename, FILE **f_rtp)$/;"	f
OtfCompatibility_copyWithPadding	src/image.c	/^void OtfCompatibility_copyWithPadding ( imgpel **dstImg, imgpel **srcImg, int size_x, int size_y, int padding_x, int padding_y )$/;"	f
P16x16	inc/defines.h	/^  P16x16       =  1,$/;"	e	enum:__anon35
P16x8	inc/defines.h	/^  P16x8        =  2,$/;"	e	enum:__anon35
P444_joined	inc/global.h	/^  int                 P444_joined;$/;"	m	struct:slice
P444_joined	inc/global.h	/^  int P444_joined;$/;"	m	struct:coding_par
P444_joined	inc/global.h	/^  int P444_joined;$/;"	m	struct:video_par
P8x16	inc/defines.h	/^  P8x16        =  3,$/;"	e	enum:__anon35
P8x8	inc/defines.h	/^  P8x8         =  8,$/;"	e	enum:__anon35
PAveFrameQP	inc/rc_types.h	/^  int    PAveFrameQP;$/;"	m	struct:rc_quadratic
PAveHeaderBits1	inc/rc_types.h	/^  int    PAveHeaderBits1;$/;"	m	struct:rc_quadratic
PAveHeaderBits2	inc/rc_types.h	/^  int    PAveHeaderBits2;$/;"	m	struct:rc_quadratic
PAveHeaderBits3	inc/rc_types.h	/^  int    PAveHeaderBits3;$/;"	m	struct:rc_quadratic
PAverageQp	inc/rc_types.h	/^  int    PAverageQp;$/;"	m	struct:rc_quadratic
PI	src/wp_periodic.c	22;"	d	file:
PLANE_16	inc/defines.h	/^  PLANE_16       = 3$/;"	e	enum:__anon41
PLANE_8	inc/defines.h	/^  PLANE_8       =  3$/;"	e	enum:__anon42
PMADPictureC1	inc/rc_types.h	/^  double PMADPictureC1;$/;"	m	struct:rc_quadratic
PMADPictureC2	inc/rc_types.h	/^  double PMADPictureC2;$/;"	m	struct:rc_quadratic
PMaxQpChange	inc/rc_types.h	/^  int    PMaxQpChange;$/;"	m	struct:rc_quadratic
POCNum	inc/wp_mcprec.h	/^  int POCNum;              \/\/ POC$/;"	m	struct:__anon32
POP_IDR	inc/pred_struct_types.h	/^  POP_IDR = 1,$/;"	e	enum:__anon31
POP_INTRA	inc/pred_struct_types.h	/^  POP_INTRA = 2,$/;"	e	enum:__anon31
POP_SP	inc/pred_struct_types.h	/^  POP_SP = 3$/;"	e	enum:__anon31
PPictureMAD	inc/rc_types.h	/^  double PPictureMAD [RC_MODEL_HISTORY];$/;"	m	struct:rc_quadratic
PPreHeader	inc/rc_types.h	/^  int    PPreHeader;$/;"	m	struct:rc_quadratic
PRINTREFLIST	inc/defines.h	36;"	d
PRINT_POST_FILTER_HINTS	src/sei.c	2069;"	d	file:
PRINT_RECOVERY_POINT	src/sei.c	1675;"	d	file:
PRINT_USER_DATA_REGISTERED_ITU_T_T35_INFO	src/sei.c	1575;"	d	file:
PRINT_USER_DATA_UNREGISTERED_INFO	src/sei.c	1442;"	d	file:
PROFILE_IDC	inc/configfile.h	20;"	d
PReplaceBSlice	inc/params.h	/^  int PReplaceBSlice;$/;"	m	struct:inp_par_enc
PSKIP	inc/defines.h	/^  PSKIP        =  0,$/;"	e	enum:__anon35
P_A	src/block.c	58;"	d	file:
P_A	src/intra4x4.c	53;"	d	file:
P_A	src/intra8x8.c	35;"	d	file:
P_A	src/transform8x8.c	98;"	d	file:
P_B	src/block.c	59;"	d	file:
P_B	src/intra4x4.c	54;"	d	file:
P_B	src/intra8x8.c	36;"	d	file:
P_B	src/transform8x8.c	99;"	d	file:
P_C	src/block.c	60;"	d	file:
P_C	src/intra4x4.c	55;"	d	file:
P_C	src/intra8x8.c	37;"	d	file:
P_C	src/transform8x8.c	100;"	d	file:
P_D	src/block.c	61;"	d	file:
P_D	src/intra4x4.c	56;"	d	file:
P_D	src/intra8x8.c	38;"	d	file:
P_D	src/transform8x8.c	101;"	d	file:
P_E	src/block.c	62;"	d	file:
P_E	src/intra4x4.c	57;"	d	file:
P_E	src/intra8x8.c	39;"	d	file:
P_E	src/transform8x8.c	102;"	d	file:
P_F	src/block.c	63;"	d	file:
P_F	src/intra4x4.c	58;"	d	file:
P_F	src/intra8x8.c	40;"	d	file:
P_F	src/transform8x8.c	103;"	d	file:
P_G	src/block.c	64;"	d	file:
P_G	src/intra4x4.c	59;"	d	file:
P_G	src/intra8x8.c	41;"	d	file:
P_G	src/transform8x8.c	104;"	d	file:
P_H	src/block.c	65;"	d	file:
P_H	src/intra4x4.c	60;"	d	file:
P_H	src/intra8x8.c	42;"	d	file:
P_H	src/transform8x8.c	105;"	d	file:
P_I	src/block.c	66;"	d	file:
P_I	src/intra4x4.c	61;"	d	file:
P_I	src/intra8x8.c	43;"	d	file:
P_I	src/transform8x8.c	106;"	d	file:
P_J	src/block.c	67;"	d	file:
P_J	src/intra4x4.c	62;"	d	file:
P_J	src/intra8x8.c	44;"	d	file:
P_J	src/transform8x8.c	107;"	d	file:
P_K	src/block.c	68;"	d	file:
P_K	src/intra4x4.c	63;"	d	file:
P_K	src/intra8x8.c	45;"	d	file:
P_K	src/transform8x8.c	108;"	d	file:
P_L	src/block.c	69;"	d	file:
P_L	src/intra4x4.c	64;"	d	file:
P_L	src/intra8x8.c	46;"	d	file:
P_L	src/transform8x8.c	109;"	d	file:
P_List0_refs	inc/params.h	/^  int P_List0_refs[2];                  \/\/!< number of reference picture in list 0 in P pictures$/;"	m	struct:inp_par_enc
P_List0_refs_org	inc/params.h	/^  int P_List0_refs_org[2];                  \/\/!< number of reference picture in list 0 in P pictures$/;"	m	struct:inp_par_enc
P_M	src/intra8x8.c	47;"	d	file:
P_M	src/transform8x8.c	110;"	d	file:
P_N	src/intra8x8.c	48;"	d	file:
P_N	src/transform8x8.c	111;"	d	file:
P_O	src/intra8x8.c	49;"	d	file:
P_O	src/transform8x8.c	112;"	d	file:
P_P	src/intra8x8.c	50;"	d	file:
P_P	src/transform8x8.c	113;"	d	file:
P_Q	src/intra8x8.c	51;"	d	file:
P_Q	src/transform8x8.c	114;"	d	file:
P_R	src/intra8x8.c	52;"	d	file:
P_R	src/transform8x8.c	115;"	d	file:
P_S	src/intra8x8.c	53;"	d	file:
P_S	src/transform8x8.c	116;"	d	file:
P_T	src/intra8x8.c	54;"	d	file:
P_T	src/transform8x8.c	117;"	d	file:
P_U	src/intra8x8.c	55;"	d	file:
P_U	src/transform8x8.c	118;"	d	file:
P_V	src/intra8x8.c	56;"	d	file:
P_V	src/transform8x8.c	119;"	d	file:
P_W	src/intra8x8.c	57;"	d	file:
P_W	src/transform8x8.c	120;"	d	file:
P_X	src/block.c	57;"	d	file:
P_X	src/intra4x4.c	52;"	d	file:
P_X	src/intra8x8.c	58;"	d	file:
P_X	src/transform8x8.c	121;"	d	file:
P_Z	src/intra8x8.c	34;"	d	file:
P_Z	src/transform8x8.c	97;"	d	file:
ParseMatrix	src/q_matrix.c	/^static void ParseMatrix (VideoParameters *p_Vid, char *buf, int bufsize)$/;"	f	file:
ParseQOffsetMatrix	src/q_offsets.c	/^void ParseQOffsetMatrix (QuantParameters *p_Quant, char *buf, int bufsize)$/;"	f
ParseReferenceIDC	src/explicit_seq.c	/^static void ParseReferenceIDC(int reference_idc, int coding_index)$/;"	f	file:
ParseSeqNumber	src/explicit_seq.c	/^static void ParseSeqNumber(int seq_number, ExpSeqInfo *seq_info, int coding_index)$/;"	f	file:
ParseSliceType	src/explicit_seq.c	/^static void ParseSliceType(char *slice_type, ExpFrameInfo *info, int coding_index)$/;"	f	file:
ParseToneMappingConfigFile	src/sei.c	/^static int ParseToneMappingConfigFile(SEIParameters *p_SEI, InputParameters *p_Inp, ToneMappingSEI *pSeiToneMapping)$/;"	f	file:
PartitionMotionSearch	src/mv_search.c	/^void PartitionMotionSearch (Macroblock *currMB,$/;"	f
Partition_BC_Header	src/header.c	/^int Partition_BC_Header(Slice *currSlice, int PartNo)$/;"	f
PatchInp	src/configfile.c	/^static void PatchInp (VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f	file:
PatchMatrix	src/q_matrix.c	/^static void PatchMatrix(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f	file:
PicHeightInMapUnits	inc/global.h	/^  unsigned int PicHeightInMapUnits;$/;"	m	struct:coding_par
PicHeightInMapUnits	inc/global.h	/^  unsigned int PicHeightInMapUnits;$/;"	m	struct:video_par
PicInterlace	inc/params.h	/^  int PicInterlace;           \/\/!< picture adaptive frame\/field$/;"	m	struct:inp_par_enc
PicMotionParams	inc/mbuffer.h	/^} PicMotionParams;$/;"	t	typeref:struct:pic_motion_params
PicMotionParamsOld	inc/mbuffer.h	/^typedef struct pic_motion_params_old PicMotionParamsOld;$/;"	t	typeref:struct:pic_motion_params_old
PicNum	inc/wp_mcprec.h	/^  int PicNum;              \/\/ PicNum\/FrameNum$/;"	m	struct:__anon32
PicParSet	inc/global.h	/^  pic_parameter_set_rbsp_t *PicParSet[MAXPPS];$/;"	m	struct:video_par
PicPos	inc/global.h	/^  BlockPos *PicPos;$/;"	m	struct:video_par
PicSizeInMapUnits	inc/global.h	/^  unsigned int PicSizeInMapUnits;$/;"	m	struct:video_par
PicSizeInMbs	inc/global.h	/^  unsigned int        PicSizeInMbs;$/;"	m	struct:slice
PicSizeInMbs	inc/global.h	/^  unsigned int PicSizeInMbs;$/;"	m	struct:video_par
PicStructure	inc/pred_struct_types.h	/^} PicStructure;$/;"	t	typeref:struct:pic_struct
PicWidthInMbs	inc/global.h	/^  unsigned int PicWidthInMbs;$/;"	m	struct:coding_par
PicWidthInMbs	inc/global.h	/^  unsigned int PicWidthInMbs;$/;"	m	struct:video_par
Picture	inc/global.h	/^} Picture;$/;"	t	typeref:struct:picture
PictureMAD	inc/rc_types.h	/^  double PictureMAD  [RC_MODEL_HISTORY];$/;"	m	struct:rc_quadratic
PictureStats	inc/mbuffer.h	/^typedef struct picture_stats PictureStats;$/;"	t	typeref:struct:picture_stats
PixelPos	inc/global.h	/^} PixelPos;$/;"	t	typeref:struct:pix_pos
Pm_Hp	inc/rc_types.h	/^  int    Pm_Hp;$/;"	m	struct:rc_quadratic
Pm_Qp	inc/rc_types.h	/^  int    Pm_Qp;$/;"	m	struct:rc_quadratic
Pm_X1	inc/rc_types.h	/^  double Pm_X1;$/;"	m	struct:rc_quadratic
Pm_X2	inc/rc_types.h	/^  double Pm_X2;$/;"	m	struct:rc_quadratic
Pm_rgQp	inc/rc_types.h	/^  double Pm_rgQp     [RC_MODEL_HISTORY];$/;"	m	struct:rc_quadratic
Pm_rgRp	inc/rc_types.h	/^  double Pm_rgRp     [RC_MODEL_HISTORY];$/;"	m	struct:rc_quadratic
PocMemoryManagement	inc/params.h	/^  int  PocMemoryManagement;           \/\/!< Memory management based on Poc distances for hierarchical coding$/;"	m	struct:inp_par_enc
Pprev_bits	inc/rc_types.h	/^  int64   Pprev_bits;$/;"	m	struct:rc_quadratic
PredStructAtom	inc/pred_struct_types.h	/^} PredStructAtom;$/;"	t	typeref:struct:pred_struct_atom
PredStructFrm	inc/pred_struct_types.h	/^} PredStructFrm;$/;"	t	typeref:struct:pred_struct_frm
PreferDispOrder	inc/params.h	/^  int PreferDispOrder;       \/\/!< Prefer display order when building the prediction structure as opposed to coding order$/;"	m	struct:inp_par_enc
PreferPowerOfTwo	inc/params.h	/^  int PreferPowerOfTwo;      \/\/!< Prefer prediction structures that have lengths expressed as powers of two$/;"	m	struct:inp_par_enc
PrepareAggregationSEIMessage	src/sei.c	/^void PrepareAggregationSEIMessage(VideoParameters *p_Vid)$/;"	f
PrepareBiPredMEParams	src/mv_search.c	/^void PrepareBiPredMEParams(Slice *currSlice, MEBlock *mv_block, int ChromaMEEnable, int list, int list_offset, int ref)$/;"	f
PrepareMEParams	src/mv_search.c	/^void PrepareMEParams(Slice *currSlice, MEBlock *mv_block, int ChromaMEEnable, int list, int ref)$/;"	f
PrevBitRate	inc/rc_types.h	/^  float  PrevBitRate;           \/\/LIZG  25\/10\/2002$/;"	m	struct:rc_quadratic
PrevCodingStats	inc/global.h	/^} PrevCodingStats;$/;"	t	typeref:struct:prev_coding_stats
PrevLastQP	inc/rc_types.h	/^  int    PrevLastQP; \/\/ QP of the second-to-last coded frame in the primary layer$/;"	m	struct:rc_quadratic
PrevMB	inc/global.h	/^  struct macroblock_enc   *PrevMB;$/;"	m	struct:macroblock_enc	typeref:struct:macroblock_enc::macroblock_enc
PreviousFrameMAD	inc/rc_types.h	/^  double PreviousFrameMAD;$/;"	m	struct:rc_quadratic
PreviousPictureMAD	inc/rc_types.h	/^  double PreviousPictureMAD;$/;"	m	struct:rc_quadratic
PreviousWholeFrameMAD	inc/rc_types.h	/^  double PreviousWholeFrameMAD;$/;"	m	struct:rc_quadratic
PrimaryGOPLength	inc/params.h	/^  int PrimaryGOPLength;        \/\/!< GOP length of primary pictures$/;"	m	struct:inp_par_enc
ProcessInput	inc/params.h	/^  int  ProcessInput;                    \/\/!< Filter Input Sequence$/;"	m	struct:inp_par_enc
ProfileIDC	inc/defines.h	/^} ProfileIDC;$/;"	v	typeref:enum:__anon34
ProfileIDC	inc/params.h	/^  int ProfileIDC;                       \/\/!< value of syntax element profile_idc$/;"	m	struct:inp_par_enc
PutBigDoubleWord	src/leaky_bucket.c	/^void PutBigDoubleWord(unsigned long dw, FILE *fp)$/;"	f
QOffsetMatrixFile	inc/params.h	/^  char QOffsetMatrixFile[FILE_NAME_SIZE];        \/\/!< Quantization Offset matrix cfg file$/;"	m	struct:inp_par_enc
QP2QUANT	inc/slice.h	/^static const int QP2QUANT[40]=$/;"	v
QP2Qstep	src/ratectl.c	/^double QP2Qstep( int QP )$/;"	f
QPLastGOP	inc/rc_types.h	/^  int    QPLastGOP;$/;"	m	struct:rc_quadratic
QPLastPFrame	inc/rc_types.h	/^  int    QPLastPFrame;$/;"	m	struct:rc_quadratic
QP_SCALE_CR	inc/block.h	/^static const byte QP_SCALE_CR[52]=$/;"	v
QUARTER	inc/biariencode.h	41;"	d
Q_BITS	inc/defines.h	311;"	d
Q_BITS	src/me_umhex.c	40;"	d	file:
Q_BITS_8	inc/defines.h	314;"	d
QmatrixFile	inc/params.h	/^  char QmatrixFile   [FILE_NAME_SIZE];  \/\/!< Q matrix cfg file$/;"	m	struct:inp_par_enc
Qstep2QP	src/ratectl.c	/^int Qstep2QP( double Qstep, int qp_offset )$/;"	f
Quant8_inter_default	src/q_matrix.c	/^static const short Quant8_inter_default[64] =$/;"	v	file:
Quant8_intra_default	src/q_matrix.c	/^static const short Quant8_intra_default[64] =$/;"	v	file:
Quant_inter_default	src/q_matrix.c	/^static const short Quant_inter_default[16] =$/;"	v	file:
Quant_intra_default	src/q_matrix.c	/^static const short Quant_intra_default[16] =$/;"	v	file:
RBSPtoEBSP	src/nal.c	/^int RBSPtoEBSP(byte *NaluBuffer, unsigned char *rbsp, int rbsp_size)$/;"	f
RBSPtoNALU	src/nalu.c	/^int RBSPtoNALU (unsigned char *rbsp, NALU_t *nalu, int rbsp_size, int nal_unit_type, int nal_reference_idc, int UseAnnexbLongStartcode)$/;"	f
RCBSliceBitRatio	inc/params.h	/^  double RCBSliceBitRatio[RC_MAX_TEMPORAL_LEVELS];$/;"	m	struct:inp_par_enc
RCBSliceBits	inc/rc_types.h	/^  int   RCBSliceBits[RC_MAX_TEMPORAL_LEVELS];$/;"	m	struct:rc_generic
RCBoverPRatio	inc/params.h	/^  double RCBoverPRatio;$/;"	m	struct:inp_par_enc
RCD_bestY_b8x8	inc/errdo.h	/^  int ***RCD_bestY_b8x8;$/;"	m	struct:decoders
RCD_bestY_mb	inc/errdo.h	/^  int **RCD_bestY_mb;$/;"	m	struct:decoders
RCEnable	inc/params.h	/^  int RCEnable;$/;"	m	struct:inp_par_enc
RCGeneric	inc/rc_types.h	/^} RCGeneric;$/;"	t	typeref:struct:rc_generic
RCISliceBitRatio	inc/params.h	/^  double RCISliceBitRatio;$/;"	m	struct:inp_par_enc
RCISliceBits	inc/rc_types.h	/^  int   RCISliceBits;$/;"	m	struct:rc_generic
RCIoverPRatio	inc/params.h	/^  double RCIoverPRatio;$/;"	m	struct:inp_par_enc
RCMaxQP	inc/global.h	/^  int RCMaxQP;$/;"	m	struct:video_par
RCMaxQP	inc/params.h	/^  int    RCMaxQP[NUM_SLICE_TYPES];$/;"	m	struct:inp_par_enc
RCMaxQPChange	inc/params.h	/^  int    RCMaxQPChange;$/;"	m	struct:inp_par_enc
RCMinQP	inc/global.h	/^  int RCMinQP;$/;"	m	struct:video_par
RCMinQP	inc/params.h	/^  int    RCMinQP[NUM_SLICE_TYPES];$/;"	m	struct:inp_par_enc
RCModelEstimator	src/rc_quadratic.c	/^void RCModelEstimator (VideoParameters *p_Vid, InputParameters *p_Inp, RCQuadratic *p_quad, int n_windowSize, Boolean *m_rgRejected)$/;"	f
RCPSliceBits	inc/rc_types.h	/^  int   RCPSliceBits;$/;"	m	struct:rc_generic
RCQuadratic	inc/rc_types.h	/^} RCQuadratic;$/;"	t	typeref:struct:rc_quadratic
RCUpdateMode	inc/params.h	/^  int RCUpdateMode;$/;"	m	struct:inp_par_enc
RC_MAX_TEMPORAL_LEVELS	inc/defines.h	59;"	d
RC_MODEL_HISTORY	inc/rc_types.h	23;"	d
RDCost_for_macroblocks	src/rdopt.c	/^int RDCost_for_macroblocks (Macroblock  *currMB,   \/\/ <-- Current Macroblock to code$/;"	f
RDOPTStructure	inc/global.h	/^typedef struct rdo_structure     RDOPTStructure;$/;"	t	typeref:struct:rdo_structure
RDOQ_BASE	src/rdoq.c	24;"	d	file:
RDOQ_CP_MV	inc/params.h	/^  int RDOQ_CP_MV;$/;"	m	struct:inp_par_enc
RDOQ_CP_Mode	inc/params.h	/^  int RDOQ_CP_Mode;$/;"	m	struct:inp_par_enc
RDOQ_CR	inc/params.h	/^  int RDOQ_CR;$/;"	m	struct:inp_par_enc
RDOQ_DC	inc/params.h	/^  int RDOQ_DC;$/;"	m	struct:inp_par_enc
RDOQ_DC_CR	inc/params.h	/^  int RDOQ_DC_CR; $/;"	m	struct:inp_par_enc
RDOQ_Fast	inc/params.h	/^  int RDOQ_Fast;$/;"	m	struct:inp_par_enc
RDOQ_QP_Num	inc/global.h	/^  int                 RDOQ_QP_Num;$/;"	m	struct:slice
RDOQ_QP_Num	inc/params.h	/^  int RDOQ_QP_Num;$/;"	m	struct:inp_par_enc
RDOQ_SQ	src/rdoq_cabac.c	23;"	d	file:
RDOQ_update_mode	src/rdoq.c	/^void RDOQ_update_mode(Slice *currSlice, RD_PARAMS *enc_mb)$/;"	f
RDPSliceBTest	inc/params.h	/^  int RDPSliceBTest;                 \/\/!< Tests B slice replacement for P.$/;"	m	struct:inp_par_enc
RDPSliceITest	inc/params.h	/^  int RDPSliceITest;                 \/\/!< Tests I slice replacement for P.$/;"	m	struct:inp_par_enc
RDPictureDeblocking	inc/params.h	/^  int RDPictureDeblocking;           \/\/!< Whether to choose between deblocked and non-deblocked picture$/;"	m	struct:inp_par_enc
RDPictureDecision	inc/params.h	/^  int RDPictureDecision;             \/\/!< Perform RD optimal decision between various coded versions of same picture$/;"	m	struct:inp_par_enc
RDPictureDirectMode	inc/params.h	/^  int RDPictureDirectMode;           \/\/!< Whether to check the other direct mode for B slices$/;"	m	struct:inp_par_enc
RDPictureFrameQPBSlice	inc/params.h	/^  int RDPictureFrameQPBSlice;        \/\/!< Whether to check additional frame level QP values for B slices$/;"	m	struct:inp_par_enc
RDPictureFrameQPPSlice	inc/params.h	/^  int RDPictureFrameQPPSlice;        \/\/!< Whether to check additional frame level QP values for P slices$/;"	m	struct:inp_par_enc
RDPictureMaxPassBSlice	inc/params.h	/^  int RDPictureMaxPassBSlice;        \/\/!< Max # of coding passes for B-slice$/;"	m	struct:inp_par_enc
RDPictureMaxPassISlice	inc/params.h	/^  int RDPictureMaxPassISlice;        \/\/!< Max # of coding passes for I-slice$/;"	m	struct:inp_par_enc
RDPictureMaxPassPSlice	inc/params.h	/^  int RDPictureMaxPassPSlice;        \/\/!< Max # of coding passes for P-slice$/;"	m	struct:inp_par_enc
RD_8x8DATA	inc/global.h	/^} RD_8x8DATA;$/;"	t	typeref:struct:rd_8x8_data
RD_DATA	inc/global.h	/^} RD_DATA;$/;"	t	typeref:struct:rd_data
RD_PARAMS	inc/global.h	/^} RD_PARAMS;$/;"	t	typeref:struct:rd_params
REGULAR	src/image_mp.c	/^  REGULAR = 0,$/;"	e	enum:__anon47	file:
RELIABLE_COUNT	src/context_ini.c	27;"	d	file:
RMPC	inc/errdo.h	/^  RMPC = 2,$/;"	e	enum:__anon25
ROPE	inc/errdo.h	/^  ROPE = 1,$/;"	e	enum:__anon25
RTPUpdateTimestamp	src/rtp.c	/^void RTPUpdateTimestamp (VideoParameters *p_Vid, int tr)$/;"	f
RTP_TR_TIMESTAMP_MULT	inc/rtp.h	27;"	d
RTPpacket_t	inc/rtp.h	/^} RTPpacket_t;$/;"	t	typeref:struct:__anon24
RUNBEFORE_NUM	inc/defines.h	248;"	d
RUNBEFORE_NUM_M1	inc/defines.h	249;"	d
R_COMP	inc/defines.h	/^  R_COMP = 3,    \/\/ R Component$/;"	e	enum:__anon39
RandomIntra	src/intrarefresh.c	/^int RandomIntra (VideoParameters *p_Vid, int mb)$/;"	f
RandomIntraInit	src/intrarefresh.c	/^void RandomIntraInit(VideoParameters *p_Vid, int xsize, int ysize, int refresh)$/;"	f
RandomIntraMBRefresh	inc/params.h	/^  int RandomIntraMBRefresh;     \/\/!< Number of pseudo-random intra-MBs per picture$/;"	m	struct:inp_par_enc
RandomIntraNewPicture	src/intrarefresh.c	/^void RandomIntraNewPicture (VideoParameters *p_Vid)$/;"	f
RandomIntraUninit	src/intrarefresh.c	/^void RandomIntraUninit(VideoParameters *p_Vid)$/;"	f
ReadCharField	src/explicit_seq.c	/^void ReadCharField(FILE *expSeqFile, char* format, char* keyword, char* value)$/;"	f
ReadExplicitSeqFile	src/explicit_seq.c	/^void ReadExplicitSeqFile(ExpSeqInfo *seq_info, FILE *expSFile, int coding_index)$/;"	f
ReadFrameData	src/explicit_seq.c	/^void ReadFrameData(FILE *expSeqFile, ExpSeqInfo *seq_info, int coding_index)$/;"	f
ReadIntField	src/explicit_seq.c	/^void ReadIntField(FILE *expSeqFile, char* format, char* keyword, int* value)$/;"	f
ReadTextField	src/explicit_seq.c	/^static int ReadTextField(FILE *expSeqFile, char* keyword)$/;"	f	file:
ReconFile	inc/params.h	/^  char ReconFile     [FILE_NAME_SIZE];  \/\/!< Reconstructed Pictures (view 0 for MVC profile)$/;"	m	struct:inp_par_enc
ReconFile2	inc/params.h	/^  char ReconFile2    [FILE_NAME_SIZE];  \/\/!< Reconstructed Pictures (view 1)$/;"	m	struct:inp_par_enc
ReferenceMAD	inc/rc_types.h	/^  double ReferenceMAD[RC_MODEL_HISTORY];$/;"	m	struct:rc_quadratic
ReferenceReorder	inc/params.h	/^  int  ReferenceReorder;              \/\/!< Reordering based on Poc distances$/;"	m	struct:inp_par_enc
RefreshPattern	inc/global.h	/^  int *RefreshPattern;$/;"	m	struct:video_par
RemainingBits	inc/rc_types.h	/^  int64 RemainingBits;$/;"	m	struct:rc_generic
ReportB	src/image.c	/^static void ReportB(VideoParameters *p_Vid, int64 tmp_time)$/;"	f	file:
ReportFirstframe	src/image.c	/^static void ReportFirstframe(VideoParameters *p_Vid, int64 tmp_time)$/;"	f	file:
ReportFrameStats	inc/params.h	/^  int ReportFrameStats;$/;"	m	struct:inp_par_enc
ReportI	src/image.c	/^static void ReportI(VideoParameters *p_Vid, int64 tmp_time)$/;"	f	file:
ReportNALNonVLCBits	src/image.c	/^static void ReportNALNonVLCBits(VideoParameters *p_Vid, int64 tmp_time)$/;"	f	file:
ReportP	src/image.c	/^static void ReportP(VideoParameters *p_Vid, int64 tmp_time)$/;"	f	file:
ReportSimple	src/image.c	/^static void ReportSimple(VideoParameters *p_Vid, char *pic_type, int cur_bits, DistMetric *metric, int tmp_time)$/;"	f	file:
ReportVerbose	src/image.c	/^static void ReportVerbose(VideoParameters *p_Vid, char *pic_type, int cur_bits, int wp_method, int lambda, DistMetric *mPSNR, int tmp_time, int direct_mode)$/;"	f	file:
ReportVerboseFDN	src/image.c	/^static void ReportVerboseFDN(VideoParameters *p_Vid, char *pic_type, int cur_bits, int fdn_bits, int nvb_bits, int wp_method, int lambda, DistMetric *mPSNR, int tmp_time, int direct_mode)$/;"	f	file:
ReportVerboseFDNSSIM	src/image.c	/^static void ReportVerboseFDNSSIM(VideoParameters *p_Vid, char *pic_type, int cur_bits, int fdn_bits, int nvb_bits, int wp_method, int lambda, DistMetric *mPSNR, DistMetric *mSSIM,int tmp_time, int direct_mode)$/;"	f	file:
ReportVerboseNVB	src/image.c	/^static void ReportVerboseNVB(VideoParameters *p_Vid, char *pic_type, int cur_bits, int nvb_bits, int wp_method, int lambda, DistMetric *mPSNR, int tmp_time, int direct_mode)$/;"	f	file:
ReportVerboseNVBSSIM	src/image.c	/^static void ReportVerboseNVBSSIM(VideoParameters *p_Vid, char *pic_type, int cur_bits, int nvb_bits, int wp_method, int lambda, DistMetric *mPSNR, DistMetric *mSSIM,int tmp_time, int direct_mode)$/;"	f	file:
ReportVerboseSSIM	src/image.c	/^static void ReportVerboseSSIM(VideoParameters *p_Vid, char *pic_type, int cur_bits, int wp_method, int lambda, DistMetric *mPSNR, DistMetric *mSSIM,int tmp_time, int direct_mode)$/;"	f	file:
ResendPPS	inc/params.h	/^  int ResendPPS;$/;"	m	struct:inp_par_enc
ResendSPS	inc/params.h	/^  int ResendSPS;$/;"	m	struct:inp_par_enc
ResetMVBlock16	src/md_common.c	/^static inline void ResetMVBlock16(PicMotionParams **mv_info, int list, int block_x, int block_y, int start, int end)$/;"	f	file:
ResetMVBlock8	src/md_common.c	/^static inline void ResetMVBlock8(PicMotionParams **mv_info, int list, int block_x, int start, int end)$/;"	f	file:
ResetMotionBlock16	src/md_common.c	/^static inline void ResetMotionBlock16(PicMotionParams **mv_info, int list, int block_x, int block_y, int start, int end)$/;"	f	file:
ResetMotionBlock8	src/md_common.c	/^static inline void ResetMotionBlock8(PicMotionParams **mv_info, int list, int block_x, int start, int end)$/;"	f	file:
ResetRD8x8Data	src/md_common.c	/^void ResetRD8x8Data(VideoParameters *p_Vid, RD_8x8DATA *rd_data)$/;"	f
ResetRefBlock16	src/md_common.c	/^static inline void ResetRefBlock16(PicMotionParams **mv_info, int list, int block_x, int block_y, int start, int end)$/;"	f	file:
ResetRefBlock8	src/md_common.c	/^static inline void ResetRefBlock8(PicMotionParams **mv_info, int list, int block_x, int start, int end)$/;"	f	file:
ResetWP	src/weighted_prediction.c	/^void ResetWP(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
Residual_DPCM_16x16	src/block.c	/^static int Residual_DPCM_16x16(int **m7, int ipmode)$/;"	f	file:
Residual_DPCM_4x4	src/block.c	/^static int Residual_DPCM_4x4(int ipmode, int **mb_ores, int **mb_rres, int block_y, int block_x)$/;"	f	file:
Residual_DPCM_8x8	src/transform8x8.c	/^static int Residual_DPCM_8x8(int ipmode, int **ores, int **rres,int block_y, int block_x)$/;"	f	file:
Residual_DPCM_Chroma	src/block.c	/^static int Residual_DPCM_Chroma(int ipmode, int **ores, int **rres, int width, int height)$/;"	f	file:
RestoreMV8x8	src/rdopt.c	/^void RestoreMV8x8(Slice *currSlice, int dir)$/;"	f
RestoreMVBlock8x8	src/rdopt.c	/^void RestoreMVBlock8x8(Slice *currSlice, int dir, int block8x8, RD_8x8DATA *tr)$/;"	f
RestrictRef	inc/params.h	/^  int RestrictRef;$/;"	m	struct:inp_par_enc
SAD_a	inc/me_umhex.h	/^  distblk SAD_a,SAD_b,SAD_c,SAD_d;$/;"	m	struct:umhex_struct
SAD_b	inc/me_umhex.h	/^  distblk SAD_a,SAD_b,SAD_c,SAD_d;$/;"	m	struct:umhex_struct
SAD_c	inc/me_umhex.h	/^  distblk SAD_a,SAD_b,SAD_c,SAD_d;$/;"	m	struct:umhex_struct
SAD_d	inc/me_umhex.h	/^  distblk SAD_a,SAD_b,SAD_c,SAD_d;$/;"	m	struct:umhex_struct
SBDIAMOND	inc/me_epzs_common.h	/^  SBDIAMOND = 4$/;"	e	enum:__anon30
SCAN_YUV420	src/block.c	/^static const byte SCAN_YUV420  [4][2] =$/;"	v	file:
SCAN_YUV422	src/block.c	/^static const byte SCAN_YUV422  [8][2] =$/;"	v	file:
SDIAMOND	inc/me_epzs_common.h	/^  SDIAMOND  = 0,$/;"	e	enum:__anon30
SEARCH_ONE_PIXEL	inc/me_umhex.h	68;"	d
SEARCH_ONE_PIXEL	src/me_umhex.c	1751;"	d	file:
SEARCH_ONE_PIXEL	src/me_umhexsmp.c	47;"	d	file:
SEARCH_ONE_PIXEL	src/me_umhexsmp.c	48;"	d	file:
SEARCH_ONE_PIXEL_BIPRED	inc/me_umhex.h	88;"	d
SEARCH_ONE_PIXEL_BIPRED	src/me_umhexsmp.c	46;"	d	file:
SEARCH_ONE_PIXEL_BIPRED	src/me_umhexsmp.c	61;"	d	file:
SEIMessageText	inc/params.h	/^  char SEIMessageText[INPUT_TEXT_SIZE];$/;"	m	struct:inp_par_enc
SEIParameters	inc/sei.h	/^typedef struct sei_params SEIParameters;$/;"	t	typeref:struct:sei_params
SEIVUI32Pulldown	inc/params.h	/^  int SEIVUI32Pulldown;                \/\/!< Enable 3:2 pulldown through VUI and SEI metadata signalling. Three methods are supported.$/;"	m	struct:inp_par_enc
SEI_BASE_LAYER_TEMPORAL_HRD	inc/sei.h	/^  SEI_BASE_LAYER_TEMPORAL_HRD,$/;"	e	enum:__anon7
SEI_BASE_VIEW_TEMPORAL_HRD	inc/sei.h	/^  SEI_BASE_VIEW_TEMPORAL_HRD,$/;"	e	enum:__anon7
SEI_BUFFERING_PERIOD	inc/sei.h	/^  SEI_BUFFERING_PERIOD = 0,$/;"	e	enum:__anon7
SEI_DEBLOCKING_FILTER_DISPLAY_PREFERENCE	inc/sei.h	/^  SEI_DEBLOCKING_FILTER_DISPLAY_PREFERENCE,$/;"	e	enum:__anon7
SEI_DEC_REF_PIC_MARKING_REPETITION	inc/sei.h	/^  SEI_DEC_REF_PIC_MARKING_REPETITION,$/;"	e	enum:__anon7
SEI_FILLER_PAYLOAD	inc/sei.h	/^  SEI_FILLER_PAYLOAD,$/;"	e	enum:__anon7
SEI_FILM_GRAIN_CHARACTERISTICS	inc/sei.h	/^  SEI_FILM_GRAIN_CHARACTERISTICS,$/;"	e	enum:__anon7
SEI_FRAME_PACKING_ARRANGEMENT	inc/sei.h	/^  SEI_FRAME_PACKING_ARRANGEMENT,$/;"	e	enum:__anon7
SEI_FULL_FRAME_FREEZE	inc/sei.h	/^  SEI_FULL_FRAME_FREEZE,$/;"	e	enum:__anon7
SEI_FULL_FRAME_FREEZE_RELEASE	inc/sei.h	/^  SEI_FULL_FRAME_FREEZE_RELEASE,$/;"	e	enum:__anon7
SEI_FULL_FRAME_SNAPSHOT	inc/sei.h	/^  SEI_FULL_FRAME_SNAPSHOT,$/;"	e	enum:__anon7
SEI_H	inc/sei.h	16;"	d
SEI_LAYERS_NOT_PRESENT	inc/sei.h	/^  SEI_LAYERS_NOT_PRESENT,$/;"	e	enum:__anon7
SEI_LAYER_DEPENDENCY_CHANGE	inc/sei.h	/^  SEI_LAYER_DEPENDENCY_CHANGE,$/;"	e	enum:__anon7
SEI_MAX_ELEMENTS	inc/sei.h	/^  SEI_MAX_ELEMENTS  \/\/!< number of maximum syntax elements$/;"	e	enum:__anon7
SEI_MOTION_CONSTRAINED_SLICE_GROUP_SET	inc/sei.h	/^  SEI_MOTION_CONSTRAINED_SLICE_GROUP_SET,$/;"	e	enum:__anon7
SEI_MULTIVIEW_ACQUISITION_INFO	inc/sei.h	/^  SEI_MULTIVIEW_ACQUISITION_INFO,$/;"	e	enum:__anon7
SEI_MULTIVIEW_SCENE_INFO	inc/sei.h	/^  SEI_MULTIVIEW_SCENE_INFO,$/;"	e	enum:__anon7
SEI_MVC_SCALABLE_NESTING	inc/sei.h	/^  SEI_MVC_SCALABLE_NESTING,$/;"	e	enum:__anon7
SEI_NON_REQUIRED_LAYER_REP	inc/sei.h	/^  SEI_NON_REQUIRED_LAYER_REP,$/;"	e	enum:__anon7
SEI_NON_REQUIRED_VIEW_COMPONENT	inc/sei.h	/^  SEI_NON_REQUIRED_VIEW_COMPONENT,$/;"	e	enum:__anon7
SEI_OPERATION_POINTS_NOT_PRESENT	inc/sei.h	/^  SEI_OPERATION_POINTS_NOT_PRESENT,$/;"	e	enum:__anon7
SEI_PACKET_TYPE	inc/sei.h	31;"	d
SEI_PAN_SCAN_RECT	inc/sei.h	/^  SEI_PAN_SCAN_RECT,$/;"	e	enum:__anon7
SEI_PARALLEL_DECODING_INFO	inc/sei.h	/^  SEI_PARALLEL_DECODING_INFO,$/;"	e	enum:__anon7
SEI_PIC_TIMING	inc/sei.h	/^  SEI_PIC_TIMING,$/;"	e	enum:__anon7
SEI_POST_FILTER_HINTS	inc/sei.h	/^  SEI_POST_FILTER_HINTS,$/;"	e	enum:__anon7
SEI_PRIORITY_LAYER_INFO	inc/sei.h	/^  SEI_PRIORITY_LAYER_INFO,$/;"	e	enum:__anon7
SEI_PROGRESSIVE_REFINEMENT_SEGMENT_END	inc/sei.h	/^  SEI_PROGRESSIVE_REFINEMENT_SEGMENT_END,$/;"	e	enum:__anon7
SEI_PROGRESSIVE_REFINEMENT_SEGMENT_START	inc/sei.h	/^  SEI_PROGRESSIVE_REFINEMENT_SEGMENT_START,$/;"	e	enum:__anon7
SEI_QUALITY_LAYER_INTEGRITY_CHECK	inc/sei.h	/^  SEI_QUALITY_LAYER_INTEGRITY_CHECK,$/;"	e	enum:__anon7
SEI_RECOVERY_POINT	inc/sei.h	/^  SEI_RECOVERY_POINT,$/;"	e	enum:__anon7
SEI_REDUNDANT_PIC_PROPERTY	inc/sei.h	/^  SEI_REDUNDANT_PIC_PROPERTY,$/;"	e	enum:__anon7
SEI_SCALABILITY_INFO	inc/sei.h	/^  SEI_SCALABILITY_INFO,$/;"	e	enum:__anon7
SEI_SCALABLE_NESTING	inc/sei.h	/^  SEI_SCALABLE_NESTING,$/;"	e	enum:__anon7
SEI_SCENE_INFO	inc/sei.h	/^  SEI_SCENE_INFO,$/;"	e	enum:__anon7
SEI_SPARE_PIC	inc/sei.h	/^  SEI_SPARE_PIC,$/;"	e	enum:__anon7
SEI_STEREO_VIDEO_INFO	inc/sei.h	/^  SEI_STEREO_VIDEO_INFO,$/;"	e	enum:__anon7
SEI_SUB_PIC_SCALABLE_LAYER	inc/sei.h	/^  SEI_SUB_PIC_SCALABLE_LAYER,$/;"	e	enum:__anon7
SEI_SUB_SEQ_CHARACTERISTICS	inc/sei.h	/^  SEI_SUB_SEQ_CHARACTERISTICS,$/;"	e	enum:__anon7
SEI_SUB_SEQ_INFO	inc/sei.h	/^  SEI_SUB_SEQ_INFO,$/;"	e	enum:__anon7
SEI_SUB_SEQ_LAYER_CHARACTERISTICS	inc/sei.h	/^  SEI_SUB_SEQ_LAYER_CHARACTERISTICS,$/;"	e	enum:__anon7
SEI_TL0_DEP_REP_INDEX	inc/sei.h	/^  SEI_TL0_DEP_REP_INDEX,$/;"	e	enum:__anon7
SEI_TL_SWITCHING_POINT	inc/sei.h	/^  SEI_TL_SWITCHING_POINT,$/;"	e	enum:__anon7
SEI_TONE_MAPPING	inc/sei.h	/^  SEI_TONE_MAPPING,$/;"	e	enum:__anon7
SEI_USER_DATA_REGISTERED_ITU_T_T35	inc/sei.h	/^  SEI_USER_DATA_REGISTERED_ITU_T_T35,$/;"	e	enum:__anon7
SEI_USER_DATA_UNREGISTERED	inc/sei.h	/^  SEI_USER_DATA_UNREGISTERED,$/;"	e	enum:__anon7
SEI_VIEW_DEPENDENCY_CHANGE	inc/sei.h	/^  SEI_VIEW_DEPENDENCY_CHANGE,$/;"	e	enum:__anon7
SEI_VIEW_SCALABILITY_INFO	inc/sei.h	/^  SEI_VIEW_SCALABILITY_INFO,$/;"	e	enum:__anon7
SEI_type	inc/sei.h	/^} SEI_type;$/;"	t	typeref:enum:__anon7
SHIFT_QP	inc/defines.h	254;"	d
SI4MB	inc/defines.h	/^  SI4MB        = 12,$/;"	e	enum:__anon35
SIGN_BITS	inc/rdoq.h	23;"	d
SIMULCAST_ENABLE	inc/defines.h	51;"	d
SMB4x4	inc/defines.h	/^  SMB4x4       =  7,$/;"	e	enum:__anon35
SMB4x8	inc/defines.h	/^  SMB4x8       =  6,$/;"	e	enum:__anon35
SMB8x4	inc/defines.h	/^  SMB8x4       =  5,$/;"	e	enum:__anon35
SMB8x8	inc/defines.h	/^  SMB8x8       =  4,$/;"	e	enum:__anon35
SMB_BLOCK_SIZE	inc/defines.h	144;"	d
SNGL_SCAN	src/block.c	/^static const byte SNGL_SCAN[16][2] =$/;"	v	file:
SNGL_SCAN8x8	src/transform8x8.c	/^static const byte SNGL_SCAN8x8[64][2] = {$/;"	v	file:
SNGL_SCAN8x8_CAVLC	src/transform8x8.c	/^static const byte SNGL_SCAN8x8_CAVLC[64][2] = {$/;"	v	file:
SODBtoRBSP	src/nal.c	/^void SODBtoRBSP(Bitstream *currStream)$/;"	f
SOP	inc/defines.h	/^  SOP = 2,    \/\/!< Start Of Picture$/;"	e	enum:__anon43
SOS	inc/defines.h	/^  SOS = 3     \/\/!< Start Of Slice$/;"	e	enum:__anon43
SPDetectionThreshold	inc/params.h	/^  int SPDetectionThreshold;$/;"	m	struct:inp_par_enc
SPPercentageThreshold	inc/params.h	/^  int SPPercentageThreshold;$/;"	m	struct:inp_par_enc
SP_M2DRPU	inc/global.h	/^  struct epzs_struct *SP_M2DRPU;$/;"	m	struct:video_par	typeref:struct:video_par::epzs_struct
SP_M2DRPU4MM	inc/global.h	/^  struct epzs_struct *SP_M2DRPU4MM;$/;"	m	struct:video_par	typeref:struct:video_par::epzs_struct
SPoint	inc/me_epzs_common.h	/^SPoint;$/;"	t	typeref:struct:__anon29
SQUARE	inc/me_epzs_common.h	/^  SQUARE    = 1,$/;"	e	enum:__anon30
SRC	Makefile	/^SRC=    $(wildcard $(SRCDIR)\/*.c) $/;"	m
SRCDIR	Makefile	/^SRCDIR= src$/;"	m
SSE_MEMORY_ALIGNMENT	inc/defines.h	61;"	d
SSIMOverlapSize	inc/params.h	/^  int SSIMOverlapSize;$/;"	m	struct:inp_par_enc
STATIC	Makefile	/^STATIC= $/;"	m
STATIC	Makefile	/^STATIC= -static$/;"	m
STATIC	Makefile	/^STATIC=$/;"	m
STC	Makefile	/^STC=0$/;"	m
STC	Makefile	/^STC?= 0$/;"	m
STEREO_HIGH	inc/defines.h	/^  STEREO_HIGH    = 128       \/\/!< YUV 4:2:0\/8  "Stereo High"$/;"	e	enum:__anon34
SUFFIX	Makefile	/^SUFFIX= .dbg$/;"	m
SUFFIX	Makefile	/^SUFFIX=$/;"	m
SYMTRACESTRING	src/header.c	29;"	d	file:
SYMTRACESTRING	src/header.c	31;"	d	file:
SYMTRACESTRING	src/rtp.c	26;"	d	file:
SYMTRACESTRING	src/rtp.c	28;"	d	file:
SYMTRACESTRING	src/vlc.c	26;"	d	file:
SYMTRACESTRING	src/vlc.c	28;"	d	file:
ScaleParameters	inc/global.h	/^typedef struct scaling_list      ScaleParameters;$/;"	t	typeref:struct:scaling_list
ScalingList4x4	inc/q_matrix.h	/^  short ScalingList4x4[6][16];$/;"	m	struct:scaling_list
ScalingList4x4input	inc/q_matrix.h	/^  short ScalingList4x4input[6][16];$/;"	m	struct:scaling_list
ScalingList8x8	inc/q_matrix.h	/^  short ScalingList8x8[6][64];$/;"	m	struct:scaling_list
ScalingList8x8input	inc/q_matrix.h	/^  short ScalingList8x8input[6][64];$/;"	m	struct:scaling_list
ScalingListPresentFlag	inc/params.h	/^  int ScalingListPresentFlag[12];$/;"	m	struct:inp_par_enc
ScalingMatrixPresentFlag	inc/params.h	/^  int ScalingMatrixPresentFlag;$/;"	m	struct:inp_par_enc
Scaling_List	src/parset.c	/^int Scaling_List(short *scalingListinput, short *scalingList, int sizeOfScalingList, short *UseDefaultScalingMatrix, Bitstream *bitstream)$/;"	f
SearchMode	inc/params.h	/^  SearchType SearchMode[2];$/;"	m	struct:inp_par_enc
SearchState	inc/me_umhex.h	/^  byte **SearchState;                         \/\/!< state for fractional pel search$/;"	m	struct:umhex_struct
SearchState	inc/me_umhexsmp.h	/^  byte  **SearchState;          \/\/state for fractional pel search$/;"	m	struct:umhex_smp_struct
SearchWindow	inc/global.h	/^typedef struct search_window SearchWindow;$/;"	t	typeref:struct:search_window
SeinitialQP	inc/params.h	/^  int SeinitialQP;$/;"	m	struct:inp_par_enc
SelectiveIntraEnable	inc/params.h	/^  int SelectiveIntraEnable;$/;"	m	struct:inp_par_enc
SendAUD	inc/params.h	/^  int SendAUD;                          \/\/!< send Access Unit Delimiter NALU$/;"	m	struct:inp_par_enc
SepViewInterSearch	inc/params.h	/^  int SepViewInterSearch;$/;"	m	struct:inp_par_enc
SeqStructure	inc/pred_struct_types.h	/^} SeqStructure;$/;"	t	typeref:struct:seq_struct
SetCtxModelNumber	src/context_ini.c	/^void SetCtxModelNumber (Slice *currSlice)$/;"	f
SetFirstAsLongTerm	inc/params.h	/^  int  SetFirstAsLongTerm;              \/\/!< Support for temporal considerations for CB plus encoding$/;"	m	struct:inp_par_enc
SetLagrangianMultipliersOff	src/slice.c	/^void SetLagrangianMultipliersOff(Slice *currSlice)$/;"	f
SetLagrangianMultipliersOn	src/slice.c	/^void SetLagrangianMultipliersOn(Slice *currSlice)$/;"	f
SetLambda	src/lambda.c	/^static void SetLambda(VideoParameters *p_Vid, int j, int qp, double lambda_scale)$/;"	f	file:
SetMVBSlice16x8	src/md_common.c	/^static void SetMVBSlice16x8(Slice *currSlice, PicMotionParams **motion, Macroblock* currMB, int pos)$/;"	f	file:
SetMVBSlice8x16	src/md_common.c	/^static void SetMVBSlice8x16(Slice *currSlice, PicMotionParams **motion, Macroblock* currMB, int pos)$/;"	f	file:
SetMVBSlice8x8	src/md_common.c	/^static void SetMVBSlice8x8(Slice *currSlice, PicMotionParams **motion, Macroblock* currMB, int pos_y, int pos_x)$/;"	f	file:
SetMVXLimit	inc/params.h	/^  int    SetMVXLimit;$/;"	m	struct:inp_par_enc
SetMVYLimit	inc/params.h	/^  int    SetMVYLimit;$/;"	m	struct:inp_par_enc
SetMotionVectorsMBBSlice	src/md_common.c	/^void SetMotionVectorsMBBSlice (Macroblock* currMB)$/;"	f
SetMotionVectorsMBISlice	src/md_common.c	/^void SetMotionVectorsMBISlice (Macroblock* currMB)$/;"	f
SetMotionVectorsMBPSlice	src/md_common.c	/^void SetMotionVectorsMBPSlice (Macroblock* currMB)$/;"	f
SetVUIScaleAndTicks	src/configfile.c	/^static void SetVUIScaleAndTicks(InputParameters *p_Inp, double frame_rate)$/;"	f	file:
SetupFastFullPelSearch_otf	src/me_fullfast_otf.c	/^void SetupFastFullPelSearch_otf (Macroblock *currMB, MEBlock *mv_block, int list)  \/\/ <--  reference frame parameter, list0 or 1$/;"	f
SkipDeBlockNonRef	inc/params.h	/^  int SkipDeBlockNonRef;$/;"	m	struct:inp_par_enc
SkipIntraInInterSlices	inc/params.h	/^  int SkipIntraInInterSlices;        \/\/!< Skip intra type checking in inter slices if best_mode is skip\/direct$/;"	m	struct:inp_par_enc
Slice	inc/global.h	/^} Slice;$/;"	t	typeref:struct:slice
SliceGroupConfigFileName	inc/params.h	/^  char SliceGroupConfigFileName[FILE_NAME_SIZE];    \/\/!< Filename for config info fot type 0, 2, 6$/;"	m	struct:inp_par_enc
SliceHeader	src/header.c	/^int SliceHeader(Slice* currSlice)$/;"	f
SliceStructure	inc/pred_struct_types.h	/^} SliceStructure;$/;"	t	typeref:struct:slice_struct
SliceTypeToPop	inc/pred_struct_types.h	/^} SliceTypeToPop;$/;"	t	typeref:enum:__anon31
Sort	src/leaky_bucket.c	/^void Sort(unsigned long NumberLeakyBuckets, unsigned long *Rmin)$/;"	f
SparePictureOption	inc/params.h	/^  int SparePictureOption;$/;"	m	struct:inp_par_enc
StatsFile	inc/params.h	/^  char StatsFile     [FILE_NAME_SIZE];  \/\/!< Stats File$/;"	m	struct:inp_par_enc
StorablePicture	inc/mbuffer.h	/^} StorablePicture;$/;"	t	typeref:struct:storable_picture
StorablePicturePtr	inc/mbuffer.h	/^typedef StorablePicture *StorablePicturePtr;$/;"	t
StoreMV8x8	src/rdopt.c	/^void StoreMV8x8(Slice *currSlice, int dir)$/;"	f
StoreMVBlock8x8	src/rdopt.c	/^void StoreMVBlock8x8(Slice *currSlice, int dir, int block8x8, int mode, Info8x8 *B8x8Info)$/;"	f
StoreNewMotionVectorsBlock8x8	src/rdopt.c	/^void StoreNewMotionVectorsBlock8x8(Slice *currSlice, int dir, int block8x8, Info8x8 *B8x8Info)$/;"	f
SubImageContainer	inc/global.h	/^} SubImageContainer;$/;"	t	typeref:struct:__anon6
SubPartitionMotionSearch	src/mv_search.c	/^void SubPartitionMotionSearch (Macroblock *currMB,$/;"	f
SubPelBiPredME	inc/global.h	/^  distblk (*SubPelBiPredME) (struct macroblock_enc *currMB, struct me_block *, int list, $/;"	m	struct:macroblock_enc
SubPelME	inc/global.h	/^  distblk (*SubPelME)       (struct macroblock_enc *currMB, $/;"	m	struct:macroblock_enc
SubPelThreshold1	inc/me_umhexsmp.h	/^  distblk  SubPelThreshold1;$/;"	m	struct:umhex_smp_struct
SubPelThreshold3	inc/me_umhexsmp.h	/^  distblk  SubPelThreshold3;$/;"	m	struct:umhex_smp_struct
SumFrameQP	inc/global.h	/^  int SumFrameQP;$/;"	m	struct:video_par
SymmetricalCrossSearchThreshold1	inc/me_umhexsmp.h	/^  distblk  SymmetricalCrossSearchThreshold1;$/;"	m	struct:umhex_smp_struct
SymmetricalCrossSearchThreshold2	inc/me_umhexsmp.h	/^  distblk  SymmetricalCrossSearchThreshold2;$/;"	m	struct:umhex_smp_struct
SyntaxElement	inc/global.h	/^} SyntaxElement;$/;"	t	typeref:struct:syntaxelement_enc
THETA	src/rc_quadratic.c	/^static const float THETA = 1.3636F;$/;"	v	file:
TOTRUN_NUM	inc/defines.h	247;"	d
TRACE	inc/defines.h	25;"	d
TRACE	inc/defines.h	27;"	d
TRACESTRING_SIZE	inc/global.h	336;"	d
TRACE_SE	src/macroblock.c	53;"	d	file:
TRACE_SE	src/macroblock.c	55;"	d	file:
T_COMP	inc/defines.h	/^  T_COMP = 6$/;"	e	enum:__anon39
Target	inc/rc_types.h	/^  int    Target;$/;"	m	struct:rc_quadratic
TargetBufferLevel	inc/rc_types.h	/^  double TargetBufferLevel;     \/\/LIZG 25\/10\/2002$/;"	m	struct:rc_quadratic
TargetField	inc/rc_types.h	/^  int    TargetField;$/;"	m	struct:rc_quadratic
TestEncoderParams	src/configfile.c	/^static int TestEncoderParams(Mapping *Map, int bitdepth_qp_scale[3])$/;"	f	file:
TestWPBSlice	inc/global.h	/^  int  (*TestWPBSlice)     (struct slice *currSlice, int method);$/;"	m	struct:video_par
TestWPBSliceAlg0	src/weighted_prediction.c	/^int TestWPBSliceAlg0(Slice *currSlice, int select_method)$/;"	f
TestWPBSliceAlg1	src/wp_lms.c	/^int TestWPBSliceAlg1(Slice *currSlice, int select_method)$/;"	f
TestWPBSliceAlg2	src/wp_mciter.c	/^int TestWPBSliceAlg2(Slice *currSlice, int select_method)$/;"	f
TestWPBSlicePeriodic	src/wp_periodic.c	/^int TestWPBSlicePeriodic(Slice *currSlice, int select_method)$/;"	f
TestWPBSliceRandom	src/wp_random.c	/^int TestWPBSliceRandom(Slice *currSlice, int select_method)$/;"	f
TestWPPSlice	inc/global.h	/^  int  (*TestWPPSlice)     (struct slice *currSlice, int offset);$/;"	m	struct:video_par
TestWPPSliceAlg0	src/weighted_prediction.c	/^int TestWPPSliceAlg0(Slice *currSlice, int select_offset)$/;"	f
TestWPPSliceAlg1	src/wp_lms.c	/^int TestWPPSliceAlg1(Slice *currSlice, int select_offset)$/;"	f
TestWPPSliceAlg2	src/wp_mciter.c	/^int TestWPPSliceAlg2(Slice *currSlice, int select_offset)$/;"	f
TestWPPSlicePeriodic	src/wp_periodic.c	/^int TestWPPSlicePeriodic(Slice *currSlice, int select_offset)$/;"	f
TestWPPSliceRandom	src/wp_random.c	/^int TestWPPSliceRandom(Slice *currSlice, int select_offset)$/;"	f
TextureInfoContexts	inc/global.h	/^} TextureInfoContexts;$/;"	t	typeref:struct:__anon2
ThisPOC	inc/global.h	/^  signed int          ThisPOC;      \/\/!< current picture POC$/;"	m	struct:slice
ThisPOC	inc/global.h	/^  signed int ThisPOC;      \/\/!< current picture POC$/;"	m	struct:video_par
Threshold_DSR	src/me_umhex.c	/^static const int   Threshold_DSR[8]    = {0, 2200, 1000, 1000, 500, 250,  250, 120};$/;"	v	file:
Threshold_DSR_MB	inc/me_umhex.h	/^  distblk Threshold_DSR_MB[8];                    \/\/!<  Threshold for usage of DSR. DSR refer to JVT-Q088$/;"	m	struct:umhex_struct
ToneMappingFile	inc/params.h	/^  char ToneMappingFile[FILE_NAME_SIZE];    \/\/!< ToneMapping SEI message cfg file$/;"	m	struct:inp_par_enc
ToneMappingSEI	inc/sei.h	/^} ToneMappingSEI;$/;"	t	typeref:struct:__anon23
ToneMappingSEIPresentFlag	inc/params.h	/^  int ToneMappingSEIPresentFlag;$/;"	m	struct:inp_par_enc
TopFieldFlag	inc/rc_types.h	/^  int   TopFieldFlag;$/;"	m	struct:rc_generic
TotalBUMAD	inc/rc_types.h	/^  double TotalBUMAD;$/;"	m	struct:rc_quadratic
TotalFrameQP	inc/rc_types.h	/^  int    TotalFrameQP;$/;"	m	struct:rc_quadratic
TotalMADBasicUnit	inc/rc_types.h	/^  int64 TotalMADBasicUnit;$/;"	m	struct:rc_generic
TotalNumberofBasicUnit	inc/rc_types.h	/^  int    TotalNumberofBasicUnit;$/;"	m	struct:rc_quadratic
TotalPFrame	inc/rc_types.h	/^  int    TotalPFrame;$/;"	m	struct:rc_quadratic
TotalQpforPPicture	inc/rc_types.h	/^  int    TotalQpforPPicture;$/;"	m	struct:rc_quadratic
TraceFile	inc/params.h	/^  char TraceFile     [FILE_NAME_SIZE];  \/\/!< Trace Outputs$/;"	m	struct:inp_par_enc
Transform8x8Mode	inc/global.h	/^  int                 Transform8x8Mode;$/;"	m	struct:slice
Transform8x8Mode	inc/params.h	/^  int Transform8x8Mode;$/;"	m	struct:inp_par_enc
TriRect	src/me_umhex.c	/^static const MotionVector TriRect[9] = {{0, 0}, {-4, 0}, {-4, 4}, {0, 4}, {4, 4}, {4, 0}, {4, -4}, {0, -4}, $/;"	v	file:
TurnDBOff	inc/global.h	/^  int TurnDBOff;$/;"	m	struct:video_par
UMHEXBipredIntegerPelBlockMotionSearch	src/me_umhex.c	/^UMHEXBipredIntegerPelBlockMotionSearch (Macroblock *currMB,      \/\/ <--  current Macroblock$/;"	f
UMHEXIntegerPelBlockMotionSearch	src/me_umhex.c	/^UMHEXIntegerPelBlockMotionSearch  (Macroblock *currMB,     \/\/ <--  current Macroblock$/;"	f
UMHEXSetMotionVectorPredictor	src/me_umhex.c	/^void UMHEXSetMotionVectorPredictor (Macroblock *currMB, $/;"	f
UMHEXSubPelBlockME	src/me_umhex.c	/^UMHEXSubPelBlockME (Macroblock *currMB,        \/\/ <-- Current Macroblock$/;"	f
UMHEXSubPelBlockMotionSearch	src/me_umhex.c	/^UMHEXSubPelBlockMotionSearch (Macroblock *currMB,     \/\/ <--  current Macroblock$/;"	f
UMHEX_DefineThreshold	src/me_umhex.c	/^void UMHEX_DefineThreshold(VideoParameters *p_Vid)$/;"	f
UMHEX_DefineThresholdMB	src/me_umhex.c	/^void UMHEX_DefineThresholdMB(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
UMHEX_blocktype	inc/me_umhex.h	/^  int UMHEX_blocktype;                        \/\/!< blocktype for UMHEX SetMotionVectorPredictor$/;"	m	struct:umhex_struct
UMHEX_decide_intrabk_SAD	src/me_umhex.c	/^void UMHEX_decide_intrabk_SAD(Macroblock *currMB)$/;"	f
UMHEX_free_mem	src/me_umhex.c	/^void UMHEX_free_mem(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
UMHEX_get_mem	src/me_umhex.c	/^int UMHEX_get_mem(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
UMHEX_setup	src/me_umhex.c	/^void UMHEX_setup(Macroblock *currMB, short ref, int list, int block_y, int block_x, int blocktype, MotionVector  *****all_mv)$/;"	f
UMHEX_skip_intrabk_SAD	src/me_umhex.c	/^void UMHEX_skip_intrabk_SAD(Macroblock *currMB, int ref_max)$/;"	f
UMHexDSR	inc/params.h	/^  int UMHexDSR;$/;"	m	struct:inp_par_enc
UMHexSMPStruct	inc/me_umhexsmp.h	/^typedef struct umhex_smp_struct UMHexSMPStruct;$/;"	t	typeref:struct:umhex_smp_struct
UMHexScale	inc/params.h	/^  int UMHexScale;$/;"	m	struct:inp_par_enc
UMHexStruct	inc/me_umhex.h	/^typedef struct umhex_struct UMHexStruct;$/;"	t	typeref:struct:umhex_struct
UMVLine4X	inc/refbuf.h	/^static inline imgpel *UMVLine4X (StorablePicture *ref, int y, int x)$/;"	f
UMVLine4X_otf	inc/refbuf_otf.h	/^static inline imgpel *UMVLine4X_otf (StorablePicture *ref, int y, int x )$/;"	f
UMVLine4Xcr	inc/refbuf.h	/^static inline imgpel *UMVLine4Xcr (StorablePicture *ref, int cmp, int y, int x)$/;"	f
UMVLine4Xcr_otf	inc/refbuf_otf.h	/^static inline imgpel *UMVLine4Xcr_otf (StorablePicture *ref, int cmp, int y, int x)$/;"	f
UMVLine8X_chroma	inc/refbuf.h	/^static inline imgpel *UMVLine8X_chroma (StorablePicture *ref, int cmp, int y, int x)$/;"	f
UMVLine8X_chroma_otf	inc/refbuf_otf.h	/^static inline imgpel *UMVLine8X_chroma_otf (StorablePicture *ref, int cmp, int y, int x)$/;"	f
UNBIASED_VARIANCE	src/img_dist_ms_ssim.c	25;"	d	file:
USE_RND_COST	inc/defines.h	43;"	d
U_COMP	inc/defines.h	/^  U_COMP = 1,    \/\/ U Component$/;"	e	enum:__anon39
UnifiedOneForthPix	src/image.c	/^void UnifiedOneForthPix ( VideoParameters *p_Vid, StorablePicture *s)$/;"	f
UnifiedOneForthPix_JV	src/image.c	/^void UnifiedOneForthPix_JV (VideoParameters *p_Vid, int nplane, StorablePicture *s)$/;"	f
UpdateBufferingPeriod	src/sei.c	/^void UpdateBufferingPeriod(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
UpdateDRPMRepetition	src/sei.c	/^void UpdateDRPMRepetition(SEIParameters *p_SEI)$/;"	f
UpdateDecoders	src/errdo_dist_mhyp.c	/^void UpdateDecoders(VideoParameters *p_Vid, InputParameters *p_Inp, StorablePicture *enc_pic)$/;"	f
UpdateFramePackingArrangement	src/sei.c	/^void UpdateFramePackingArrangement(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
UpdateLambdaChromaME	inc/params.h	/^  int UpdateLambdaChromaME;$/;"	m	struct:inp_par_enc
UpdateMELambda	src/slice.c	/^void UpdateMELambda(Slice *currSlice)$/;"	f
UpdatePanScanRectInfo	src/sei.c	/^void UpdatePanScanRectInfo( VideoParameters *p_Vid )$/;"	f
UpdatePicTiming	src/sei.c	/^void UpdatePicTiming(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
UpdatePixelMap	src/rdopt.c	/^void UpdatePixelMap(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
UpdatePostFilterHints	src/sei.c	/^void UpdatePostFilterHints(SEIParameters *p_SEI)$/;"	f
UpdateRandomAccess	src/sei.c	/^void UpdateRandomAccess(VideoParameters *p_Vid)$/;"	f
UpdateSceneInformation	src/sei.c	/^void UpdateSceneInformation(SEIParameters *p_SEI, Boolean HasSceneInformation, int sceneID, int sceneTransType, int secondSceneID)$/;"	f
UpdateSubseqChar	src/sei.c	/^void UpdateSubseqChar(VideoParameters *p_Vid)$/;"	f
UpdateSubseqInfo	src/sei.c	/^void UpdateSubseqInfo(VideoParameters *p_Vid, InputParameters *p_Inp, int currLayer)$/;"	f
UpdateToneMapping	src/sei.c	/^void UpdateToneMapping(SEIParameters *p_SEI) $/;"	f
UpdateUser_data_registered_itu_t_t35	src/sei.c	/^void UpdateUser_data_registered_itu_t_t35(SEIParameters *p_SEI)$/;"	f
UpdateUser_data_unregistered	src/sei.c	/^void UpdateUser_data_unregistered(SEIParameters *p_SEI)$/;"	f
UpperBound1	inc/rc_types.h	/^  int    UpperBound1, UpperBound2, LowerBound;$/;"	m	struct:rc_quadratic
UpperBound2	inc/rc_types.h	/^  int    UpperBound1, UpperBound2, LowerBound;$/;"	m	struct:rc_quadratic
UseConstrainedIntraPred	inc/params.h	/^  int UseConstrainedIntraPred;          \/\/!< 0: Inter MB pixels are allowed for intra prediction 1: Not allowed$/;"	m	struct:inp_par_enc
UseDefaultScalingMatrix4x4Flag	inc/q_matrix.h	/^  short UseDefaultScalingMatrix4x4Flag[6];$/;"	m	struct:scaling_list
UseDefaultScalingMatrix8x8Flag	inc/q_matrix.h	/^  short UseDefaultScalingMatrix8x8Flag[6];$/;"	m	struct:scaling_list
UseExplicitLambdaParams	inc/params.h	/^  int UseExplicitLambdaParams;$/;"	m	struct:inp_par_enc
UseMVLimits	inc/params.h	/^  int    UseMVLimits;$/;"	m	struct:inp_par_enc
UseRDOQuant	inc/global.h	/^  int                 UseRDOQuant;$/;"	m	struct:slice
UseRDOQuant	inc/params.h	/^  int UseRDOQuant;$/;"	m	struct:inp_par_enc
UseWeightedReferenceME	inc/params.h	/^  int UseWeightedReferenceME;        \/\/!< Use Weighted Reference for ME.$/;"	m	struct:inp_par_enc
VERSION	inc/defines.h	31;"	d
VERT_LEFT_PRED	inc/defines.h	/^  VERT_LEFT_PRED       = 7,$/;"	e	enum:__anon40
VERT_PRED	inc/defines.h	/^  VERT_PRED            = 0,$/;"	e	enum:__anon40
VERT_PRED_16	inc/defines.h	/^  VERT_PRED_16   = 0,$/;"	e	enum:__anon41
VERT_PRED_8	inc/defines.h	/^  VERT_PRED_8   =  2,$/;"	e	enum:__anon42
VERT_RIGHT_PRED	inc/defines.h	/^  VERT_RIGHT_PRED      = 5,$/;"	e	enum:__anon40
VUI	inc/params.h	/^  VUIParameters VUI;$/;"	m	struct:inp_par_enc
V_COMP	inc/defines.h	/^  V_COMP = 2,    \/\/ V Component$/;"	e	enum:__anon39
Verbose	inc/params.h	/^  int Verbose;$/;"	m	struct:inp_par_enc
VideoParameters	inc/global.h	/^} VideoParameters;$/;"	t	typeref:struct:video_par
View1ConfigName	inc/params.h	/^  char View1ConfigName[FILE_NAME_SIZE];    \/\/!<Filename for View1 configuration$/;"	m	struct:inp_par_enc
View1NoResidueRDO	inc/params.h	/^  int View1NoResidueRDO;$/;"	m	struct:inp_par_enc
View1QPOffset	inc/params.h	/^  int View1QPOffset;                    \/\/!< QP offset during rate control for View 1$/;"	m	struct:inp_par_enc
VisualResWavPSNR	inc/params.h	/^  double VisualResWavPSNR;$/;"	m	struct:inp_par_enc
WPIterMC	inc/params.h	/^  int WPIterMC;                         \/\/!< Iterative WP method$/;"	m	struct:inp_par_enc
WPMCPrecBSlice	inc/params.h	/^  int WPMCPrecBSlice;$/;"	m	struct:inp_par_enc
WPMCPrecFullRef	inc/params.h	/^  int WPMCPrecFullRef;$/;"	m	struct:inp_par_enc
WPMCPrecision	inc/params.h	/^  int WPMCPrecision;$/;"	m	struct:inp_par_enc
WPMethod	inc/params.h	/^  int WPMethod;                         \/\/!< WP method (0: DC, 1: LMS)$/;"	m	struct:inp_par_enc
WPParams	inc/global.h	/^} WPParams;$/;"	t	typeref:struct:wp_params
WPXObject	inc/wp_mcprec.h	/^WPXObject;$/;"	t	typeref:struct:wpx_object
WPXPass	inc/wp_mcprec.h	/^WPXPass;$/;"	t	typeref:struct:__anon33
WalkAround	inc/global.h	/^  int WalkAround;$/;"	m	struct:video_par
Wb	inc/rc_types.h	/^  double Wp, Wb; \/\/ complexity weights$/;"	m	struct:rc_quadratic
WeightCb	inc/params.h	/^  double WeightCb;$/;"	m	struct:inp_par_enc
WeightCr	inc/params.h	/^  double WeightCr;$/;"	m	struct:inp_par_enc
WeightY	inc/params.h	/^  double WeightY;$/;"	m	struct:inp_par_enc
WeightedBiprediction	inc/params.h	/^  int WeightedBiprediction;             \/\/!< Weighted prediction for B frames (0: not used, 1: explicit, 2: implicit)$/;"	m	struct:inp_par_enc
WeightedPredRefX	inc/wp_mcprec.h	/^WeightedPredRefX;$/;"	t	typeref:struct:__anon32
WeightedPrediction	inc/params.h	/^  int WeightedPrediction;               \/\/!< Weighted prediction for P frames (0: not used, 1: explicit)$/;"	m	struct:inp_par_enc
Wp	inc/rc_types.h	/^  double Wp, Wb; \/\/ complexity weights$/;"	m	struct:rc_quadratic
WriteAnnexbNALU	src/annexb.c	/^int WriteAnnexbNALU (VideoParameters *p_Vid, NALU_t *n, FILE **f_annexb)$/;"	f
WriteHRDParameters	src/parset.c	/^int WriteHRDParameters(seq_parameter_set_rbsp_t *sps, Bitstream *bitstream)$/;"	f
WriteNALU	inc/global.h	/^  int  (*WriteNALU)            (struct video_par *p_Vid, NALU_t *n, FILE **f_out);     \/\/! Hides the write function in Annex B or RTP$/;"	m	struct:video_par
WriteRTPNALU	src/rtp.c	/^int WriteRTPNALU (VideoParameters *p_Vid, NALU_t *n, FILE **f_rtp)$/;"	f
WriteRTPPacket	src/rtp.c	/^int WriteRTPPacket (RTPpacket_t *p, FILE *f)$/;"	f
Write_AUD_NALU	src/nalu.c	/^int Write_AUD_NALU( VideoParameters *p_Vid )$/;"	f
Write_Filler_Data_NALU	src/nalu.c	/^int Write_Filler_Data_NALU( VideoParameters *p_Vid, int num_bytes )$/;"	f
Write_SEI_NALU	src/sei.c	/^int Write_SEI_NALU(VideoParameters *p_Vid, int len)$/;"	f
XRate	src/context_ini.c	/^double XRate (VideoParameters *p_Vid, BiContextTypePtr ctx, const char* model)$/;"	f
Xb	inc/rc_types.h	/^  int    Xp, Xb;$/;"	m	struct:rc_quadratic
Xp	inc/rc_types.h	/^  int    Xp, Xb;$/;"	m	struct:rc_quadratic
YUV2RGB_YOFFSET	src/cconv_yuv2rgb.c	19;"	d	file:
YUVtoRGB	src/cconv_yuv2rgb.c	/^void YUVtoRGB(VideoParameters *p_Vid, ImageStructure *YUV, ImageStructure *RGB)$/;"	f
Y_COMP	inc/defines.h	/^  Y_COMP = 0,    \/\/ Y Component$/;"	e	enum:__anon39
ZEROBYTES_SHORTSTARTCODE	inc/defines.h	309;"	d
ZEROSNR	inc/defines.h	42;"	d
ZZ_SCAN	src/parset.c	/^static const byte ZZ_SCAN[16]  =$/;"	v	file:
ZZ_SCAN8	src/parset.c	/^static const byte ZZ_SCAN8[64] =$/;"	v	file:
ZeroRef	src/macroblock.c	/^int ZeroRef (Macroblock* currMB)$/;"	f
_ANNEXB_H_	inc/annexb.h	16;"	d
_BIARIENCOD_H_	inc/biariencode.h	24;"	d
_BLOCK_H_	inc/block.h	19;"	d
_CABAC_H_	inc/cabac.h	21;"	d
_CCONV_YUV2RGB_H_	inc/cconv_yuv2rgb.h	18;"	d
_CHROMA_COEFF_COST_	inc/defines.h	114;"	d
_CONFIGFILE_H_	inc/configfile.h	14;"	d
_CONFORMANCE_H_	inc/conformance.h	16;"	d
_CONTEXT_INI_	inc/context_ini.h	17;"	d
_DEFINES_H_	inc/defines.h	22;"	d
_ELEMENTS_H_	inc/elements.h	23;"	d
_ERRDO_DIST_MHYP_H_	inc/errdo_dist_mhyp.h	15;"	d
_ERRDO_H_	inc/errdo.h	16;"	d
_EXPLICIT_GOP_H_	inc/explicit_gop.h	16;"	d
_EXPLICIT_SEQ_H_	inc/explicit_seq.h	16;"	d
_FILEHANDLE_H_	inc/filehandle.h	17;"	d
_FMO_H_	inc/fmo.h	18;"	d
_GET_BLOCK_OTF_H_	inc/get_block_otf.h	14;"	d
_GLOBAL_H_	inc/global.h	15;"	d
_HEADER_H_	inc/header.h	12;"	d
_IMAGE_H_	inc/image.h	18;"	d
_IMG_CHROMA_H_	inc/img_chroma.h	19;"	d
_IMG_DISTORTION_H_	inc/img_distortion.h	18;"	d
_IMG_DIST_MS_SSIM_H_	inc/img_dist_ms_ssim.h	20;"	d
_IMG_DIST_SNR_H_	inc/img_dist_snr.h	18;"	d
_IMG_DIST_SSIM_H_	inc/img_dist_ssim.h	20;"	d
_IMG_LUMA_H_	inc/img_luma.h	19;"	d
_INTRA16X16_H_	inc/intra16x16.h	18;"	d
_INTRA4x4_H_	inc/intra4x4.h	16;"	d
_INTRA8X8_H_	inc/intra8x8.h	18;"	d
_INTRAREFRESH_H_	inc/intrarefresh.h	18;"	d
_LAMBDA_H_	inc/lambda.h	19;"	d
_LEAKYBUCKET_	inc/defines.h	107;"	d
_LEAKY_BUCKET_H_	inc/leaky_bucket.h	16;"	d
_LIST_REORDER_H_	inc/list_reorder.h	20;"	d
_LLN_MC_PREDICTION_H_	inc/lln_mc_prediction.h	19;"	d
_LOOP_FILTER_H_	inc/loop_filter.h	19;"	d
_LUMA_8x8_COEFF_COST_	inc/defines.h	116;"	d
_LUMA_COEFF_COST_	inc/defines.h	113;"	d
_LUMA_MB_COEFF_COST_	inc/defines.h	115;"	d
_MACROBLOCK_H_	inc/macroblock.h	19;"	d
_MACROBLOCK_P444_H_	inc/macroblock_p444.h	15;"	d
_MBUFFERENC_H_	inc/mbuffer.h	18;"	d
_MC_PREDICTION_H_	inc/mc_prediction.h	19;"	d
_MC_PREDICTION_OTF_H_	inc/mc_prediction_otf.h	2;"	d
_MD_COMMON_H_	inc/md_common.h	19;"	d
_MD_DISTORTION_H_	inc/md_distortion.h	18;"	d
_ME_DISTORTION_H_	inc/me_distortion.h	19;"	d
_ME_DISTORTION_OTF_H_	inc/me_distortion_otf.h	12;"	d
_ME_EPZS_COMMON_H_	inc/me_epzs_common.h	20;"	d
_ME_EPZS_H_	inc/me_epzs.h	20;"	d
_ME_EPZS_INT_H_	inc/me_epzs_int.h	20;"	d
_ME_FULLFAST_H_	inc/me_fullfast.h	20;"	d
_ME_FULLFAST_OTF_H_	inc/me_fullfast_otf.h	13;"	d
_ME_FULLSEARCH_H_	inc/me_fullsearch.h	20;"	d
_ME_UMHEXSMP_H_	inc/me_umhexsmp.h	27;"	d
_ME_UMHEX_H_	inc/me_umhex.h	24;"	d
_MMCO_H_	inc/mmco.h	16;"	d
_MODE_DECISION_H_	inc/mode_decision.h	19;"	d
_MODE_DECISION_P8x8_H_	inc/mode_decision_p8x8.h	19;"	d
_MV_SEARCH_H_	inc/mv_search.h	17;"	d
_NALU_H_	inc/nalu.h	18;"	d
_NAL_H_	inc/nal.h	19;"	d
_OUTPUT_H_	inc/output.h	15;"	d
_PARAMS_H_	inc/params.h	14;"	d
_PARSET_H_	inc/parset.h	18;"	d
_PRED_STRUCT_ADAPT_H_	inc/pred_struct_adapt.h	18;"	d
_PRED_STRUCT_ADAPT_TYPES_H_	inc/pred_struct_adapt_types.h	18;"	d
_PRED_STRUCT_H_	inc/pred_struct.h	18;"	d
_PRED_STRUCT_TYPES_H_	inc/pred_struct_types.h	18;"	d
_QUANT4x4_H_	inc/quant4x4.h	17;"	d
_QUANT8x8_H_	inc/quant8x8.h	16;"	d
_QUANT_CR_H_	inc/quantChroma.h	17;"	d
_Q_AROUND_H_	inc/q_around.h	15;"	d
_Q_MATRIX_H_	inc/q_matrix.h	16;"	d
_Q_OFFSETS_H_	inc/q_offsets.h	16;"	d
_RATE_CTL_H_	inc/ratectl.h	20;"	d
_RC_QUADRATIC_H_	inc/rc_quadratic.h	20;"	d
_RC_TYPES_H_	inc/rc_types.h	21;"	d
_RDOQ_H_	inc/rdoq.h	18;"	d
_RDO_H_	inc/rdopt.h	18;"	d
_RD_INTRA_JM444_H_	inc/rd_intra_jm444.h	18;"	d
_RD_INTRA_JM_H_	inc/rd_intra_jm.h	18;"	d
_RD_OPT_CS_H_	inc/rdopt_coding_state.h	20;"	d
_REBUF_H_	inc/refbuf.h	11;"	d
_REBUF_OTF_H_	inc/refbuf_otf.h	11;"	d
_RTP_H_	inc/rtp.h	19;"	d
_SLICE_H_	inc/slice.h	21;"	d
_TRANSFORM8X8_H_	inc/transform8x8.h	19;"	d
_VLC_H_	inc/vlc.h	14;"	d
_WP_H_	inc/wp.h	18;"	d
_WP_LMS_H_	inc/wp_lms.h	18;"	d
_WP_MCITERM_H_	inc/wp_mciter.h	18;"	d
_WP_MCPREC_H_	inc/wp_mcprec.h	19;"	d
_WP_PERIODIC_H_	inc/wp_periodic.h	18;"	d
_WP_RANDOM_H_	inc/wp_random.h	18;"	d
abs_contexts	inc/global.h	/^  BiContextType  abs_contexts [NUM_BLOCK_TYPES][NUM_ABS_CTX];$/;"	m	struct:__anon2
abs_diff_pic_num_minus1	inc/global.h	/^  int                 *abs_diff_pic_num_minus1[2];$/;"	m	struct:slice
abs_diff_view_idx_minus1	inc/global.h	/^  int                 *abs_diff_view_idx_minus1[2];$/;"	m	struct:slice
accumulate_average	src/img_distortion.c	/^void accumulate_average(DistMetric *metric, int frames)$/;"	f
accumulate_avslice	src/img_distortion.c	/^void accumulate_avslice(DistMetric *metric, int slice_type, int frames)$/;"	f
accumulate_metric	src/img_distortion.c	/^void accumulate_metric(float *ave_metric, float cur_metric, int frames)$/;"	f
active_pps	inc/global.h	/^  pic_parameter_set_rbsp_t *active_pps;$/;"	m	struct:slice
active_pps	inc/global.h	/^  pic_parameter_set_rbsp_t *active_pps;$/;"	m	struct:video_par
active_pps	inc/image.h	/^  pic_parameter_set_rbsp_t *active_pps;$/;"	m	struct:coding_info
active_sps	inc/global.h	/^  seq_parameter_set_rbsp_t *active_sps;$/;"	m	struct:slice
active_sps	inc/global.h	/^  seq_parameter_set_rbsp_t *active_sps;$/;"	m	struct:video_par
adaptive_idr_period	inc/params.h	/^  int adaptive_idr_period;$/;"	m	struct:inp_par_enc
adaptive_intra_period	inc/params.h	/^  int adaptive_intra_period;            \/\/!< reinitialize start of intra period$/;"	m	struct:inp_par_enc
adaptive_memory_management	src/mbuffer.c	/^static void adaptive_memory_management(DecodedPictureBuffer *p_Dpb, StorablePicture* p, FrameFormat *output)$/;"	f	file:
adaptive_ref_pic_buffering_flag	inc/global.h	/^  int     adaptive_ref_pic_buffering_flag;$/;"	m	struct:video_par
addCabacZeroWords	src/nal.c	/^int addCabacZeroWords(VideoParameters *p_Vid, NALU_t *nalu, StatParameters *cur_stats)$/;"	f
add_MVs	inc/mv_search.h	/^static inline MotionVector add_MVs(MotionVector mv0, const MotionVector *mv1)$/;"	f
add_mvs	inc/mv_search.h	/^static inline void add_mvs(MotionVector *mv0, const MotionVector *mv1)$/;"	f
add_predictor	inc/me_epzs_common.h	/^static inline int add_predictor(MotionVector *cur_mv, MotionVector prd_mv, int mvScale, int shift_mv)$/;"	f
add_residue	src/errdo_dist_mhyp.c	/^static void add_residue (Macroblock *currMB, StorablePicture *enc_pic, int decoder, int pl, int block8x8, int x_size, int y_size) $/;"	f	file:
additional_extension_flag	inc/sei.h	/^  unsigned int  additional_extension_flag;$/;"	m	struct:__anon22
adjust_mb16x16_cost	src/mode_decision.c	/^void adjust_mb16x16_cost(Macroblock *currMB, distblk cost)$/;"	f
algorithm	inc/wp_mcprec.h	/^  int algorithm;$/;"	m	struct:__anon33
all_mv	inc/global.h	/^  MotionVector   *****all_mv;         \/\/!< all modes motion vectors$/;"	m	struct:rd_data
all_mv	inc/global.h	/^  MotionVector *****all_mv;         \/\/!< replaces local all_mv$/;"	m	struct:slice
all_mv8x8	inc/rdopt.h	/^  MotionVector ****all_mv8x8; $/;"	m	struct:rdo_structure
allocEPZScolocated	src/me_epzs_common.c	/^allocEPZScolocated (int size_x, int size_y, int mb_adaptive_frame_field_flag)$/;"	f	file:
allocEPZSpattern	src/me_epzs_common.c	/^allocEPZSpattern (int searchpoints)$/;"	f	file:
alloc_encoder	src/lencod.c	/^static void alloc_encoder( EncoderParams **p_Enc)$/;"	f	file:
alloc_frame_buffer	src/pred_struct.c	/^static FrameUnitStruct * alloc_frame_buffer( InputParameters *p_Inp, int num_frames, int num_slices, int *memory_size )$/;"	f	file:
alloc_frame_store	src/mbuffer.c	/^FrameStore* alloc_frame_store(void)$/;"	f
alloc_mbs	src/macroblock.c	/^Macroblock *alloc_mbs(VideoParameters *p_Vid, int mb_num, int layers)$/;"	f
alloc_params	src/lencod.c	/^static void alloc_params( InputParameters **p_Inp )$/;"	f	file:
alloc_pic_motion	src/mbuffer.c	/^void alloc_pic_motion(PicMotionParamsOld *motion, int size_y, int size_x)$/;"	f
alloc_pic_struct	src/pred_struct.c	/^static PicStructure * alloc_pic_struct( int num_slices, int *memory_size )$/;"	f	file:
alloc_rd8x8data	src/rdopt.c	/^void alloc_rd8x8data (RD_8x8DATA *rd_data)$/;"	f
alloc_rddata	src/slice.c	/^static int alloc_rddata(Slice *currSlice, RD_DATA *rd_data)$/;"	f	file:
alloc_ref_pic_list_reordering_buffer	src/mbuffer.c	/^void alloc_ref_pic_list_reordering_buffer(Slice *currSlice)$/;"	f
alloc_storable_picture	src/mbuffer.c	/^StorablePicture* alloc_storable_picture(VideoParameters *p_Vid, PictureStructure structure, int size_x, int size_y, int size_x_cr, int size_y_cr)$/;"	f
alloc_video_params	src/lencod.c	/^static void alloc_video_params( VideoParameters **p_Vid)$/;"	f	file:
allocate_QMatrix	src/q_matrix.c	/^static void allocate_QMatrix (QuantParameters *p_Quant, InputParameters *p_Inp)$/;"	f	file:
allocate_QOffsets	src/q_offsets.c	/^static void allocate_QOffsets (QuantParameters *p_Quant, InputParameters *p_Inp)$/;"	f	file:
allocate_block_mem	src/slice.c	/^int allocate_block_mem(Slice *currSlice)$/;"	f
allocate_errdo_mem	src/errdo.c	/^int allocate_errdo_mem(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
anchor_pic_flag	inc/global.h	/^  int anchor_pic_flag[2];$/;"	m	struct:video_par
anchor_pic_flag	inc/mbuffer.h	/^  int         anchor_pic_flag[2];$/;"	m	struct:storable_picture
anchor_pic_flag	inc/mbuffer.h	/^  int       anchor_pic_flag[2];$/;"	m	struct:frame_store
apply_bi_weights	inc/global.h	/^  int              apply_bi_weights;$/;"	m	struct:me_block
apply_weights	inc/global.h	/^  int              apply_weights;$/;"	m	struct:me_block
ar_mode	inc/global.h	/^  short               ar_mode; \/\/!< mb type to store adaptive rounding parameters$/;"	m	struct:macroblock_enc
arienco_bits_written	inc/biariencode.h	/^static inline int arienco_bits_written(EncodingEnvironmentPtr eep)$/;"	f
arienco_create_encoding_environment	src/biariencode.c	/^EncodingEnvironmentPtr arienco_create_encoding_environment(void)$/;"	f
arienco_delete_encoding_environment	src/biariencode.c	/^void arienco_delete_encoding_environment(EncodingEnvironmentPtr eep)$/;"	f
arienco_done_encoding	src/biariencode.c	/^void arienco_done_encoding(Macroblock *currMB, EncodingEnvironmentPtr eep)$/;"	f
arienco_reset_EC	src/biariencode.c	/^void arienco_reset_EC(EncodingEnvironmentPtr eep)$/;"	f
arienco_start_encoding	src/biariencode.c	/^void arienco_start_encoding(EncodingEnvironmentPtr eep,$/;"	f
assignEPZSpattern	src/me_epzs_common.c	/^assignEPZSpattern (EPZSStructure * pattern, int type, int stopSearch, int nextLast, EPZSStructure * nextpattern)$/;"	f	file:
assignSE2partition	src/header.c	/^const int * assignSE2partition[2] ;$/;"	v
assignSE2partition_DP	src/header.c	/^const int assignSE2partition_DP[SE_MAX_ELEMENTS] =$/;"	v
assignSE2partition_NoDP	src/header.c	/^const int assignSE2partition_NoDP[SE_MAX_ELEMENTS] =$/;"	v
assign_enc_picture_params	src/rdopt.c	/^void assign_enc_picture_params (Macroblock *currMB, int mode, Info8x8 *best, int block)$/;"	f
atom_idx	inc/pred_struct_types.h	/^  int atom_idx;           \/\/ index in the prediction structure pointed to be *p_atom$/;"	m	struct:frame_struct
auto_crop_bottom	inc/global.h	/^  int auto_crop_bottom;$/;"	m	struct:video_par
auto_crop_right	inc/global.h	/^  int auto_crop_right;$/;"	m	struct:video_par
available	inc/global.h	/^  int   available;$/;"	m	struct:pix_pos
available	inc/sei.h	/^  Boolean available;$/;"	m	struct:__anon9
average	inc/global.h	/^  float average[3];                  \/\/!< average frame distortion$/;"	m	struct:distortion_metric
average_bit_rate	inc/sei.h	/^  unsigned int average_bit_rate;$/;"	m	struct:__anon13
average_frame_rate	inc/sei.h	/^  unsigned int average_frame_rate;$/;"	m	struct:__anon13
average_rate_flag	inc/sei.h	/^  unsigned int average_rate_flag;$/;"	m	struct:__anon13
avslice	inc/global.h	/^  float avslice[NUM_SLICE_TYPES][3]; \/\/!< average frame type distortion$/;"	m	struct:distortion_metric
b4_intra_pred_modes	inc/global.h	/^  char b4_intra_pred_modes[16];$/;"	m	struct:slice
b4_ipredmode	inc/global.h	/^  char b4_ipredmode[16];$/;"	m	struct:slice
b8_intra_pred_modes8x8	inc/global.h	/^  char b8_intra_pred_modes8x8[16];$/;"	m	struct:slice
b8_ipredmode8x8	inc/global.h	/^  char b8_ipredmode8x8[4][4];$/;"	m	struct:slice
b8_mode_table	inc/mode_decision.h	/^static const int  b8_mode_table[6]   = {0, 4, 5, 6, 7};                             \/\/ DO NOT CHANGE ORDER !!!$/;"	v
b8_type_contexts	inc/global.h	/^  BiContextType b8_type_contexts [2][NUM_B8_TYPE_CTX];$/;"	m	struct:__anon1
b8x8	inc/global.h	/^  Info8x8             b8x8[4];    $/;"	m	struct:macroblock_enc
b8x8	inc/global.h	/^  Info8x8 b8x8[4];$/;"	m	struct:rd_data
b8x8info	inc/global.h	/^  Block8x8Info  *b8x8info;                                  \/\/!< block 8x8 information for RDopt$/;"	m	struct:video_par
bInterpolated	inc/mbuffer.h	/^  int  bInterpolated;$/;"	m	struct:storable_picture
base_dist	inc/global.h	/^  int base_dist;$/;"	m	struct:video_par
basicunit	inc/params.h	/^  unsigned int basicunit;$/;"	m	struct:inp_par_enc
bcbp_contexts	inc/global.h	/^  BiContextType  bcbp_contexts[NUM_BLOCK_TYPES][NUM_BCBP_CTX];$/;"	m	struct:__anon2
best	inc/global.h	/^  Info8x8 best[MAXMODE][4];$/;"	m	struct:block_8x8_info
best8x8	inc/rdopt.h	/^  Info8x8 best8x8[4];$/;"	m	struct:rdo_structure
best_c_imode	inc/global.h	/^  char                best_c_imode;$/;"	m	struct:macroblock_enc
best_cbp	inc/global.h	/^  int                 best_cbp;$/;"	m	struct:macroblock_enc
best_i16mode	inc/global.h	/^  char                best_i16mode;$/;"	m	struct:macroblock_enc
best_i16offset	inc/global.h	/^  short               best_i16offset;$/;"	m	struct:macroblock_enc
best_mcost	inc/global.h	/^  int    best_mcost[2];$/;"	m	struct:rd_params
best_mode	inc/global.h	/^  short               best_mode;$/;"	m	struct:macroblock_enc
bi_context_type	inc/global.h	/^struct bi_context_type$/;"	s
bi_distortion	inc/me_epzs_common.h	/^  distblk ***bi_distortion;  \/\/!< Array for storing SAD Values$/;"	m	struct:epzs_params
bi_prediction	src/lln_mc_prediction.c	/^static inline void bi_prediction(imgpel** mb_pred,  $/;"	f	file:
bi_prediction	src/mc_prediction.c	/^static inline void bi_prediction(imgpel** mb_pred, imgpel* l0pred, imgpel *l1pred, $/;"	f	file:
bi_prediction	src/mc_prediction_otf.c	/^static void bi_prediction(imgpel **mb_pred, $/;"	f	file:
biari_encode_symbol	src/biariencode.c	/^void biari_encode_symbol(EncodingEnvironmentPtr eep, int symbol, BiContextTypePtr bi_ct )$/;"	f
biari_encode_symbol_eq_prob	src/biariencode.c	/^void biari_encode_symbol_eq_prob(EncodingEnvironmentPtr eep, int symbol)$/;"	f
biari_encode_symbol_final	src/biariencode.c	/^void biari_encode_symbol_final(EncodingEnvironmentPtr eep, int symbol)$/;"	f
biari_init_context	src/biariencode.c	/^void biari_init_context (int qp, BiContextTypePtr ctx, const char* ini)$/;"	f
biari_no_bits	src/rdoq_cabac.c	/^static int biari_no_bits(signed short symbol, BiContextTypePtr bi_ct )$/;"	f	file:
biari_state	src/rdoq_cabac.c	/^static int biari_state(signed short symbol, BiContextTypePtr bi_ct )$/;"	f	file:
binary_context_init1	src/context_ini.c	/^static inline void binary_context_init1(int qp, int jj, BiContextType *ctx, const char table[][2])$/;"	f	file:
binary_context_init2	src/context_ini.c	/^static inline void binary_context_init2(int qp, int ii, int jj, BiContextType ctx[][11], const char table[][11][2])$/;"	f	file:
bipred	inc/global.h	/^   char   bipred;$/;"	m	struct:info_8x8
bipred_enabled	inc/global.h	/^  int    bipred_enabled[MAXMODE];$/;"	m	struct:video_par
bipred_flag	inc/me_umhex.h	/^  int bipred_flag;                            \/\/!< flag for bipred$/;"	m	struct:umhex_struct
bipred_mv	inc/global.h	/^  MotionVector ******bipred_mv;       \/\/!< Bipredictive motion vectors$/;"	m	struct:rd_data
bipred_mv	inc/global.h	/^  MotionVector ******bipred_mv;     \/\/!< Biprediction MVs  $/;"	m	struct:slice
bit_counter	inc/global.h	/^struct bit_counter$/;"	s
bit_rate	inc/params.h	/^  int bit_rate;$/;"	m	struct:inp_par_enc
bit_rate	inc/rc_types.h	/^  float  bit_rate;$/;"	m	struct:rc_quadratic
bit_rate	inc/sei.h	/^  uint16 bit_rate[MAX_LAYER_NUMBER];$/;"	m	struct:__anon12
bit_stream_enc	inc/global.h	/^struct bit_stream_enc$/;"	s
bitcounter	src/vlc.c	/^int bitcounter = 0;$/;"	v
bitdepth_chroma	inc/global.h	/^  short               bitdepth_chroma;$/;"	m	struct:slice
bitdepth_chroma	inc/global.h	/^  short bitdepth_chroma;$/;"	m	struct:coding_par
bitdepth_chroma	inc/global.h	/^  short bitdepth_chroma;$/;"	m	struct:video_par
bitdepth_chroma_qp_scale	inc/global.h	/^  int                 bitdepth_chroma_qp_scale;$/;"	m	struct:slice
bitdepth_chroma_qp_scale	inc/global.h	/^  int bitdepth_chroma_qp_scale;$/;"	m	struct:coding_par
bitdepth_chroma_qp_scale	inc/global.h	/^  int bitdepth_chroma_qp_scale;$/;"	m	struct:video_par
bitdepth_lambda_scale	inc/global.h	/^  int                 bitdepth_lambda_scale;$/;"	m	struct:slice
bitdepth_lambda_scale	inc/global.h	/^  int bitdepth_lambda_scale;$/;"	m	struct:coding_par
bitdepth_lambda_scale	inc/global.h	/^  int bitdepth_lambda_scale;$/;"	m	struct:video_par
bitdepth_luma	inc/global.h	/^  short               bitdepth_luma;$/;"	m	struct:slice
bitdepth_luma	inc/global.h	/^  short bitdepth_luma;$/;"	m	struct:coding_par
bitdepth_luma	inc/global.h	/^  short bitdepth_luma;$/;"	m	struct:video_par
bitdepth_luma_qp_scale	inc/global.h	/^  int                 bitdepth_luma_qp_scale;$/;"	m	struct:slice
bitdepth_luma_qp_scale	inc/global.h	/^  int bitdepth_luma_qp_scale;$/;"	m	struct:coding_par
bitdepth_luma_qp_scale	inc/global.h	/^  int bitdepth_luma_qp_scale;$/;"	m	struct:video_par
bitdepth_qp_scale	inc/rc_types.h	/^  int    bitdepth_qp_scale; \/\/ support negative QPs (bitdepth > 8-bits per component)$/;"	m	struct:rc_quadratic
bitdepth_scale	inc/global.h	/^  int                 bitdepth_scale[2];$/;"	m	struct:slice
bitdepth_scale	inc/global.h	/^  int bitdepth_scale[2];$/;"	m	struct:coding_par
bitdepth_scale	inc/global.h	/^  int bitdepth_scale[2];$/;"	m	struct:video_par
bitpattern	inc/global.h	/^  unsigned int        bitpattern;     \/\/!< UVLC bitpattern$/;"	m	struct:syntaxelement_enc
bits	inc/global.h	/^  BitCounter          bits;$/;"	m	struct:macroblock_enc
bits	inc/rdopt_coding_state.h	/^  BitCounter            bits;$/;"	m	struct:coding_state
bits_per_picture	inc/global.h	/^  int   bits_per_picture;$/;"	m	struct:picture
bits_to_go	inc/global.h	/^  int     bits_to_go;         \/\/!< current bitcounter$/;"	m	struct:bit_stream_enc
bits_to_go_skip	inc/global.h	/^  int     bits_to_go_skip;    \/\/!< storage for bitcounter$/;"	m	struct:bit_stream_enc
bits_topfield	inc/rc_types.h	/^  int    Np, Nb, bits_topfield;$/;"	m	struct:rc_quadratic
bitstream	inc/global.h	/^  Bitstream           *bitstream;$/;"	m	struct:datapartition_enc
bitstream	inc/rdopt_coding_state.h	/^  Bitstream            *bitstream;$/;"	m	struct:coding_state
block	inc/global.h	/^  Info8x8 block;$/;"	m	struct:rd_data
block	inc/global.h	/^  PixelPos         block[4];$/;"	m	struct:me_block
block8x8_idx	inc/macroblock.h	/^static const int block8x8_idx[3][4][4] = $/;"	v
blockCbpBits	inc/rdoq.h	/^  int  blockCbpBits[4][2]; \/\/ c1 and c2$/;"	m	struct:est_bits_cabac
block_8x8_info	inc/global.h	/^typedef struct block_8x8_info$/;"	s
block_pos	inc/global.h	/^struct block_pos$/;"	s
block_size	inc/macroblock.h	/^static const short block_size[8][2] = $/;"	v
block_type_shift_factor	src/me_umhexsmp.c	/^static const short block_type_shift_factor[8] = {0, 0, 1, 1, 2, 3, 3, 1}; \/\/ last one relaxed to 1 instead 4$/;"	v	file:
block_x	inc/global.h	/^  short               block_x;                    \/\/!< current block horizontal$/;"	m	struct:macroblock_enc
block_x	inc/global.h	/^  short            block_x;         \/\/!< position x in MB (subpartitions)$/;"	m	struct:me_block
block_y	inc/global.h	/^  short               block_y;                    \/\/!< current block vertical$/;"	m	struct:macroblock_enc
block_y	inc/global.h	/^  short            block_y;         \/\/!< position y in MB$/;"	m	struct:me_block
blocksize_cr_x	inc/global.h	/^  short            blocksize_cr_x;  \/\/!< block size x dimension$/;"	m	struct:me_block
blocksize_cr_y	inc/global.h	/^  short            blocksize_cr_y;  \/\/!< block size y dimension$/;"	m	struct:me_block
blocksize_x	inc/global.h	/^  short            blocksize_x;     \/\/!< block size x dimension$/;"	m	struct:me_block
blocksize_y	inc/global.h	/^  short            blocksize_y;     \/\/!< block size y dimension$/;"	m	struct:me_block
blocktype	inc/global.h	/^  short            blocktype;$/;"	m	struct:me_block
bot	inc/me_epzs_common.h	/^  MotionVector ***bot;    \/\/!< motion vector       [list][subblock_x][subblock_y]$/;"	m	struct:__anon28
bot_MB	inc/global.h	/^  byte bot_MB;$/;"	m	struct:video_par
bottom_field	inc/mbuffer.h	/^  StorablePicture *bottom_field;$/;"	m	struct:frame_store
bottom_field	inc/mbuffer.h	/^  struct storable_picture *bottom_field;  \/\/ for mb aff, if frame for referencing the bottom field$/;"	m	struct:storable_picture	typeref:struct:storable_picture::storable_picture
bottom_field_pic_order_in_frame_present_flag	inc/global.h	/^  Boolean bottom_field_pic_order_in_frame_present_flag; \/\/ ????????$/;"	m	struct:video_par
bottom_poc	inc/mbuffer.h	/^  int         bottom_poc;$/;"	m	struct:storable_picture
bottom_right	inc/params.h	/^  unsigned int *bottom_right;$/;"	m	struct:inp_par_enc
bottompoc	inc/global.h	/^  signed int bottompoc;    \/\/!< for completeness - poc of bottom field of a frame (always = poc+1)$/;"	m	struct:video_par
broken_link_flag	inc/sei.h	/^  unsigned char broken_link_flag;$/;"	m	struct:__anon18
bs_bitlength	src/vlc.c	/^int bs_bitlength(Bitstream *bitstream)$/;"	f
bslice_16x16_termination_control	src/mode_decision.c	/^int bslice_16x16_termination_control(InputParameters *p_Inp, Block8x8Info *b8x8info, int *ctr16x16, int mode, int bslice)$/;"	f
buf	inc/global.h	/^  byte *buf;$/;"	m	struct:video_par
buf2img	inc/global.h	/^  void (*buf2img)              (imgpel** imgX, unsigned char* buf, int size_x, int size_y, int o_size_x, int o_size_y, int symbol_size_in_bytes, int bitshift);$/;"	m	struct:video_par
bufferSize	inc/global.h	/^  int64              bufferSize;     \/\/!< buffer size for tiff reads (not currently supported)$/;"	m	struct:encoder_params
buffer_size	inc/global.h	/^  int     buffer_size;        \/\/!< Buffer size      $/;"	m	struct:bit_stream_enc
bufferingperiod_information_struct	inc/sei.h	/^} bufferingperiod_information_struct;$/;"	t	typeref:struct:__anon8
bx0	src/mv_search.c	/^static const short bx0[5][4] = {{0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,2,0,0}, {0,2,0,2}};$/;"	v	file:
by0	src/mv_search.c	/^static const short by0[5][4] = {{0,0,0,0}, {0,0,0,0}, {0,2,0,0}, {0,0,0,0}, {0,0,2,2}};$/;"	v	file:
byte	inc/sei.h	/^  char *byte;$/;"	m	struct:__anon16
byte	inc/sei.h	/^  char *byte;$/;"	m	struct:__anon17
byte_buf	inc/global.h	/^  byte    byte_buf;           \/\/!< current buffer for last written byte$/;"	m	struct:bit_stream_enc
byte_buf_skip	inc/global.h	/^  byte    byte_buf_skip;      \/\/!< current buffer for last written byte$/;"	m	struct:bit_stream_enc
byte_pos	inc/global.h	/^  int     byte_pos;           \/\/!< current position in bitstream;$/;"	m	struct:bit_stream_enc
byte_pos_skip	inc/global.h	/^  int     byte_pos_skip;      \/\/!< storage for position in bitstream;$/;"	m	struct:bit_stream_enc
bytes_in_picture	inc/global.h	/^  int bytes_in_picture;$/;"	m	struct:video_par
c1isdc	inc/cabac.h	/^static const byte c1isdc       [] = { 1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1};$/;"	v
c_imode	inc/rdopt.h	/^  short c_imode;$/;"	m	struct:__anon27
c_ipred_mode	inc/global.h	/^  char                c_ipred_mode;      \/\/!< chroma intra prediction mode$/;"	m	struct:macroblock_enc
c_ipred_mode	inc/global.h	/^  char    c_ipred_mode;$/;"	m	struct:rd_data
c_nzCbCr	inc/global.h	/^  int                 c_nzCbCr[3];$/;"	m	struct:macroblock_enc
cabac_encoding	inc/global.h	/^  int cabac_encoding;$/;"	m	struct:video_par
calcDifference	src/me_distortion.c	/^void calcDifference(imgpel **origImg, int ox, int oy, imgpel **predImg, int px, int py, int width, int height, short *diff)$/;"	f
calc_buffer	src/leaky_bucket.c	/^void calc_buffer(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
calc_picture_bits	src/image.c	/^static void calc_picture_bits(Picture *frame)$/;"	f	file:
cb_qp_index_offset	inc/params.h	/^  int cb_qp_index_offset;$/;"	m	struct:inp_par_enc
cbp	inc/global.h	/^  int                 cbp;$/;"	m	struct:macroblock_enc
cbp	inc/global.h	/^  int     cbp;$/;"	m	struct:rd_data
cbp	inc/rdopt.h	/^  int   cbp;$/;"	m	struct:__anon27
cbp	inc/rdopt.h	/^  int   cbp;$/;"	m	struct:rdo_structure
cbp8x8	inc/global.h	/^  int cbp8x8;$/;"	m	struct:rd_8x8_data
cbp_bits	inc/global.h	/^  int64               cbp_bits[3];$/;"	m	struct:macroblock_enc
cbp_bits	inc/rdopt_coding_state.h	/^  int64                 cbp_bits[3];$/;"	m	struct:coding_state
cbp_bits_8x8	inc/global.h	/^  int64               cbp_bits_8x8[3];$/;"	m	struct:macroblock_enc
cbp_bits_8x8	inc/rdopt_coding_state.h	/^  int64                 *cbp_bits_8x8;$/;"	m	struct:coding_state
cbp_blk	inc/global.h	/^  int64               cbp_blk ;    \/\/!< 1 bit set for every 4x4 block with coefs (not implemented for INTRA)$/;"	m	struct:macroblock_enc
cbp_blk	inc/global.h	/^  int64   cbp_blk;$/;"	m	struct:rd_data
cbp_blk8x8	inc/global.h	/^  int cbp_blk8x8;$/;"	m	struct:rd_8x8_data
cbp_blk_chroma	src/block.c	/^static const unsigned char cbp_blk_chroma[8][4] = {$/;"	v	file:
cbp_contexts	inc/global.h	/^  BiContextType  cbp_contexts [3][NUM_CBP_CTX];$/;"	m	struct:__anon2
cbp_linfo_inter	inc/global.h	/^  void (*cbp_linfo_inter)(int cbp, int dummy, int *len,int *info);    $/;"	m	struct:macroblock_enc
cbp_linfo_inter_normal	src/vlc.c	/^void cbp_linfo_inter_normal(int cbp, int dummy, int *len,int *info)$/;"	f
cbp_linfo_inter_other	src/vlc.c	/^void cbp_linfo_inter_other(int cbp, int dummy, int *len,int *info)$/;"	f
cbp_linfo_intra	inc/global.h	/^  void (*cbp_linfo_intra)(int cbp, int dummy, int *len,int *info);$/;"	m	struct:macroblock_enc
cbp_linfo_intra_normal	src/vlc.c	/^void cbp_linfo_intra_normal(int cbp, int dummy, int *len,int *info)$/;"	f
cbp_linfo_intra_other	src/vlc.c	/^void cbp_linfo_intra_other(int cbp, int dummy, int *len,int *info)$/;"	f
cc	inc/rtp.h	/^  unsigned int cc;         \/*!< CSRC count, normally 0 in the absence$/;"	m	struct:__anon24
cfgparams	inc/configfile.h	/^InputParameters cfgparams;$/;"	v
change_plane_JV	src/macroblock.c	/^void change_plane_JV( VideoParameters *p_Vid, int nplane )$/;"	f
changing_slice_group_idc	inc/sei.h	/^  unsigned char changing_slice_group_idc;$/;"	m	struct:__anon18
channel_type	inc/params.h	/^  int channel_type;$/;"	m	struct:inp_par_enc
check_for_SI16	src/mode_decision.c	/^static inline int check_for_SI16(int **lrec, int pix_x, int pix_y)$/;"	f	file:
check_num_ref	src/mbuffer.c	/^void check_num_ref(DecodedPictureBuffer *p_Dpb)$/;"	f
check_power_of_two	src/pred_struct.c	/^static inline int check_power_of_two( int number )$/;"	f	file:
check_zero	src/block.c	/^static inline int check_zero(int **mb_ores, int block_x)$/;"	f	file:
check_zero	src/transform8x8.c	/^static inline int check_zero(int **mb_ores, int block_x)$/;"	f	file:
checkref	inc/global.h	/^  short checkref;$/;"	m	struct:video_par
chroma_edge	inc/loop_filter.h	/^static const char chroma_edge[2][4][4] = \/\/[dir][edge][yuv_format]$/;"	v
chroma_format_idc	inc/mbuffer.h	/^  int         chroma_format_idc;$/;"	m	struct:storable_picture
chroma_log_weight_denom	inc/global.h	/^  short               chroma_log_weight_denom;$/;"	m	struct:slice
chroma_mask_mv_x	inc/global.h	/^  unsigned char chroma_mask_mv_x;$/;"	m	struct:coding_par
chroma_mask_mv_x	inc/global.h	/^  unsigned char chroma_mask_mv_x;$/;"	m	struct:video_par
chroma_mask_mv_x	inc/mbuffer.h	/^  int         chroma_mask_mv_x;$/;"	m	struct:storable_picture
chroma_mask_mv_y	inc/global.h	/^  unsigned char chroma_mask_mv_y;$/;"	m	struct:coding_par
chroma_mask_mv_y	inc/global.h	/^  unsigned char chroma_mask_mv_y;$/;"	m	struct:video_par
chroma_mask_mv_y	inc/mbuffer.h	/^  int         chroma_mask_mv_y;$/;"	m	struct:storable_picture
chroma_mc_setup	src/lencod.c	/^static void chroma_mc_setup(VideoParameters *p_Vid)$/;"	f	file:
chroma_prediction	src/mc_prediction.c	/^void chroma_prediction (Macroblock* currMB, \/\/ <-- Current Macroblock$/;"	f
chroma_prediction_4x4	src/mc_prediction.c	/^void chroma_prediction_4x4 (Macroblock* currMB,  \/\/ <-- Current Macroblock$/;"	f
chroma_prediction_otf	src/mc_prediction_otf.c	/^void chroma_prediction_otf ( Macroblock* currMB, \/\/ <-- Current Macroblock$/;"	f
chroma_qp_index_offset	inc/params.h	/^  int chroma_qp_index_offset;$/;"	m	struct:inp_par_enc
chroma_qp_offset	inc/global.h	/^  int chroma_qp_offset[2];      \/\/!< offset for qp for chroma [0-Cb, 1-Cr]$/;"	m	struct:video_par
chroma_residual_coding	inc/global.h	/^  void    (*chroma_residual_coding)             (Macroblock *currMB);$/;"	m	struct:slice
chroma_residual_coding	src/macroblock.c	/^void chroma_residual_coding (Macroblock *currMB)$/;"	f
chroma_residual_coding_si	src/macroblock.c	/^void chroma_residual_coding_si (Macroblock *currMB)$/;"	f
chroma_residual_coding_sp	src/macroblock.c	/^void chroma_residual_coding_sp (Macroblock *currMB)$/;"	f
chroma_shift_x	inc/global.h	/^  int chroma_shift_x;$/;"	m	struct:coding_par
chroma_shift_x	inc/global.h	/^  int chroma_shift_y, chroma_shift_x;$/;"	m	struct:video_par
chroma_shift_x	inc/mbuffer.h	/^  int         chroma_shift_x;$/;"	m	struct:storable_picture
chroma_shift_y	inc/global.h	/^  int chroma_shift_y, chroma_shift_x;$/;"	m	struct:video_par
chroma_shift_y	inc/global.h	/^  int chroma_shift_y; $/;"	m	struct:coding_par
chroma_shift_y	inc/mbuffer.h	/^  int         chroma_shift_y;$/;"	m	struct:storable_picture
chroma_vector_adjustment	inc/mbuffer.h	/^  int         chroma_vector_adjustment;$/;"	m	struct:storable_picture
cipr_contexts	inc/global.h	/^  BiContextType  cipr_contexts[NUM_CIPR_CTX];$/;"	m	struct:__anon2
clear_fast_full_search	src/me_fullfast.c	/^clear_fast_full_search (VideoParameters *p_Vid)$/;"	f
clear_gop_structure	src/explicit_gop.c	/^void clear_gop_structure(VideoParameters *p_Vid)$/;"	f
clear_motion_search_module	src/mv_search.c	/^clear_motion_search_module (VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
clear_picture	src/output.c	/^void clear_picture(VideoParameters *p_Vid, StorablePicture *p)$/;"	f
clear_process_image	src/lencod.c	/^void clear_process_image( VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
clear_rdopt	src/rdopt.c	/^void clear_rdopt (Slice *currSlice)$/;"	f
clear_sei_message	src/sei.c	/^void clear_sei_message(SEIParameters *p_SEI, int id)$/;"	f
clip_mv_range	src/conformance.c	/^void clip_mv_range(VideoParameters *p_Vid, int search_range, MotionVector *mv, int res)$/;"	f
clock_timestamp_flag	inc/sei.h	/^  Boolean clock_timestamp_flag[MAX_PIC_STRUCT_VALUE];$/;"	m	struct:__anon19
clone_storable_picture	src/mbuffer.c	/^static StorablePicture * clone_storable_picture( VideoParameters *p_Vid, StorablePicture *p_pic )$/;"	f	file:
cmp	src/rdoq_cavlc.c	/^int cmp(const void *arg1, const void *arg2)$/;"	f
cmp_cbp	inc/global.h	/^  int                 cmp_cbp[3];$/;"	m	struct:slice
cnt_dropped_flag	inc/sei.h	/^  Boolean cnt_dropped_flag;$/;"	m	struct:__anon19
cnt_nonz_8x8	inc/global.h	/^  int cnt_nonz_8x8;    $/;"	m	struct:rd_8x8_data
cod_counter	inc/global.h	/^  int cod_counter;             \/\/!< Current count of number of skipped macroblocks in a row$/;"	m	struct:video_par
code_a_picture	src/image.c	/^static void code_a_picture(VideoParameters *p_Vid, Picture *pic)$/;"	f	file:
code_a_plane	src/image.c	/^static void code_a_plane(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f	file:
coded_data_bit_depth	inc/sei.h	/^  unsigned char coded_data_bit_depth;$/;"	m	struct:__anon23
coded_frame	inc/mbuffer.h	/^  int         coded_frame;$/;"	m	struct:storable_picture
coded_pivot_value	inc/sei.h	/^  int coded_pivot_value[MAX_NUM_PIVOTS];$/;"	m	struct:__anon23
coding_info	inc/image.h	/^typedef struct coding_info {$/;"	s
coding_par	inc/global.h	/^typedef struct coding_par$/;"	s
coding_state	inc/rdopt_coding_state.h	/^struct coding_state {$/;"	s
coefAC8x8	inc/rdopt.h	/^  int   *****coefAC8x8;$/;"	m	struct:rdo_structure
coefAC8x8intra	inc/rdopt.h	/^  int   *****coefAC8x8intra;$/;"	m	struct:rdo_structure
coeff	inc/global.h	/^  int  coeff[64];$/;"	m	struct:slice
coeff_cost_cr	inc/global.h	/^  int coeff_cost_cr[MAX_PLANE];$/;"	m	struct:slice
coeff_ctr	inc/global.h	/^  int  coeff_ctr;$/;"	m	struct:slice
coeff_ctr	inc/rdoq.h	/^  int coeff_ctr;$/;"	m	struct:level_data_struct
cofAC	inc/global.h	/^  int     ****cofAC;$/;"	m	struct:rd_data
cofAC	inc/global.h	/^  int ****cofAC;               \/\/!< AC coefficients [8x8block][4x4block][level\/run][scan_pos]$/;"	m	struct:slice
cofAC	inc/rdopt.h	/^  int   ****cofAC;$/;"	m	struct:rdo_structure
cofAC4x4	inc/rdopt.h	/^  int     **cofAC4x4;$/;"	m	struct:rdo_structure
cofAC4x4CbCr	inc/rdopt.h	/^  int   **cofAC4x4CbCr[2];$/;"	m	struct:rdo_structure
cofAC4x4CbCrintern	inc/rdopt.h	/^  int   *****cofAC4x4CbCrintern;$/;"	m	struct:rdo_structure
cofAC4x4intern	inc/rdopt.h	/^  int   ****cofAC4x4intern;$/;"	m	struct:rdo_structure
cofAC8x8ts	inc/rdopt.h	/^  int   *****cofAC8x8ts;        \/\/ [plane][8x8block][4x4block][level\/run][scan_pos]$/;"	m	struct:rdo_structure
cofAC_new	inc/global.h	/^  int     *****cofAC_new;$/;"	m	struct:rd_data
cofAC_new	inc/global.h	/^  int *****cofAC_new;          \/\/!< AC coefficients [comp][8x8block][4x4block][level\/run][scan_pos]$/;"	m	struct:slice
cofDC	inc/global.h	/^  int     ***cofDC;$/;"	m	struct:rd_data
cofDC	inc/global.h	/^  int *** cofDC;               \/\/!< DC coefficients [yuv][level\/run][scan_pos]$/;"	m	struct:slice
cofDC	inc/rdopt.h	/^  int    ***cofDC; $/;"	m	struct:rdo_structure
colour_plane_id	inc/global.h	/^  char colour_plane_id;    \/\/!< colour_plane_id of the current coded slice (valid only when separate_colour_plane_flag is 1)$/;"	m	struct:video_par
colour_plane_id	inc/global.h	/^  int                 colour_plane_id;   \/\/!< colour plane id for 4:4:4 profile$/;"	m	struct:slice
colour_plane_id	inc/mbuffer.h	/^  int colour_plane_id;                     \/\/!< colour_plane_id to be used for 4:4:4 independent mode encoding$/;"	m	struct:storable_picture
combine_field	src/image.c	/^static void combine_field(VideoParameters *p_Vid)$/;"	f	file:
compare_mvs	inc/loop_filter.h	/^static inline int compare_mvs(const MotionVector *mv0, const MotionVector *mv1, int mvlimit)$/;"	f
computeBiPred1	inc/global.h	/^  distblk (*computeBiPred1[3])   (struct storable_picture *ref1, struct storable_picture *ref2, struct me_block*, distblk , MotionVector *, MotionVector *);$/;"	m	struct:video_par
computeBiPred2	inc/global.h	/^  distblk (*computeBiPred2[3])   (struct storable_picture *ref1, struct storable_picture *ref2, struct me_block*, distblk , MotionVector *, MotionVector *);$/;"	m	struct:video_par
computeBiPredFPel	inc/global.h	/^  distblk (*computeBiPredFPel)  (struct storable_picture *, struct storable_picture *, struct me_block *, distblk , MotionVector *, MotionVector *);$/;"	m	struct:me_block
computeBiPredHPel	inc/global.h	/^  distblk (*computeBiPredHPel)  (struct storable_picture *, struct storable_picture *, struct me_block *, distblk , MotionVector *, MotionVector *);$/;"	m	struct:me_block
computeBiPredQPel	inc/global.h	/^  distblk (*computeBiPredQPel)  (struct storable_picture *, struct storable_picture *, struct me_block *, distblk , MotionVector *, MotionVector *);$/;"	m	struct:me_block
computeBiPredSAD1	src/me_distortion.c	/^distblk computeBiPredSAD1(StorablePicture *ref1, $/;"	f
computeBiPredSAD1_otf	src/me_distortion_otf.c	/^distblk computeBiPredSAD1_otf(StorablePicture *ref1, $/;"	f
computeBiPredSAD2	src/me_distortion.c	/^distblk computeBiPredSAD2(StorablePicture *ref1, $/;"	f
computeBiPredSAD2_otf	src/me_distortion_otf.c	/^distblk computeBiPredSAD2_otf(StorablePicture *ref1, $/;"	f
computeBiPredSATD1	src/me_distortion.c	/^distblk computeBiPredSATD1(StorablePicture *ref1, $/;"	f
computeBiPredSATD1_otf	src/me_distortion_otf.c	/^distblk computeBiPredSATD1_otf(StorablePicture *ref1, $/;"	f
computeBiPredSATD2	src/me_distortion.c	/^distblk computeBiPredSATD2(StorablePicture *ref1, $/;"	f
computeBiPredSATD2_otf	src/me_distortion_otf.c	/^distblk computeBiPredSATD2_otf(StorablePicture *ref1, $/;"	f
computeBiPredSSE1	src/me_distortion.c	/^distblk computeBiPredSSE1(StorablePicture *ref1, $/;"	f
computeBiPredSSE1_otf	src/me_distortion_otf.c	/^distblk computeBiPredSSE1_otf(StorablePicture *ref1, $/;"	f
computeBiPredSSE2	src/me_distortion.c	/^distblk computeBiPredSSE2(StorablePicture *ref1, $/;"	f
computeBiPredSSE2_otf	src/me_distortion_otf.c	/^distblk computeBiPredSSE2_otf(StorablePicture *ref1, $/;"	f
computePredFPel	inc/global.h	/^  distblk (*computePredFPel)    (struct storable_picture *, struct me_block *, distblk , MotionVector * );$/;"	m	struct:me_block
computePredHPel	inc/global.h	/^  distblk (*computePredHPel)    (struct storable_picture *, struct me_block *, distblk , MotionVector * );$/;"	m	struct:me_block
computePredQPel	inc/global.h	/^  distblk (*computePredQPel)    (struct storable_picture *, struct me_block *, distblk , MotionVector * );$/;"	m	struct:me_block
computeSAD	src/me_distortion.c	/^distblk computeSAD(StorablePicture *ref1,$/;"	f
computeSADWP	src/me_distortion.c	/^distblk computeSADWP(StorablePicture *ref1,$/;"	f
computeSADWP_otf	src/me_distortion_otf.c	/^distblk computeSADWP_otf(StorablePicture *ref1,$/;"	f
computeSAD_otf	src/me_distortion_otf.c	/^distblk computeSAD_otf(StorablePicture *ref1,$/;"	f
computeSATD	src/me_distortion.c	/^distblk computeSATD(StorablePicture *ref1,$/;"	f
computeSATDWP	src/me_distortion.c	/^distblk computeSATDWP(StorablePicture *ref1,$/;"	f
computeSATDWP_otf	src/me_distortion_otf.c	/^distblk computeSATDWP_otf(StorablePicture *ref1,$/;"	f
computeSATD_otf	src/me_distortion_otf.c	/^distblk computeSATD_otf(StorablePicture *ref1,$/;"	f
computeSSE	src/me_distortion.c	/^distblk computeSSE(StorablePicture *ref1,$/;"	f
computeSSEWP	src/me_distortion.c	/^distblk computeSSEWP(StorablePicture *ref1,$/;"	f
computeSSEWP_otf	src/me_distortion_otf.c	/^distblk computeSSEWP_otf(StorablePicture *ref1,$/;"	f
computeSSE_otf	src/me_distortion_otf.c	/^distblk computeSSE_otf(StorablePicture *ref1,$/;"	f
computeUniPred	inc/global.h	/^  distblk (*computeUniPred[6])   (struct storable_picture *ref1, struct me_block *, distblk , MotionVector * );$/;"	m	struct:video_par
compute_SSE	src/md_distortion.c	/^int64 compute_SSE(imgpel **imgRef, imgpel **imgSrc, int xRef, int xSrc, int ySize, int xSize)$/;"	f
compute_SSE16x16	src/md_distortion.c	/^distblk compute_SSE16x16(imgpel **imgRef, imgpel **imgSrc, int xRef, int xSrc)$/;"	f
compute_SSE16x16_thres	src/md_distortion.c	/^distblk compute_SSE16x16_thres(imgpel **imgRef, imgpel **imgSrc, int xRef, int xSrc, distblk min_cost)$/;"	f
compute_SSE4x4	src/md_distortion.c	/^distblk compute_SSE4x4(imgpel **imgRef, imgpel **imgSrc, int xRef, int xSrc)$/;"	f
compute_SSE8x8	src/md_distortion.c	/^distblk compute_SSE8x8(imgpel **imgRef, imgpel **imgSrc, int xRef, int xSrc)$/;"	f
compute_SSE_cr	src/md_distortion.c	/^distblk compute_SSE_cr(imgpel **imgRef, imgpel **imgSrc, int xRef, int xSrc, int ySize, int xSize)$/;"	f
compute_colocated	src/mbuffer.c	/^void compute_colocated(Slice *currSlice, StorablePicture **listX[6])$/;"	f
compute_comp4x4_cost	src/rdopt.c	/^static distblk compute_comp4x4_cost(VideoParameters *p_Vid, imgpel **cur_img, imgpel **prd_img, int pic_opix_x, distblk min_cost)$/;"	f	file:
compute_comp8x8_cost	src/transform8x8.c	/^distblk compute_comp8x8_cost(VideoParameters *p_Vid, imgpel **cur_img, imgpel **mpr8x8, int pic_opix_x, distblk min_cost)$/;"	f
compute_cost4x4	inc/global.h	/^  distblk (*compute_cost4x4)                    (struct video_par *p_Vid, imgpel **cur_img, imgpel **prd_img, int pic_opix_x, distblk min_cost);$/;"	m	struct:slice
compute_cost8x8	inc/global.h	/^  distblk (*compute_cost8x8)                    (struct video_par *p_Vid, imgpel **cur_img, imgpel **prd_img, int pic_opix_x, distblk min_cost);$/;"	m	struct:slice
compute_distortion	src/img_distortion.c	/^void compute_distortion(VideoParameters *p_Vid, ImageData *imgData)$/;"	f
compute_luminance_component	src/img_dist_ms_ssim.c	/^float compute_luminance_component (VideoParameters *p_Vid, InputParameters *p_Inp, imgpel **refImg, imgpel **encImg, int height, int width, int win_height, int win_width, int comp)$/;"	f
compute_mode_RD_cost	src/mode_decision.c	/^void compute_mode_RD_cost(Macroblock *currMB,$/;"	f
compute_ms_ssim	src/img_dist_ms_ssim.c	/^float compute_ms_ssim(VideoParameters *p_Vid, InputParameters *p_Inp, imgpel **refImg, imgpel **encImg, int height, int width, int win_height, int win_width, int comp)$/;"	f
compute_offset	src/wp_mciter.c	/^void compute_offset(Slice *currSlice)$/;"	f
compute_ref_cost	src/mode_decision.c	/^static inline distblk compute_ref_cost(Slice *currSlice, RD_PARAMS *enc_mb, int ref, int list)$/;"	f	file:
compute_sad4x4_cost	src/rdopt.c	/^distblk compute_sad4x4_cost(VideoParameters *p_Vid, imgpel **cur_img, imgpel **prd_img, int pic_opix_x, distblk min_cost)$/;"	f
compute_sad8x8_cost	src/transform8x8.c	/^distblk compute_sad8x8_cost(VideoParameters *p_Vid, imgpel **cur_img, imgpel **mpr8x8, int pic_opix_x, distblk min_cost)$/;"	f
compute_satd4x4_cost	src/rdopt.c	/^distblk compute_satd4x4_cost(VideoParameters *p_Vid, imgpel **cur_img, imgpel **prd_img, int pic_opix_x, distblk min_cost)$/;"	f
compute_satd8x8_cost	src/transform8x8.c	/^distblk compute_satd8x8_cost(VideoParameters *p_Vid, imgpel **cur_img, imgpel **mpr8x8, int pic_opix_x, distblk min_cost)$/;"	f
compute_scaled	inc/me_epzs_common.h	/^static inline void compute_scaled(MotionVector *MotionVector0, MotionVector *MotionVector1, int tempmv_scale[2], const MotionVector *mv, int invmv_precision)$/;"	f
compute_sse4x4_cost	src/rdopt.c	/^distblk compute_sse4x4_cost(VideoParameters *p_Vid, imgpel **cur_img, imgpel **prd_img, int pic_opix_x, distblk min_cost)$/;"	f
compute_sse8x8_cost	src/transform8x8.c	/^distblk compute_sse8x8_cost(VideoParameters *p_Vid, imgpel **cur_img, imgpel **mpr8x8, int pic_opix_x, distblk min_cost)$/;"	f
compute_ssim	src/img_dist_ssim.c	/^float compute_ssim (VideoParameters *p_Vid, InputParameters *p_Inp, imgpel **refImg, imgpel **encImg, int height, int width, int win_height, int win_width, int comp)$/;"	f
compute_structural_components	src/img_dist_ms_ssim.c	/^float compute_structural_components (VideoParameters *p_Vid, InputParameters *p_Inp, imgpel **refImg, imgpel **encImg, int height, int width, int win_height, int win_width, int comp)$/;"	f
consecutive_non_reference_pictures	inc/global.h	/^  int consecutive_non_reference_pictures; \/\/ POC200301$/;"	m	struct:video_par
content_interpretation_type	inc/sei.h	/^  unsigned char content_interpretation_type;$/;"	m	struct:__anon21
context	inc/global.h	/^  int                 context;        \/\/!< CABAC context$/;"	m	struct:syntaxelement_enc
context_init_method	inc/params.h	/^  int context_init_method;$/;"	m	struct:inp_par_enc
copy_4x4block	inc/rdopt.h	/^static inline void copy_4x4block(imgpel **oblock, imgpel **iblock, int o_xoffset, int i_xoffset)$/;"	f
copy_conceal_mb	src/errdo_dist_mhyp.c	/^static void copy_conceal_mb(Macroblock* currMB, StorablePicture *enc_pic, int decoder, int mb_error, StorablePicture* refPic)$/;"	f	file:
copy_conceal_picture	src/errdo_dist_mhyp.c	/^void copy_conceal_picture(VideoParameters *p_Vid, StorablePicture *enc_pic, int decoder)$/;"	f
copy_frame_mvc	src/pred_struct.c	/^static void copy_frame_mvc( InputParameters *p_Inp, FrameUnitStruct *p_src, FrameUnitStruct *p_dst, int num_slices, int view_id )$/;"	f	file:
copy_image_data	src/md_common.c	/^void copy_image_data(imgpel  **imgBuf1, imgpel  **imgBuf2, int off1, int off2, int width, int height)$/;"	f
copy_image_data_16x16	src/md_common.c	/^void copy_image_data_16x16(imgpel  **imgBuf1, imgpel  **imgBuf2, int off1, int off2)$/;"	f
copy_image_data_4x4	src/md_common.c	/^void copy_image_data_4x4(imgpel  **imgBuf1, imgpel  **imgBuf2, int off1, int off2)$/;"	f
copy_image_data_8x8	src/md_common.c	/^void copy_image_data_8x8(imgpel  **imgBuf1, imgpel  **imgBuf2, int off1, int off2)$/;"	f
copy_motion_vectors_MB	src/rdopt.c	/^static inline void copy_motion_vectors_MB (Slice *currSlice, RD_DATA *rdopt)$/;"	f	file:
copy_params	src/image.c	/^void copy_params(VideoParameters *p_Vid, StorablePicture *enc_picture, seq_parameter_set_rbsp_t *active_sps)$/;"	f
copy_part_info	src/mode_decision_P8x8.c	/^void copy_part_info(Info8x8 *b8x8, Info8x8 *part)$/;"	f
copy_rddata_trellis	src/rdoq.c	/^void copy_rddata_trellis (Macroblock *currMB, RD_DATA *dest, RD_DATA *src)$/;"	f
copy_rdopt_data	src/rdopt.c	/^void copy_rdopt_data (Macroblock *currMB)$/;"	f
copy_storable_picture	src/mbuffer.c	/^static void copy_storable_picture(VideoParameters *p_Vid, StorablePicture *s, StorablePicture *d)$/;"	f	file:
copyblock_sp	src/block.c	/^void copyblock_sp(Macroblock *currMB, ColorPlane pl, int block_x,int block_y)$/;"	f
cost	inc/global.h	/^  int              cost;           \/\/!< Rate Distortion cost$/;"	m	struct:me_block
cost	inc/rdopt.h	/^  distblk  cost;$/;"	m	struct:__anon27
count	inc/global.h	/^  unsigned long  count;$/;"	m	struct:bi_context_type
counting_type	inc/sei.h	/^  int counting_type;$/;"	m	struct:__anon19
cpb_removal_delay	inc/sei.h	/^  int cpb_removal_delay;$/;"	m	struct:__anon19
cr_cbp	inc/global.h	/^  int                 cr_cbp[3];        \/\/ 444. Should be added in an external structure$/;"	m	struct:macroblock_enc
cr_padded_size_x	inc/global.h	/^  int cr_padded_size_x;$/;"	m	struct:coding_par
cr_padded_size_x	inc/global.h	/^  int cr_padded_size_x;$/;"	m	struct:video_par
cr_padded_size_x2	inc/global.h	/^  int cr_padded_size_x2;$/;"	m	struct:coding_par
cr_padded_size_x2	inc/global.h	/^  int cr_padded_size_x2;$/;"	m	struct:video_par
cr_padded_size_x4	inc/global.h	/^  int cr_padded_size_x4;$/;"	m	struct:coding_par
cr_padded_size_x4	inc/global.h	/^  int cr_padded_size_x4;$/;"	m	struct:video_par
cr_padded_size_x_m8	inc/global.h	/^  int cr_padded_size_x_m8;$/;"	m	struct:coding_par
cr_padded_size_x_m8	inc/global.h	/^  int cr_padded_size_x_m8;$/;"	m	struct:video_par
cr_qp_index_offset	inc/params.h	/^  int cr_qp_index_offset;$/;"	m	struct:inp_par_enc
cra_ref_management_frame_pic	src/mmco.c	/^void cra_ref_management_frame_pic(DecodedPictureBuffer *p_Dpb, int current_pic_num)$/;"	f
crcb	inc/global.h	/^  imgpel ****crcb[2]; \/\/!< component 2 (usually U\/V, Y\/Z, or G\/B)$/;"	m	struct:__anon6
create_RGB_memory	src/cconv_yuv2rgb.c	/^int create_RGB_memory(VideoParameters *p_Vid)$/;"	f
create_coding_state	src/rdopt_coding_state.c	/^CSobj *create_coding_state (InputParameters *p_Inp)$/;"	f
create_context_memory	src/context_ini.c	/^void create_context_memory (VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
create_contexts_MotionInfo	src/cabac.c	/^MotionInfoContexts* create_contexts_MotionInfo(void)$/;"	f
create_contexts_TextureInfo	src/cabac.c	/^TextureInfoContexts* create_contexts_TextureInfo(void)$/;"	f
create_slice_nalus	src/slice.c	/^void create_slice_nalus(Slice *currSlice, int is_bottom)$/;"	f
cs_b8	inc/rdopt.h	/^  CSobj *cs_b8;$/;"	m	struct:rdo_structure
cs_cm	inc/rdopt.h	/^  CSobj *cs_cm;$/;"	m	struct:rdo_structure
cs_mb	inc/rdopt.h	/^  CSobj *cs_mb;$/;"	m	struct:rdo_structure
cs_tmp	inc/rdopt.h	/^  CSobj *cs_tmp;$/;"	m	struct:rdo_structure
ct_type	inc/sei.h	/^  int ct_type;$/;"	m	struct:__anon19
cur_bits	inc/global.h	/^  int cur_bits;$/;"	m	struct:prev_coding_stats
cur_cbp_blk	inc/global.h	/^  int64 cur_cbp_blk[MAX_PLANE];$/;"	m	struct:slice
curr_cbp	inc/global.h	/^  int                 curr_cbp[2];$/;"	m	struct:slice
curr_frm_idx	inc/global.h	/^  int curr_frm_idx;           \/\/!< frame we wish to code in coding order (points also to p_frm)$/;"	m	struct:video_par
curr_mb_field	inc/global.h	/^  short  curr_mb_field;$/;"	m	struct:rd_params
curr_num_to_populate	inc/pred_struct_types.h	/^  int curr_num_to_populate; \/\/ number of future frames in coding order to populate with each iteration of function populate_frm_struct (note that there are cases that fewer than "num_to_populate" frames may be populated$/;"	m	struct:seq_struct
curr_wp_rd_pass	inc/wp_mcprec.h	/^  WPXPass          *curr_wp_rd_pass;$/;"	m	struct:wpx_object
currentPicture	inc/global.h	/^  Picture       *currentPicture; \/\/!< The coded picture currently in the works (typically p_frame_pic, p_Vid->field_pic[0], or p_Vid->field_pic[1])$/;"	m	struct:video_par
currentSlice	inc/global.h	/^  struct slice  *currentSlice;                                \/\/!< pointer to current Slice data struct$/;"	m	struct:video_par	typeref:struct:video_par::slice
current_frame_is_frame0_flag	inc/sei.h	/^  Boolean       current_frame_is_frame0_flag;$/;"	m	struct:__anon21
current_mb_nr	inc/global.h	/^  int current_mb_nr;$/;"	m	struct:video_par
current_slice_nr	inc/global.h	/^  short current_slice_nr;$/;"	m	struct:video_par
data	inc/global.h	/^  imgpel **data[3];        \/\/!< ImageStructure pixel data$/;"	m	struct:image_structure
data	inc/sei.h	/^  Bitstream *data;$/;"	m	struct:__anon15
data	inc/sei.h	/^  Bitstream *data;$/;"	m	struct:__anon16
data	inc/sei.h	/^  Bitstream *data;$/;"	m	struct:__anon17
data	inc/sei.h	/^  Bitstream *data;$/;"	m	struct:__anon18
data	inc/sei.h	/^  Bitstream *data;$/;"	m	struct:__anon19
data	inc/sei.h	/^  Bitstream *data;$/;"	m	struct:__anon20
data	inc/sei.h	/^  Bitstream *data;$/;"	m	struct:__anon21
data	inc/sei.h	/^  Bitstream *data;$/;"	m	struct:__anon22
data	inc/sei.h	/^  Bitstream *data;$/;"	m	struct:__anon23
data	inc/sei.h	/^  Bitstream *data;$/;"	m	struct:__anon8
data	inc/sei.h	/^  Bitstream* data;$/;"	m	struct:__anon10
data	inc/sei.h	/^  Bitstream* data;$/;"	m	struct:__anon11
data	inc/sei.h	/^  Bitstream* data;$/;"	m	struct:__anon13
data	inc/sei.h	/^  Bitstream* data;$/;"	m	struct:__anon14
data	inc/sei.h	/^  byte data[4*MAX_LAYER_NUMBER];$/;"	m	struct:__anon12
data	inc/sei.h	/^  byte* data;$/;"	m	struct:__anon9
datapartition_enc	inc/global.h	/^typedef struct datapartition_enc$/;"	s
dc_pred_value	inc/global.h	/^  uint32 dc_pred_value;                 \/\/!< DC prediction value for current component$/;"	m	struct:video_par
dc_pred_value_comp	inc/global.h	/^  uint32 dc_pred_value_comp[MAX_PLANE]; \/\/!< component value for DC prediction (depends on component pel bit depth)$/;"	m	struct:coding_par
dc_pred_value_comp	inc/global.h	/^  uint32 dc_pred_value_comp[MAX_PLANE]; \/\/!< component value for DC prediction (depends on component pel bit depth)$/;"	m	struct:video_par
dcost	inc/rdopt.h	/^  double dcost;$/;"	m	struct:__anon27
de	inc/params.h	/^  int de;     \/\/!< the algorithm to estimate the distortion in the decoder$/;"	m	struct:inp_par_enc
de_mem	inc/mbuffer.h	/^  Dist_Estm * de_mem; $/;"	m	struct:storable_picture
deblock	inc/pred_struct_types.h	/^  int deblock;$/;"	m	struct:slice_struct
deblocking	inc/explicit_seq.h	/^  int deblocking;$/;"	m	struct:__anon26
dec_imgUV	inc/errdo.h	/^  imgpel **** dec_imgUV;             \/\/!< Decoded U and V components in multiple hypothetical decoders$/;"	m	struct:distortion_estimation
dec_imgY	inc/errdo.h	/^  imgpel ***  dec_imgY;              \/\/!< Decoded Y component in multiple hypothetical decoders$/;"	m	struct:distortion_estimation
dec_mbY_best	inc/errdo.h	/^  imgpel ***dec_mbY_best;            \/\/!< Best reconstructed macroblock pixel values$/;"	m	struct:decoders
dec_mbY_best8x8	inc/errdo.h	/^  imgpel ****dec_mbY_best8x8;        \/\/!< Best reconstructed 8x8 mode pixel values$/;"	m	struct:decoders
dec_mb_pred	inc/errdo.h	/^  imgpel ***dec_mb_pred;             \/\/!< Predicted pixel values for macroblock$/;"	m	struct:decoders
dec_mb_pred_best8x8	inc/errdo.h	/^  imgpel ****dec_mb_pred_best8x8;    \/\/!< Predicted pixel values for best 8x8 modes$/;"	m	struct:decoders
dec_ref_pic_marking	src/header.c	/^int dec_ref_pic_marking(Bitstream *bitstream, DecRefPicMarking_t *p_drpm, int idr_flag, int no_output_of_prior_pics_flag, int long_term_reference_flag )$/;"	f
dec_ref_pic_marking_buffer	inc/global.h	/^  DecRefPicMarking_t *dec_ref_pic_marking_buffer;$/;"	m	struct:video_par
dec_ref_pic_marking_buffer_saved	inc/sei.h	/^  DecRefPicMarking_t *dec_ref_pic_marking_buffer_saved;$/;"	m	struct:__anon20
decide_fld_frame	src/image.c	/^static byte decide_fld_frame(float snr_frame_Y, float snr_field_Y, int bit_field, int bit_frame, double lambda_picture)$/;"	f	file:
decode_one_b8block	src/errdo_dist_mhyp.c	/^void decode_one_b8block (Macroblock* currMB, StorablePicture *enc_pic, int decoder, int block8x8, short mv_mode, int pred_dir) $/;"	f
decode_one_mb	src/errdo_dist_mhyp.c	/^void decode_one_mb (Macroblock* currMB, StorablePicture *enc_pic, int decoder)$/;"	f
decoded_picture_buffer	inc/mbuffer.h	/^typedef struct decoded_picture_buffer$/;"	s
decoders	inc/errdo.h	/^struct decoders$/;"	s
default_pic_num	inc/global.h	/^  int default_pic_num[2][MAX_REFERENCE_PICTURES];$/;"	m	struct:slice
default_view_id	inc/global.h	/^  int default_view_id[2][MAX_REFERENCE_PICTURES];$/;"	m	struct:slice
delete_RGB_memory	src/cconv_yuv2rgb.c	/^void delete_RGB_memory(VideoParameters *p_Vid)$/;"	f
delete_coding_state	src/rdopt_coding_state.c	/^void delete_coding_state (CSobj *cs)$/;"	f
delete_contexts_MotionInfo	src/cabac.c	/^void delete_contexts_MotionInfo(MotionInfoContexts *enco_ctx)$/;"	f
delete_contexts_TextureInfo	src/cabac.c	/^void delete_contexts_TextureInfo(TextureInfoContexts *enco_ctx)$/;"	f
deltaQPTable	inc/global.h	/^  int     deltaQPTable[9]; $/;"	m	struct:slice
delta_pic_order_always_zero_flag	inc/global.h	/^  Boolean      delta_pic_order_always_zero_flag;$/;"	m	struct:video_par
delta_pic_order_cnt	inc/global.h	/^  int          delta_pic_order_cnt[2];$/;"	m	struct:video_par
delta_pic_order_cnt_bottom	inc/global.h	/^  int          delta_pic_order_cnt_bottom;$/;"	m	struct:video_par
delta_qp_contexts	inc/global.h	/^  BiContextType  delta_qp_contexts   [NUM_DELTA_QP_CTX];$/;"	m	struct:__anon2
dequant_coef	src/q_matrix.c	/^const int dequant_coef[6][4][4] = {$/;"	v
dequant_coef8	src/q_matrix.c	/^static const int dequant_coef8[6][8][8] =$/;"	v	file:
determine_prediction_list	src/mode_decision.c	/^void determine_prediction_list( distblk bmcost[5], Info8x8 *best, distblk *cost)$/;"	f
difference_of_pic_nums_minus1	inc/global.h	/^  int difference_of_pic_nums_minus1;$/;"	m	struct:DecRefPicMarking_s
diffy	inc/global.h	/^  int diffy[16][16];$/;"	m	struct:slice
directInferenceFlag	inc/params.h	/^  int directInferenceFlag;              \/\/!< Direct Mode Inference Flag$/;"	m	struct:inp_par_enc
direct_mode	inc/global.h	/^  int direct_mode;$/;"	m	struct:prev_coding_stats
direct_output	src/output.c	/^void direct_output(VideoParameters *p_Vid, StorablePicture *p, FrameFormat *output, int p_out)$/;"	f
direct_output_paff	src/output.c	/^void direct_output_paff(VideoParameters *p_Vid, StorablePicture *p, FrameFormat *output, int p_out)$/;"	f
direct_pdir	inc/global.h	/^  char    **direct_pdir;               \/\/!< direct mode direction buffer$/;"	m	struct:slice
direct_ref_idx	inc/global.h	/^  char    ***direct_ref_idx;           \/\/!< direct mode reference index buffer$/;"	m	struct:slice
direct_spatial_mv_pred_flag	inc/global.h	/^  char                direct_spatial_mv_pred_flag;              \/\/!< Direct Mode type to be used (0: Temporal, 1: Spatial)$/;"	m	struct:slice
direct_spatial_mv_pred_flag	inc/global.h	/^  char direct_spatial_mv_pred_flag;              \/\/!< Direct Mode type to be used (0: Temporal, 1: Spatial)$/;"	m	struct:video_par
direct_spatial_mv_pred_flag	inc/params.h	/^  int direct_spatial_mv_pred_flag;      \/\/!< Direct Mode type to be used (0: Temporal, 1: Spatial)$/;"	m	struct:inp_par_enc
discontinuity_flag	inc/sei.h	/^  Boolean discontinuity_flag;$/;"	m	struct:__anon19
disp_offset	inc/pred_struct_types.h	/^  int disp_offset;$/;"	m	struct:pred_struct_frm
display_no	inc/global.h	/^  int display_no;         \/\/! GOP Display order$/;"	m	struct:__anon5
dist	inc/global.h	/^  distblk dist;$/;"	m	struct:__anon4
distI16x16	inc/global.h	/^  distblk (*distI16x16)                         (Macroblock *currMB, imgpel **img_org, imgpel **pred_img, distblk min_cost);$/;"	m	struct:slice
distI16x16_sad	src/intra16x16.c	/^distblk distI16x16_sad(Macroblock *currMB, imgpel **img_org, imgpel **pred_img, distblk min_cost)$/;"	f
distI16x16_satd	src/intra16x16.c	/^distblk distI16x16_satd(Macroblock *currMB, imgpel **img_org, imgpel **pred_img, distblk min_cost)$/;"	f
distI16x16_sse	src/intra16x16.c	/^distblk distI16x16_sse(Macroblock *currMB, imgpel **img_org, imgpel **pred_img, distblk min_cost)$/;"	f
dist_scale_f	inc/mv_search.h	20;"	d
dist_scale_f	inc/mv_search.h	22;"	d
distblkminarray	src/mode_decision.c	/^distblk distblkminarray ( distblk arr[], int size, int *minind )$/;"	f
disthres	inc/global.h	/^  int                 disthres;$/;"	m	struct:slice
disthres	inc/params.h	/^  int disthres;$/;"	m	struct:inp_par_enc
distortion	inc/global.h	/^  DistMetric distortion;$/;"	m	struct:picture
distortion	inc/me_epzs_common.h	/^  distblk ***distortion;  \/\/!< Array for storing SAD Values$/;"	m	struct:epzs_params
distortion4x4	inc/global.h	/^  distblk  (*distortion4x4)(short*, distblk);$/;"	m	struct:video_par
distortion4x4SAD	src/me_distortion.c	/^distblk distortion4x4SAD(short* diff, distblk min_dist)$/;"	f
distortion4x4SATD	src/me_distortion.c	/^distblk distortion4x4SATD(short* diff, distblk min_dist)$/;"	f
distortion4x4SSE	src/me_distortion.c	/^distblk distortion4x4SSE(short* diff, distblk min_dist)$/;"	f
distortion8x8	inc/global.h	/^  distblk  (*distortion8x8)(short*, distblk);$/;"	m	struct:video_par
distortion8x8SAD	src/me_distortion.c	/^distblk distortion8x8SAD(short* diff, distblk min_dist)$/;"	f
distortion8x8SADthres	src/me_distortion.c	/^distblk distortion8x8SADthres(short* diff, distblk min_cost)$/;"	f
distortion8x8SATD	src/me_distortion.c	/^distblk distortion8x8SATD(short* diff, distblk min_dist)$/;"	f
distortion8x8SSE	src/me_distortion.c	/^distblk distortion8x8SSE(short* diff, distblk min_dist)$/;"	f
distortionSSE	src/md_distortion.c	/^distblk distortionSSE(Macroblock *currMB) $/;"	f
distortion_estimation	inc/errdo.h	/^struct distortion_estimation$/;"	s
distortion_fld	src/image.c	/^static void distortion_fld (VideoParameters *p_Vid, InputParameters *p_Inp, Picture *field_pic, ImageData *imgData)$/;"	f	file:
distortion_hpel	inc/me_epzs_common.h	/^  distblk ***distortion_hpel;  \/\/!< Array for storing SAD Values$/;"	m	struct:epzs_params
distortion_metric	inc/global.h	/^typedef struct distortion_metric$/;"	s
distortion_params	inc/global.h	/^typedef struct distortion_params$/;"	s
downsample	src/img_dist_ms_ssim.c	/^void downsample(imgpel** src, imgpel** out, int height, int width)$/;"	f
dpb_combine_field	src/mbuffer.c	/^void dpb_combine_field(VideoParameters *p_Vid, FrameStore *fs)$/;"	f
dpb_combine_field_yuv	src/mbuffer.c	/^void dpb_combine_field_yuv(VideoParameters *p_Vid, FrameStore *fs)$/;"	f
dpb_layer_id	inc/global.h	/^  int dpb_layer_id;$/;"	m	struct:video_par
dpb_output_delay	inc/sei.h	/^  int dpb_output_delay;$/;"	m	struct:__anon19
dpb_split_field	src/mbuffer.c	/^void dpb_split_field(VideoParameters *p_Vid, FrameStore *fs)$/;"	f
drpm_repetition_information_struct	inc/sei.h	/^} drpm_repetition_information_struct;$/;"	t	typeref:struct:__anon20
dsum	inc/mbuffer.h	/^  double dsum[3];$/;"	m	struct:picture_stats
dummy_slice_too_big	src/image.c	/^Boolean dummy_slice_too_big (int bits_slice)$/;"	f
dump_dpb	src/mbuffer.c	/^void dump_dpb(DecodedPictureBuffer *p_Dpb)$/;"	f
duration_flag	inc/sei.h	/^  int duration_flag;$/;"	m	struct:__anon13
dvar	inc/mbuffer.h	/^  double dvar[3];$/;"	m	struct:picture_stats
edge_loop_chroma_hor_MBAff	src/loop_filter_mbaff.c	/^static void edge_loop_chroma_hor_MBAff(imgpel** Img, byte Strength[16], Macroblock *MbQ, int edge, int width, int uv)$/;"	f	file:
edge_loop_chroma_ver_MBAff	src/loop_filter_mbaff.c	/^static void edge_loop_chroma_ver_MBAff(imgpel** Img, byte Strength[16], Macroblock *MbQ, int edge, int uv)$/;"	f	file:
edge_loop_luma_hor_MBAff	src/loop_filter_mbaff.c	/^static void edge_loop_luma_hor_MBAff(ColorPlane pl, imgpel** Img, byte Strength[16], Macroblock *MbQ, int edge, int width)$/;"	f	file:
edge_loop_luma_ver_MBAff	src/loop_filter_mbaff.c	/^static void edge_loop_luma_ver_MBAff(ColorPlane pl, imgpel** Img, byte Strength[16], Macroblock *MbQ, int edge)$/;"	f	file:
ediamond	inc/global.h	/^  struct epzs_struct *ediamond;$/;"	m	struct:video_par	typeref:struct:video_par::epzs_struct
ee_cabac	inc/global.h	/^  EncodingEnvironment ee_cabac;$/;"	m	struct:datapartition_enc
ee_recode	inc/global.h	/^  EncodingEnvironment ee_recode;$/;"	m	struct:datapartition_enc
enable_32_pulldown	inc/params.h	/^  int enable_32_pulldown;$/;"	m	struct:inp_par_enc
enable_inter_view_flag	inc/params.h	/^  int enable_inter_view_flag;           \/\/!< Enables inter_view_flag (allows pictures that are to be used for inter-view only prediction)$/;"	m	struct:inp_par_enc
enc_buf_curr	inc/rc_types.h	/^  int    enc_buf_curr;$/;"	m	struct:rc_quadratic
enc_field_picture	inc/global.h	/^  struct storable_picture       **enc_field_picture;$/;"	m	struct:video_par	typeref:struct:video_par::storable_picture
enc_frame_picture	inc/global.h	/^  struct storable_picture       **enc_frame_picture;$/;"	m	struct:video_par	typeref:struct:video_par::storable_picture
enc_frame_picture_JV	inc/global.h	/^  struct storable_picture       *enc_frame_picture_JV[MAX_PLANE];  \/\/!< enc_frame to be used during 4:4:4 independent mode encoding$/;"	m	struct:video_par	typeref:struct:video_par::storable_picture
enc_picture	inc/global.h	/^  struct storable_picture       *enc_picture;$/;"	m	struct:video_par	typeref:struct:video_par::storable_picture
encenv	inc/rdopt_coding_state.h	/^  EncodingEnvironment  *encenv;$/;"	m	struct:coding_state
encode_one_frame	src/image.c	/^int encode_one_frame (VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
encode_one_macroblock	inc/global.h	/^  void    (*encode_one_macroblock)              (Macroblock *currMB);$/;"	m	struct:slice
encode_one_macroblock_high	src/md_high.c	/^void encode_one_macroblock_high (Macroblock *currMB)$/;"	f
encode_one_macroblock_highfast	src/md_highfast.c	/^void encode_one_macroblock_highfast (Macroblock *currMB)$/;"	f
encode_one_macroblock_highloss	src/md_highloss.c	/^void encode_one_macroblock_highloss (Macroblock *currMB)$/;"	f
encode_one_macroblock_low	src/md_low.c	/^void encode_one_macroblock_low (Macroblock *currMB)$/;"	f
encode_one_redundant_frame	src/lencod.c	/^void encode_one_redundant_frame(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
encode_one_slice	src/slice.c	/^int encode_one_slice (VideoParameters *p_Vid, int SliceGroupId, int TotalCodedMBs)$/;"	f
encode_one_slice_MBAFF	src/slice.c	/^int encode_one_slice_MBAFF (VideoParameters *p_Vid, int SliceGroupId, int TotalCodedMBs)$/;"	f
encode_sequence	src/lencod.c	/^static void encode_sequence(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f	file:
encoder_params	inc/global.h	/^typedef struct encoder_params$/;"	s
encoding_environment	inc/global.h	/^struct encoding_environment$/;"	s
end_encode_one_macroblock	src/mode_decision.c	/^void end_encode_one_macroblock(Macroblock *currMB)$/;"	f
end_macroblock	src/macroblock.c	/^void end_macroblock(Macroblock *currMB,         \/\/!< Current Macroblock$/;"	f
end_of_stream	src/filehandle.c	/^int end_of_stream(VideoParameters *p_Vid)$/;"	f
enh_layer_lambda_multiplier	inc/params.h	/^  double enh_layer_lambda_multiplier;   \/\/!< Weight lambda for enhancement layer$/;"	m	struct:inp_par_enc
enh_layer_me_lambda_multiplier	inc/params.h	/^  double enh_layer_me_lambda_multiplier;\/\/!< Weight ME lambda for enhancement layer$/;"	m	struct:inp_par_enc
enorm	inc/global.h	/^  double enorm  [128];$/;"	m	struct:video_par
entropy	inc/global.h	/^  double entropy[128];$/;"	m	struct:video_par
entropyBits	src/rdoq_cabac.c	/^static const int entropyBits[128]= $/;"	v	file:
epzs_params	inc/me_epzs_common.h	/^typedef struct epzs_params {$/;"	s
epzs_struct	inc/me_epzs_common.h	/^struct epzs_struct$/;"	s
errLevel	inc/rdoq.h	/^  double  errLevel[3];$/;"	m	struct:level_data_struct
errdo_alloc_storable_picture	src/errdo.c	/^void errdo_alloc_storable_picture(StorablePicture *p, VideoParameters *p_Vid, InputParameters *p_Inp, int size_x, int size_y, int size_x_cr, int size_y_cr)$/;"	f
errdo_compute_residue	src/errdo.c	/^void errdo_compute_residue (Macroblock *currMB, imgpel **imgY, int **res_img, imgpel **mb_pred, int b8block, int block_size) $/;"	f
errdo_distortion_estimation_multihyp	src/errdo_dist_mhyp.c	/^distblk errdo_distortion_estimation_multihyp(Macroblock *currMB, int block, int block_size, short mode, short pdir, distblk min_rdcost)$/;"	f
errdo_free_storable_picture	src/errdo.c	/^void errdo_free_storable_picture(StorablePicture* s)$/;"	f
errdo_get_best_MB	src/errdo.c	/^void errdo_get_best_MB(Macroblock *currMB)$/;"	f
errdo_get_best_P8x8	src/errdo.c	/^void errdo_get_best_P8x8(Macroblock *currMB, int transform8x8)$/;"	f
errdo_get_best_b8x8	src/errdo.c	/^void errdo_get_best_b8x8(Macroblock *currMB, int transform8x8, int block)$/;"	f
errdo_get_best_block_multihyp	src/errdo_dist_mhyp.c	/^void errdo_get_best_block_multihyp(Macroblock *currMB, imgpel*** dec_img, imgpel*** mbY, int block, int block_size)$/;"	f
errdo_store_best_MB	src/errdo.c	/^void errdo_store_best_MB(Macroblock *currMB)$/;"	f
errdo_store_best_b8x8	src/errdo.c	/^void errdo_store_best_b8x8(Macroblock *currMB, int transform8x8, int block)$/;"	f
errdo_store_best_block_multihyp	src/errdo_dist_mhyp.c	/^void errdo_store_best_block_multihyp(InputParameters *p_Inp, imgpel*** mbY, imgpel*** dec_img, int block, int img_i, int img_j, int block_size)$/;"	f
error	src/filehandle.c	/^void error(char *text, int code)$/;"	f
error_conceal_picture	inc/global.h	/^  void (*error_conceal_picture)(struct video_par *p_Vid, struct storable_picture *enc_pic, int decoder);$/;"	m	struct:video_par
error_sign_flag_UV	inc/errdo.h	/^  byte ***error_sign_flag_UV;             \/\/!< to indicate the sign of transmission error for component UV in rmpc algorithm$/;"	m	struct:distortion_estimation
error_sign_flag_Y	inc/errdo.h	/^  byte ** error_sign_flag_Y;              \/\/!< to indicate the sign of transmission error for component Y in rmpc algorithm$/;"	m	struct:distortion_estimation
errortext	inc/global.h	/^char errortext[ET_SIZE]; \/\/!< buffer for error message for exit with error()$/;"	v
estBitsCabac	inc/global.h	/^  struct est_bits_cabac *estBitsCabac; \/\/ [NUM_BLOCK_TYPES]$/;"	m	struct:slice	typeref:struct:slice::est_bits_cabac
estBitsCabacStruct	inc/rdoq.h	/^typedef struct est_bits_cabac estBitsCabacStruct;$/;"	t	typeref:struct:est_bits_cabac
estErr4x4	inc/rdoq.h	/^static const int estErr4x4[6][4][4] =$/;"	v
estErr8x8	inc/rdoq.h	/^static const int estErr8x8[6][8][8]={$/;"	v
estRunLevel_CABAC	src/rdoq_cabac.c	/^void estRunLevel_CABAC (Macroblock *currMB, int context) \/\/ writes CABAC run\/level $/;"	f
estSyntaxElement_Level_VLC1	src/rdoq_cavlc.c	/^int estSyntaxElement_Level_VLC1(SyntaxElement *se)$/;"	f
estSyntaxElement_Level_VLCN	src/rdoq_cavlc.c	/^int estSyntaxElement_Level_VLCN(SyntaxElement *se, int vlc)\/\/, DataPartition *this_dataPart)$/;"	f
est_CAVLC_bits	src/rdoq_cavlc.c	/^int est_CAVLC_bits (VideoParameters *p_Vid, int level_to_enc[16], int sign_to_enc[16], int nnz, int block_type)$/;"	f
est_CBP_block_bit	src/rdoq_cabac.c	/^static void est_CBP_block_bit (Macroblock* currMB, int type)$/;"	f	file:
est_RunLevel_CAVLC	src/rdoq_cavlc.c	/^void est_RunLevel_CAVLC(Macroblock *currMB, levelDataStruct *levelData, int *levelTrellis, int block_type, $/;"	f
est_bits_cabac	inc/rdoq.h	/^struct est_bits_cabac $/;"	s
est_exp_golomb_encode_eq_prob	src/rdoq_cabac.c	/^int est_exp_golomb_encode_eq_prob(unsigned int symbol)$/;"	f
est_significance_map	src/rdoq_cabac.c	/^static void est_significance_map(Macroblock* currMB, int type)$/;"	f	file:
est_significant_coefficients	src/rdoq_cabac.c	/^static void est_significant_coefficients (Macroblock* currMB, int type)$/;"	f	file:
est_unary_exp_golomb_level_bits	src/rdoq_cabac.c	/^int est_unary_exp_golomb_level_bits(unsigned int symbol, int bits0, int bits1)$/;"	f
est_unary_exp_golomb_level_encode	src/rdoq_cabac.c	/^static int est_unary_exp_golomb_level_encode(Macroblock *currMB, unsigned int symbol, int ctx, int type)$/;"	f	file:
est_writeRunLevel_CABAC	src/rdoq_cabac.c	/^void est_writeRunLevel_CABAC(Macroblock *currMB, levelDataStruct levelData[], int levelTabMin[], int type, double lambda, int kInit, int kStop, $/;"	f
est_write_and_store_CBP_block_bit	src/rdoq_cabac.c	/^int est_write_and_store_CBP_block_bit(Macroblock* currMB, int type) $/;"	f
establish_intra	src/pred_struct.c	/^static int establish_intra( InputParameters *p_Inp, SeqStructure *p_seq_struct, int curr_frame, int avail_frames, int sim )$/;"	f	file:
establish_random_access	src/pred_struct.c	/^static int establish_random_access( InputParameters *p_Inp, SeqStructure *p_seq_struct, int curr_frame, int avail_frames, int sim )$/;"	f	file:
establish_sp	src/pred_struct.c	/^static int establish_sp( InputParameters *p_Inp, SeqStructure *p_seq_struct, int curr_frame, int avail_frames, int sim )$/;"	f	file:
estimate_distortion	inc/global.h	/^  distblk (*estimate_distortion)(Macroblock *currMB, int block, int block_size, short mode, short pdir, distblk min_rdcost);$/;"	m	struct:video_par
exact_match_flag	inc/sei.h	/^  unsigned char exact_match_flag;$/;"	m	struct:__anon18
expSFile	inc/global.h	/^  FILE       *expSFile;$/;"	m	struct:video_par
expSeq	inc/global.h	/^  struct exp_seq_info *expSeq;$/;"	m	struct:video_par	typeref:struct:video_par::exp_seq_info
exp_golomb_encode_eq_prob	src/cabac.c	/^static void exp_golomb_encode_eq_prob( EncodingEnvironmentPtr eep_dp,$/;"	f	file:
exp_seq_info	inc/explicit_seq.h	/^typedef struct exp_seq_info$/;"	s
f_annexb	inc/global.h	/^  FILE *f_annexb; $/;"	m	struct:video_par
f_out	inc/global.h	/^  FILE **f_out;$/;"	m	struct:video_par
f_rtp	inc/global.h	/^  FILE *f_rtp;$/;"	m	struct:video_par
fast_full_search_motion_estimation	src/me_fullfast.c	/^fast_full_search_motion_estimation (Macroblock   *currMB,        \/\/ <--  current Macroblock$/;"	f
fast_mode_intra_decision	src/md_highfast.c	/^static void fast_mode_intra_decision(Macroblock *currMB, short *intra_skip)$/;"	f	file:
fastme_best_cost	inc/me_umhex.h	/^  distblk **fastme_best_cost;                     \/\/!< for multi ref early termination threshold$/;"	m	struct:umhex_struct
fastme_l0_cost	inc/me_umhex.h	/^  distblk ***fastme_l0_cost;                      \/\/!< store SAD information needed for forward median and uplayer prediction$/;"	m	struct:umhex_struct
fastme_l0_cost_bipred	inc/me_umhex.h	/^  distblk ***fastme_l0_cost_bipred;               \/\/!< store SAD information for bipred mode$/;"	m	struct:umhex_struct
fastme_l1_cost	inc/me_umhex.h	/^  distblk ***fastme_l1_cost;                      \/\/!< store SAD information needed for backward median and uplayer prediction$/;"	m	struct:umhex_struct
fastme_l1_cost_bipred	inc/me_umhex.h	/^  distblk ***fastme_l1_cost_bipred;               \/\/!< store SAD information for bipred mode$/;"	m	struct:umhex_struct
fastme_ref_cost	inc/me_umhex.h	/^  distblk ****fastme_ref_cost;                    \/\/!< store SAD information needed for forward ref-frame prediction$/;"	m	struct:umhex_struct
field_flag_inference	src/rdopt.c	/^byte field_flag_inference(Macroblock *currMB)$/;"	f
field_frame	inc/mbuffer.h	/^  byte                     field_frame; \/\/!< indicates if co_located is field or frame. Will be removed at some point$/;"	m	struct:pic_motion_params
field_mode	inc/global.h	/^  Boolean field_mode;     \/\/!< For MB level field\/frame -- field mode on flag$/;"	m	struct:video_par
field_mode_buffer	src/image.c	/^static void field_mode_buffer (VideoParameters *p_Vid)$/;"	f	file:
field_pic	inc/global.h	/^  Picture **field_pic;$/;"	m	struct:video_par
field_pic1	inc/global.h	/^  Picture **field_pic1;$/;"	m	struct:video_par
field_pic2	inc/global.h	/^  Picture **field_pic2;$/;"	m	struct:video_par
field_pic_flag	inc/pred_struct_types.h	/^  int field_pic_flag;$/;"	m	struct:frame_struct
field_pic_ptr	inc/global.h	/^  Picture **field_pic_ptr;$/;"	m	struct:video_par
field_picture	inc/global.h	/^  unsigned int field_picture;$/;"	m	struct:video_par
field_picture	src/image.c	/^static void field_picture (VideoParameters *p_Vid, Picture *top, Picture *bottom)$/;"	f	file:
field_views_flag	inc/sei.h	/^  Boolean       field_views_flag;$/;"	m	struct:__anon21
fill_frame_num_gap	src/mbuffer.c	/^void fill_frame_num_gap(VideoParameters *p_Vid, FrameFormat *output)$/;"	f
filter_hint	inc/sei.h	/^  int           ***filter_hint;$/;"	m	struct:__anon22
filter_hint_size_x	inc/sei.h	/^  unsigned int  filter_hint_size_x;$/;"	m	struct:__anon22
filter_hint_size_y	inc/sei.h	/^  unsigned int  filter_hint_size_y;$/;"	m	struct:__anon22
filter_hint_type	inc/sei.h	/^  unsigned int  filter_hint_type;$/;"	m	struct:__anon22
finalize_sei_message	src/sei.c	/^static void finalize_sei_message(SEIParameters *p_SEI, int id)$/;"	f	file:
find_best_mode_I16x16_MB	src/rd_intra_jm.c	/^int find_best_mode_I16x16_MB (Macroblock *currMB, int lambda,  distblk min_cost)$/;"	f
find_distortion	src/img_distortion.c	/^void find_distortion (VideoParameters *p_Vid, ImageData *imgData)$/;"	f
find_ms_ssim	src/img_dist_ms_ssim.c	/^void find_ms_ssim (VideoParameters *p_Vid, InputParameters *p_Inp, ImageStructure *ref, ImageStructure *src, DistMetric *metricSSIM)$/;"	f
find_nearest_ref_picture	src/errdo.c	/^StorablePicture* find_nearest_ref_picture(DecodedPictureBuffer *p_Dpb, int poc)$/;"	f
find_sad_16x16	inc/global.h	/^  distblk (*find_sad_16x16)                     (Macroblock *currMB);$/;"	m	struct:slice
find_sad_16x16_JM	src/intra16x16.c	/^distblk find_sad_16x16_JM(Macroblock *currMB)$/;"	f
find_snr	src/img_dist_snr.c	/^void find_snr(VideoParameters *p_Vid, ImageStructure *imgREF, ImageStructure *imgSRC, DistMetric *metricSSE, DistMetric *metricPSNR)$/;"	f
find_ssim	src/img_dist_ssim.c	/^void find_ssim (VideoParameters *p_Vid, InputParameters *p_Inp, ImageStructure *ref, ImageStructure *src, DistMetric *metricSSIM)$/;"	f
first_moment_UV	inc/errdo.h	/^  imgpel ***  first_moment_UV;            \/\/!< for storing the estimated first moment for component Y in rope algorithm$/;"	m	struct:distortion_estimation
first_moment_Y	inc/errdo.h	/^  imgpel **   first_moment_Y;             \/\/!< for storing the estimated first moment for component Y in rope algorithm$/;"	m	struct:distortion_estimation
first_moment_bestY_b8x8	inc/errdo.h	/^  imgpel ***first_moment_bestY_b8x8;$/;"	m	struct:decoders
first_moment_bestY_mb	inc/errdo.h	/^  imgpel **first_moment_bestY_mb;$/;"	m	struct:decoders
first_moment_pred	inc/errdo.h	/^  imgpel **first_moment_pred;$/;"	m	struct:decoders
first_moment_pred_bestY_b8x8	inc/errdo.h	/^  imgpel ***first_moment_pred_bestY_b8x8;$/;"	m	struct:decoders
flag_bestY_b8x8	inc/errdo.h	/^  byte ***flag_bestY_b8x8;$/;"	m	struct:decoders
flag_bestY_mb	inc/errdo.h	/^  byte **flag_bestY_mb;$/;"	m	struct:decoders
flag_intra	inc/me_umhex.h	/^  byte *flag_intra;$/;"	m	struct:umhex_struct
flag_intra	inc/me_umhexsmp.h	/^  byte   *flag_intra;$/;"	m	struct:umhex_smp_struct
flag_intra_SAD	inc/me_umhex.h	/^  int  flag_intra_SAD;$/;"	m	struct:umhex_struct
flag_intra_SAD	inc/me_umhexsmp.h	/^  int     flag_intra_SAD;$/;"	m	struct:umhex_smp_struct
flag_wo_res	inc/errdo.h	/^  byte **flag_wo_res;$/;"	m	struct:decoders
flag_wo_res_bestY_b8x8	inc/errdo.h	/^  byte ***flag_wo_res_bestY_b8x8;$/;"	m	struct:decoders
fld_flag	inc/global.h	/^  byte fld_flag;$/;"	m	struct:video_par
fld_flag	inc/global.h	/^  int fld_flag;$/;"	m	struct:prev_coding_stats
fld_type	inc/global.h	/^  int fld_type;                        \/\/!< top or bottom field$/;"	m	struct:video_par
flush_direct_output	src/output.c	/^void flush_direct_output(VideoParameters *p_Vid, FrameFormat *output, int p_out)$/;"	f
flush_dpb	src/mbuffer.c	/^void flush_dpb(DecodedPictureBuffer *p_Dpb, FrameFormat *output)$/;"	f
flush_unused_frame_from_dpb	src/mbuffer.c	/^static int flush_unused_frame_from_dpb(DecodedPictureBuffer *p_Dpb)$/;"	f	file:
format	inc/global.h	/^  FrameFormat format;      \/\/!< ImageStructure format Information$/;"	m	struct:image_structure
frame	inc/mbuffer.h	/^  StorablePicture *frame;$/;"	m	struct:frame_store
frame	inc/mbuffer.h	/^  struct storable_picture *frame;         \/\/ for mb aff, if field for referencing the combined frame$/;"	m	struct:storable_picture	typeref:struct:storable_picture::storable_picture
frame	inc/me_epzs_common.h	/^  MotionVector ***frame;  \/\/!< motion vector       [list][subblock_x][subblock_y]$/;"	m	struct:__anon28
frame0_flipped_flag	inc/sei.h	/^  Boolean       frame0_flipped_flag;$/;"	m	struct:__anon21
frame0_grid_position_x	inc/sei.h	/^  unsigned char frame0_grid_position_x;$/;"	m	struct:__anon21
frame0_grid_position_y	inc/sei.h	/^  unsigned char frame0_grid_position_y;$/;"	m	struct:__anon21
frame0_self_contained_flag	inc/sei.h	/^  Boolean       frame0_self_contained_flag;$/;"	m	struct:__anon21
frame1_grid_position_x	inc/sei.h	/^  unsigned char frame1_grid_position_x;$/;"	m	struct:__anon21
frame1_grid_position_y	inc/sei.h	/^  unsigned char frame1_grid_position_y;$/;"	m	struct:__anon21
frame1_self_contained_flag	inc/sei.h	/^  Boolean       frame1_self_contained_flag;$/;"	m	struct:__anon21
frameNuminGOP	inc/global.h	/^  int  frameNuminGOP;$/;"	m	struct:video_par
frameOffset	inc/global.h	/^  short frameOffset[2][MAX_REFERENCE_PICTURES];$/;"	m	struct:video_par
frameOffsetAvail	inc/global.h	/^  int frameOffsetAvail;$/;"	m	struct:video_par
frameOffsetCount	inc/global.h	/^  int frameOffsetCount[2][MAX_REFERENCE_PICTURES]; $/;"	m	struct:video_par
frameOffsetTotal	inc/global.h	/^  int frameOffsetTotal[2][MAX_REFERENCE_PICTURES]; $/;"	m	struct:video_par
frame_crop_bottom_offset	inc/mbuffer.h	/^  int         frame_crop_bottom_offset;$/;"	m	struct:storable_picture
frame_crop_left_offset	inc/mbuffer.h	/^  int         frame_crop_left_offset;$/;"	m	struct:storable_picture
frame_crop_right_offset	inc/mbuffer.h	/^  int         frame_crop_right_offset;$/;"	m	struct:storable_picture
frame_crop_top_offset	inc/mbuffer.h	/^  int         frame_crop_top_offset;$/;"	m	struct:storable_picture
frame_cropping_flag	inc/mbuffer.h	/^  int         frame_cropping_flag;$/;"	m	struct:storable_picture
frame_ctr	inc/global.h	/^  int        frame_ctr;                     \/\/!< number of coded frames$/;"	m	struct:distortion_params
frame_ctr_v	inc/global.h	/^  int        frame_ctr_v[2];                \/\/!< number of coded frames for each view$/;"	m	struct:distortion_params
frame_mbs_only_flag	inc/mbuffer.h	/^  int         frame_mbs_only_flag;$/;"	m	struct:storable_picture
frame_mode_buffer	src/image.c	/^static void frame_mode_buffer (VideoParameters *p_Vid)$/;"	f	file:
frame_no	inc/global.h	/^  int                 frame_no;$/;"	m	struct:slice
frame_no	inc/global.h	/^  int frame_no;$/;"	m	struct:video_par
frame_no	inc/pred_struct_types.h	/^  int frame_no;$/;"	m	struct:frame_struct
frame_num	inc/global.h	/^  unsigned int        frame_num;$/;"	m	struct:slice
frame_num	inc/global.h	/^  unsigned int frame_num;    \/\/!< frame_num for this frame$/;"	m	struct:video_par
frame_num	inc/global.h	/^  unsigned int frame_num;$/;"	m	struct:coding_par
frame_num	inc/mbuffer.h	/^  unsigned    frame_num;$/;"	m	struct:storable_picture
frame_num	inc/mbuffer.h	/^  unsigned  frame_num;$/;"	m	struct:frame_store
frame_num_wrap	inc/mbuffer.h	/^  int       frame_num_wrap;$/;"	m	struct:frame_store
frame_packing_arrangement_cancel_flag	inc/sei.h	/^  Boolean       frame_packing_arrangement_cancel_flag;$/;"	m	struct:__anon21
frame_packing_arrangement_extension_flag	inc/sei.h	/^  Boolean       frame_packing_arrangement_extension_flag;$/;"	m	struct:__anon21
frame_packing_arrangement_id	inc/sei.h	/^  unsigned int  frame_packing_arrangement_id;$/;"	m	struct:__anon21
frame_packing_arrangement_information_struct	inc/sei.h	/^} frame_packing_arrangement_information_struct;$/;"	t	typeref:struct:__anon21
frame_packing_arrangement_repetition_period	inc/sei.h	/^  unsigned int  frame_packing_arrangement_repetition_period;$/;"	m	struct:__anon21
frame_packing_arrangement_reserved_byte	inc/sei.h	/^  unsigned char frame_packing_arrangement_reserved_byte;$/;"	m	struct:__anon21
frame_packing_arrangement_type	inc/sei.h	/^  unsigned char frame_packing_arrangement_type;$/;"	m	struct:__anon21
frame_pic	inc/global.h	/^  Picture **frame_pic;$/;"	m	struct:video_par
frame_pic_si	inc/global.h	/^  Picture *frame_pic_si;$/;"	m	struct:video_par
frame_picture	src/image.c	/^void frame_picture (VideoParameters *p_Vid, Picture *frame, ImageData *imgData, int rd_pass)$/;"	f
frame_picture_mp	src/image_mp.c	/^void frame_picture_mp(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
frame_picture_mp_b_slice	src/image_mp.c	/^void frame_picture_mp_b_slice(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
frame_picture_mp_exit	src/image_mp.c	/^void frame_picture_mp_exit(VideoParameters *p_Vid, CodingInfo *coding_info)$/;"	f
frame_picture_mp_i_slice	src/image_mp.c	/^void frame_picture_mp_i_slice(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
frame_picture_mp_p_slice	src/image_mp.c	/^void frame_picture_mp_p_slice(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
frame_poc	inc/mbuffer.h	/^  int         frame_poc;$/;"	m	struct:storable_picture
frame_qp	inc/explicit_seq.h	/^  int frame_qp;$/;"	m	struct:__anon26
frame_rate	inc/rc_types.h	/^  float  frame_rate;$/;"	m	struct:rc_quadratic
frame_rate	inc/sei.h	/^  uint16 frame_rate[MAX_LAYER_NUMBER];$/;"	m	struct:__anon12
frame_skip	inc/params.h	/^  int frame_skip;                       \/\/!< number of frames to skip in input sequence (e.g 2 takes frame 0,3,6,9...)$/;"	m	struct:inp_par_enc
frame_statistic_start	inc/global.h	/^  int frame_statistic_start;$/;"	m	struct:video_par
frame_store	inc/mbuffer.h	/^struct frame_store$/;"	s
frame_struct	inc/pred_struct_types.h	/^typedef struct frame_struct$/;"	s
framepoc	inc/global.h	/^  signed int          framepoc;     \/\/!< min (toppoc, bottompoc)$/;"	m	struct:slice
framepoc	inc/global.h	/^  signed int framepoc;     \/\/!< min (toppoc, bottompoc)$/;"	m	struct:video_par
framerate	inc/global.h	/^  float framerate;$/;"	m	struct:video_par
freeEPZScolocated	src/me_epzs_common.c	/^freeEPZScolocated (EPZSColocParams * p)$/;"	f	file:
freeEPZSpattern	src/me_epzs_common.c	/^freeEPZSpattern (EPZSStructure * p)$/;"	f	file:
free_QMatrix	src/q_matrix.c	/^void free_QMatrix (QuantParameters *p_Quant)$/;"	f
free_QOffsets	src/q_offsets.c	/^void free_QOffsets (QuantParameters *p_Quant, InputParameters *p_Inp)$/;"	f
free_block_mem	src/slice.c	/^void free_block_mem(Slice *currSlice)$/;"	f
free_context_memory	src/context_ini.c	/^void free_context_memory (VideoParameters *p_Vid)$/;"	f
free_dpb	src/mbuffer.c	/^void free_dpb(DecodedPictureBuffer *p_Dpb)$/;"	f
free_drpm_buffer	src/sei.c	/^void free_drpm_buffer( DecRefPicMarking_t *pDRPM )$/;"	f
free_encode_parameters	src/lencod.c	/^static void free_encode_parameters(VideoParameters *p_Vid)$/;"	f	file:
free_encoder	src/lencod.c	/^static void free_encoder (EncoderParams *p_Enc)$/;"	f	file:
free_encoder_memory	src/lencod.c	/^void free_encoder_memory(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
free_errdo_mem	src/errdo.c	/^void free_errdo_mem(VideoParameters *p_Vid)$/;"	f
free_frame_buffer	src/pred_struct.c	/^static void free_frame_buffer( FrameUnitStruct *p_frm_struct, int num_frames )$/;"	f	file:
free_frame_data_memory	src/mbuffer.c	/^static void free_frame_data_memory(StorablePicture *picture, int bFreeImage)$/;"	f	file:
free_frame_store	src/mbuffer.c	/^void free_frame_store(VideoParameters *p_Vid, FrameStore* f)$/;"	f
free_global_buffers	src/lencod.c	/^static void free_global_buffers(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f	file:
free_gop_struct	src/pred_struct.c	/^static void free_gop_struct( SeqStructure *p_seq_struct )$/;"	f	file:
free_img	src/lencod.c	/^static void free_img (VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f	file:
free_mbs	src/macroblock.c	/^void free_mbs(Macroblock *pMBs, int mb_num)$/;"	f
free_mem_ACcoeff	src/lencod.c	/^void free_mem_ACcoeff (int**** cofAC)$/;"	f
free_mem_ACcoeff_new	src/lencod.c	/^void free_mem_ACcoeff_new (int***** cofAC)$/;"	f
free_mem_DCcoeff	src/lencod.c	/^void free_mem_DCcoeff (int*** cofDC)$/;"	f
free_mv_block	src/mv_search.c	/^void free_mv_block(MEBlock *mv_block)$/;"	f
free_nal_unit	src/slice.c	/^static void free_nal_unit(Picture *pic)$/;"	f	file:
free_orig_planes	src/lencod.c	/^void free_orig_planes(VideoParameters *p_Vid, ImageData *imgData)$/;"	f
free_params	src/lencod.c	/^static void free_params (InputParameters *p_Inp)$/;"	f	file:
free_pic_motion	src/mbuffer.c	/^void free_pic_motion(PicMotionParamsOld *motion)$/;"	f
free_pic_struct	src/pred_struct.c	/^static void free_pic_struct( PicStructure *p_pic )$/;"	f	file:
free_picture	src/lencod.c	/^void free_picture(Picture *pic)$/;"	f
free_pictures	src/image.c	/^void free_pictures(VideoParameters *p_Vid, int dummy)$/;"	f
free_pred_struct	src/pred_struct.c	/^static void free_pred_struct( SeqStructure *p_seq_struct )$/;"	f	file:
free_rd8x8data	src/rdopt.c	/^void free_rd8x8data (RD_8x8DATA *rd_data)$/;"	f
free_rddata	src/slice.c	/^static void free_rddata(Slice *currSlice, RD_DATA *rd_data)$/;"	f	file:
free_ref_pic_list_reordering_buffer	src/mbuffer.c	/^void free_ref_pic_list_reordering_buffer(Slice *currSlice)$/;"	f
free_seq_structure	src/pred_struct.c	/^void free_seq_structure( SeqStructure *p_seq_struct )$/;"	f
free_slice	src/slice.c	/^void free_slice(Slice *currSlice)$/;"	f
free_slice_data	src/image.c	/^void free_slice_data(VideoParameters *p_Vid)$/;"	f
free_slice_list	src/slice.c	/^void free_slice_list(Picture *currPic)$/;"	f
free_storable_picture	src/mbuffer.c	/^void free_storable_picture(VideoParameters *p_Vid, StorablePicture* p)$/;"	f
frm_iter	inc/global.h	/^  int          frm_iter;   \/\/!< frame variations to create (useful for multiple coding passes)$/;"	m	struct:video_par
frm_no_in_file	inc/global.h	/^  int  frm_no_in_file;$/;"	m	struct:video_par
frm_no_in_file	inc/global.h	/^  int frm_no_in_file;$/;"	m	struct:prev_coding_stats
frm_struct_buffer	inc/global.h	/^  int frm_struct_buffer;      \/\/!< length of the frame struct buffer (this may also be a define)$/;"	m	struct:video_par
fs	inc/mbuffer.h	/^  FrameStore  **fs;$/;"	m	struct:decoded_picture_buffer
fs_ilref	inc/mbuffer.h	/^  FrameStore  **fs_ilref;$/;"	m	struct:decoded_picture_buffer
fs_ltref	inc/mbuffer.h	/^  FrameStore  **fs_ltref;$/;"	m	struct:decoded_picture_buffer
fs_ref	inc/mbuffer.h	/^  FrameStore  **fs_ref;$/;"	m	struct:decoded_picture_buffer
full_search	inc/params.h	/^  int full_search;$/;"	m	struct:inp_par_enc
full_search_bipred_motion_estimation	src/me_fullsearch.c	/^full_search_bipred_motion_estimation (Macroblock *currMB,      \/\/ <--  current Macroblock$/;"	f
full_search_motion_estimation	src/me_fullsearch.c	/^full_search_motion_estimation (Macroblock   *currMB ,       \/\/ <--  current Macroblock$/;"	f
full_sub_pel_bipred_motion_estimation	src/me_fullsearch.c	/^full_sub_pel_bipred_motion_estimation (Macroblock   *currMB,    \/\/ <--  current Macroblock$/;"	f
full_sub_pel_motion_estimation	src/me_fullsearch.c	/^full_sub_pel_motion_estimation (Macroblock   *currMB,      \/\/ <--  Current Macroblock$/;"	f
full_timestamp_flag	inc/sei.h	/^  Boolean full_timestamp_flag;$/;"	m	struct:__anon19
gaaiMBAFF_NZCoeff	inc/global.h	/^  int gaaiMBAFF_NZCoeff[4][12];$/;"	m	struct:video_par
gen_enc_par	src/lencod.c	/^static void gen_enc_par(VideoParameters *p_Vid, int layer_idx)$/;"	f	file:
gen_field_ref_ids	src/mbuffer.c	/^static void gen_field_ref_ids(StorablePicture *p)$/;"	f	file:
generateChroma00	src/img_chroma.c	/^static void generateChroma00( VideoParameters *p_Vid, int size_x_minus1, int size_y_minus1, imgpel **wImgDst, imgpel **imgUV)$/;"	f	file:
generateChroma01	src/img_chroma.c	/^static void generateChroma01( VideoParameters *p_Vid, int size_x_minus1, int size_y_minus1, int weight00, int weight01, imgpel **wImgDst, imgpel **imgUV)$/;"	f	file:
generateChroma10	src/img_chroma.c	/^static void generateChroma10(VideoParameters *p_Vid, int size_x_minus1, int size_y_minus1, int weight00, int weight10, imgpel **wImgDst, imgpel **imgUV)$/;"	f	file:
generateChromaXX	src/img_chroma.c	/^static void generateChromaXX( VideoParameters *p_Vid, int size_x_minus1, int size_y_minus1, int weight00, int weight01, int weight10, int weight11, imgpel **wImgDst, imgpel **imgUV)$/;"	f	file:
generate_encode_parameters	src/lencod.c	/^static void generate_encode_parameters(VideoParameters *p_Vid)$/;"	f	file:
generate_parameter_sets	src/parset.c	/^void generate_parameter_sets (VideoParameters *p_Vid)$/;"	f
generate_pred_error_4x4	src/intra4x4.c	/^void generate_pred_error_4x4(imgpel **cur_img, imgpel **prd_img, imgpel **cur_prd, int **m7, int pic_opix_x, int block_x)$/;"	f
generate_pred_error_8x8	src/intra8x8.c	/^void generate_pred_error_8x8(imgpel **cur_img, imgpel **prd_img, imgpel **cur_prd, $/;"	f
get4x4Neighbour	src/mb_access.c	/^void get4x4Neighbour (Macroblock *currMB, int block_x, int block_y, int mb_size[2], PixelPos *pix)$/;"	f
getAffNeighbour	src/mb_access.c	/^void getAffNeighbour(Macroblock *currMB, int xN, int yN, int mb_size[2], PixelPos *pix)$/;"	f
getDiagSubImageBiLinear	src/img_luma.c	/^static void getDiagSubImageBiLinear( StorablePicture *s, imgpel **dstImg, imgpel **srcImgT, imgpel **srcImgB )$/;"	f	file:
getDistortion	inc/global.h	/^  distblk (*getDistortion)         ( Macroblock *currMB );  $/;"	m	struct:slice
getDpbSize	src/mbuffer.c	/^int getDpbSize(VideoParameters *p_Vid, seq_parameter_set_rbsp_t *active_sps)$/;"	f
getHorSubImageBiLinear	src/img_luma.c	/^static void getHorSubImageBiLinear( StorablePicture *s, imgpel **dstImg, imgpel **srcImgL, imgpel **srcImgR)$/;"	f	file:
getHorSubImageSixTap	src/img_luma.c	/^static void getHorSubImageSixTap( VideoParameters *p_Vid, StorablePicture *s, imgpel **dstImg, imgpel **srcImg)$/;"	f	file:
getMaxBR	src/conformance.c	/^unsigned int getMaxBR (unsigned int levelIdc)$/;"	f
getMaxCPB	src/conformance.c	/^unsigned int getMaxCPB (unsigned int levelIdc)$/;"	f
getMaxDpbSize	src/parset.c	/^static int getMaxDpbSize(seq_parameter_set_rbsp_t *active_sps)$/;"	f	file:
getMaxFs	src/conformance.c	/^unsigned int getMaxFs (unsigned int levelIdc)$/;"	f
getMaxMBPS	src/conformance.c	/^unsigned int getMaxMBPS (unsigned int levelIdc)$/;"	f
getMinCR	src/conformance.c	/^unsigned int getMinCR (unsigned int levelIdc)$/;"	f
getNeighbour	inc/global.h	/^  void (*getNeighbour)         (Macroblock *currMB, int xN, int yN, int mb_size[2], PixelPos *pix);$/;"	m	struct:video_par
getNonAffNeighbour	src/mb_access.c	/^void getNonAffNeighbour(Macroblock *currMB, int xN, int yN, int mb_size[2], PixelPos *pix)$/;"	f
getSubImageBiLinear	src/img_luma.c	/^static void getSubImageBiLinear( StorablePicture *s, imgpel **dstImg, imgpel **srcImgL, imgpel **srcImgR)$/;"	f	file:
getSubImageInteger	src/img_luma.c	/^static void getSubImageInteger( StorablePicture *s, imgpel **dstImg, imgpel **srcImg)$/;"	f	file:
getSubImageInteger_s	src/img_luma.c	/^static void getSubImageInteger_s( StorablePicture *s, imgpel **dstImg, imgpel **srcImg)$/;"	f	file:
getSubImagesChroma	src/img_chroma.c	/^void getSubImagesChroma( VideoParameters *p_Vid, StorablePicture *s )$/;"	f
getSubImagesLuma	src/img_luma.c	/^void getSubImagesLuma( VideoParameters *p_Vid, StorablePicture *s )$/;"	f
getVerSubImageBiLinear	src/img_luma.c	/^static void getVerSubImageBiLinear( StorablePicture *s, imgpel **dstImg, imgpel **srcImgT, imgpel **srcImgB)$/;"	f	file:
getVerSubImageSixTap	src/img_luma.c	/^static void getVerSubImageSixTap( VideoParameters *p_Vid, StorablePicture *s, imgpel **dstImg, imgpel **srcImg)$/;"	f	file:
getVerSubImageSixTapTmp	src/img_luma.c	/^static void getVerSubImageSixTapTmp( VideoParameters *p_Vid, StorablePicture *s, imgpel **dstImg)$/;"	f	file:
getVideoFileSize	src/configfile.c	/^int64 getVideoFileSize(int video_file)$/;"	f
get_LeakyBucketRate	src/leaky_bucket.c	/^int get_LeakyBucketRate(InputParameters *p_Inp, unsigned long NumberLeakyBuckets, unsigned long *Rmin)$/;"	f
get_best_transform_8x8	src/md_low.c	/^static int get_best_transform_8x8(Macroblock *currMB)$/;"	f	file:
get_bipred_cost	src/mode_decision.c	/^void get_bipred_cost(Macroblock *currMB, int mode, int block, int i, int j, Info8x8  *best, RD_PARAMS *enc_mb, distblk bmcost[5])$/;"	f
get_block_00	src/get_block_otf.c	/^static void get_block_00(imgpel *block, imgpel *cur_img,  int block_size_y, int block_size_x, int shift_x)$/;"	f	file:
get_block_chroma	src/lln_mc_prediction.c	/^void get_block_chroma(Macroblock *currMB, int decoder, int uv, StorablePicture* dec_picture, StorablePicture *curr_ref, int x_pos, int y_pos, int block_size_x, int block_size_y, imgpel block[MB_BLOCK_SIZE][MB_BLOCK_SIZE])$/;"	f
get_block_chroma_otf	src/get_block_otf.c	/^static inline void get_block_chroma_otf (        VideoParameters *p_Vid, \/\/!< video encoding parameters for current picture$/;"	f	file:
get_block_chroma_otf_L2	src/get_block_otf.c	/^void get_block_chroma_otf_L2 (        VideoParameters *p_Vid, \/\/!< video encoding parameters for current picture$/;"	f
get_block_luma	src/lln_mc_prediction.c	/^void get_block_luma(Macroblock *currMB, int decoder, ColorPlane pl, StorablePicture* dec_picture, StorablePicture *curr_ref, int x_pos, int y_pos, int block_size_x, int block_size_y, imgpel block[MB_BLOCK_SIZE][MB_BLOCK_SIZE])$/;"	f
get_block_luma_otf	src/get_block_otf.c	/^static inline void get_block_luma_otf(  VideoParameters *p_Vid,  \/\/!< video encoding parameters for current picture$/;"	f	file:
get_block_luma_otf_L1	src/get_block_otf.c	/^void get_block_luma_otf_L1(  VideoParameters *p_Vid,  \/\/!< video encoding parameters for current picture$/;"	f
get_block_luma_otf_L2	src/get_block_otf.c	/^void get_block_luma_otf_L2(  VideoParameters *p_Vid,  \/\/!< video encoding parameters for current picture$/;"	f
get_chroma_0X	src/get_block_otf.c	/^static void get_chroma_0X(imgpel *block, imgpel *cur_img, int span, int block_size_y, int block_size_x, int w00, int w01, int total_scale)$/;"	f	file:
get_chroma_X0	src/get_block_otf.c	/^static void get_chroma_X0(imgpel *block, imgpel *cur_img, int span, int block_size_y, int block_size_x, int w00, int w10, int total_scale)$/;"	f	file:
get_chroma_XX	src/get_block_otf.c	/^static void get_chroma_XX(imgpel *block, imgpel *cur_img, int span, int block_size_y, int block_size_x, int w00, int w01, int w10, int w11, int total_scale)$/;"	f	file:
get_colocated_info	src/mv_direct.c	/^int get_colocated_info(Macroblock *currMB, StorablePicture *list1, int i, int j)$/;"	f
get_colocated_info_4x4	src/mv_direct.c	/^int get_colocated_info_4x4(Macroblock *currMB, StorablePicture *list1, int i, int j)$/;"	f
get_dQP_table	src/rdoq.c	/^void get_dQP_table(Slice *currSlice)$/;"	f
get_difference_4x4	src/intra_chroma.c	/^void get_difference_4x4(imgpel **src, imgpel **prd, short *diff, int pos_x, int block_x)$/;"	f
get_explicit_lambda	src/lambda.c	/^void get_explicit_lambda(Slice *currSlice)$/;"	f
get_fixed_frame	src/pred_struct.c	/^static int get_fixed_frame( InputParameters *p_Inp, SeqStructure *p_seq_struct, int curr_frame, int avail_frames )$/;"	f	file:
get_fixed_frame_for_prd	src/pred_struct.c	/^static int get_fixed_frame_for_prd( InputParameters *p_Inp, SeqStructure *p_seq_struct, int curr_frame, int avail_frames )$/;"	f	file:
get_fixed_lambda	src/lambda.c	/^void get_fixed_lambda(Slice *currSlice)$/;"	f
get_i16x16_dc	src/intra16x16.c	/^static inline void get_i16x16_dc(imgpel **cur_pred, imgpel *PredPel, int left_available, int up_available)$/;"	f	file:
get_i16x16_horizontal	src/intra16x16.c	/^static inline void get_i16x16_horizontal(imgpel **cur_pred, imgpel *PredPel)$/;"	f	file:
get_i16x16_plane	src/intra16x16.c	/^static inline void get_i16x16_plane(imgpel **cur_pred, imgpel *PredPel, int max_imgpel_value)$/;"	f	file:
get_i16x16_vertical	src/intra16x16.c	/^static inline void get_i16x16_vertical(imgpel **cur_pred, imgpel *PredPel)$/;"	f	file:
get_i4x4_dc	src/intra4x4.c	/^static inline void get_i4x4_dc(imgpel **cur_pred, imgpel *PredPel, int left_available, int up_available)$/;"	f	file:
get_i4x4_downleft	src/intra4x4.c	/^static inline void get_i4x4_downleft(imgpel **cur_pred, imgpel *PredPel)$/;"	f	file:
get_i4x4_downright	src/intra4x4.c	/^static inline void get_i4x4_downright(imgpel **cur_pred, imgpel *PredPel)$/;"	f	file:
get_i4x4_hordown	src/intra4x4.c	/^static inline void get_i4x4_hordown(imgpel **cur_pred, imgpel *PredPel)$/;"	f	file:
get_i4x4_horizontal	src/intra4x4.c	/^static inline void get_i4x4_horizontal(imgpel **cur_pred, imgpel *PredPel)$/;"	f	file:
get_i4x4_horup	src/intra4x4.c	/^static inline void get_i4x4_horup(imgpel **cur_pred, imgpel *PredPel)$/;"	f	file:
get_i4x4_vertical	src/intra4x4.c	/^static inline void get_i4x4_vertical(imgpel **cur_pred, imgpel *PredPel)$/;"	f	file:
get_i4x4_vertleft	src/intra4x4.c	/^static inline void get_i4x4_vertleft(imgpel **cur_pred, imgpel *PredPel)$/;"	f	file:
get_i4x4_vertright	src/intra4x4.c	/^static inline void get_i4x4_vertright(imgpel **cur_pred, imgpel *PredPel)$/;"	f	file:
get_i8x8_dc	src/intra8x8.c	/^static inline void get_i8x8_dc(imgpel **cur_pred, imgpel *PredPel, int left_available, int up_available)$/;"	f	file:
get_i8x8_downleft	src/intra8x8.c	/^static inline void get_i8x8_downleft(imgpel **cur_pred, imgpel *PredPel)$/;"	f	file:
get_i8x8_downright	src/intra8x8.c	/^static inline void get_i8x8_downright(imgpel **cur_pred, imgpel *PredPel)$/;"	f	file:
get_i8x8_hordown	src/intra8x8.c	/^static inline void get_i8x8_hordown(imgpel **cur_pred, imgpel *PredPel)$/;"	f	file:
get_i8x8_horizontal	src/intra8x8.c	/^static inline void get_i8x8_horizontal(imgpel **cur_pred, imgpel *PredPel)$/;"	f	file:
get_i8x8_horup	src/intra8x8.c	/^static inline void get_i8x8_horup(imgpel **cur_pred, imgpel *PredPel)$/;"	f	file:
get_i8x8_vertical	src/intra8x8.c	/^static inline void get_i8x8_vertical(imgpel **cur_pred, imgpel *PredPel)$/;"	f	file:
get_i8x8_vertleft	src/intra8x8.c	/^static inline void get_i8x8_vertleft(imgpel **cur_pred, imgpel *PredPel)$/;"	f	file:
get_i8x8_vertright	src/intra8x8.c	/^static inline void get_i8x8_vertright(imgpel **cur_pred, imgpel *PredPel)$/;"	f	file:
get_iChroma_dc	src/intra_chroma.c	/^static inline void get_iChroma_dc(imgpel **cur_pred, imgpel *PredPel, int left_available, int up_available)$/;"	f	file:
get_iChroma_horizontal	src/intra_chroma.c	/^static inline void get_iChroma_horizontal(imgpel **cur_pred, imgpel *PredPel, int cr_MB_x, int cr_MB_y)$/;"	f	file:
get_iChroma_plane	src/intra_chroma.c	/^static inline void get_iChroma_plane(imgpel **cur_pred, imgpel *PredPel, int max_imgpel_value)$/;"	f	file:
get_iChroma_vertical	src/intra_chroma.c	/^static inline void get_iChroma_vertical(imgpel **cur_pred, imgpel *PredPel, int cr_MB_x, int cr_MB_y)$/;"	f	file:
get_idr_flag	src/image.c	/^byte get_idr_flag( VideoParameters *p_Vid )$/;"	f
get_idr_index	src/pred_struct.c	/^static int get_idr_index( InputParameters *p_Inp, SeqStructure *p_seq_struct, int num_frames )$/;"	f	file:
get_implicit_lambda_b_slice	src/lambda.c	/^void get_implicit_lambda_b_slice(Slice *currSlice)$/;"	f
get_implicit_lambda_i_slice	src/lambda.c	/^void get_implicit_lambda_i_slice(Slice *currSlice)$/;"	f
get_implicit_lambda_p_slice	src/lambda.c	/^void get_implicit_lambda_p_slice(Slice *currSlice)$/;"	f
get_implicit_lambda_sp_slice	src/lambda.c	/^void get_implicit_lambda_sp_slice(Slice *currSlice)$/;"	f
get_initial_mb16x16_cost	src/mode_decision.c	/^void get_initial_mb16x16_cost(Macroblock* currMB)$/;"	f
get_intra_index	src/pred_struct.c	/^static int get_intra_index( InputParameters *p_Inp, SeqStructure *p_seq_struct, int num_frames )$/;"	f	file:
get_intrapred_16x16	src/intra16x16.c	/^void get_intrapred_16x16(Macroblock *currMB, ColorPlane pl, int i16x16_mode, int left_available, int up_available)$/;"	f
get_intrapred_4x4	src/intra4x4.c	/^void get_intrapred_4x4(Macroblock *currMB, ColorPlane pl, int i4x4_mode, int img_x, int img_y, int left_available, int up_available)$/;"	f
get_intrapred_8x8	src/intra8x8.c	/^void get_intrapred_8x8(Macroblock *currMB, ColorPlane pl, int i8x8_mode, int left_available, int up_available)$/;"	f
get_intrapred_chroma	src/intra_chroma.c	/^void get_intrapred_chroma(Macroblock *currMB, ColorPlane pl, int iChroma_mode, int left_available, int up_available)$/;"	f
get_luma_01	src/get_block_otf.c	/^static void get_luma_01(imgpel *block, imgpel **cur_imgY, int block_size_y, int block_size_x, int x_pos, int shift_x, int max_imgpel_value)$/;"	f	file:
get_luma_02	src/get_block_otf.c	/^static void get_luma_02(imgpel *block, imgpel **cur_imgY, int block_size_y, int block_size_x, int x_pos, int shift_x, int max_imgpel_value)$/;"	f	file:
get_luma_03	src/get_block_otf.c	/^static void get_luma_03(imgpel *block, imgpel **cur_imgY, int block_size_y, int block_size_x, int x_pos, int shift_x, int max_imgpel_value)$/;"	f	file:
get_luma_10	src/get_block_otf.c	/^static void get_luma_10(imgpel *block, imgpel **cur_imgY, int block_size_y, int block_size_x, int x_pos , int max_imgpel_value)$/;"	f	file:
get_luma_11	src/get_block_otf.c	/^static void get_luma_11(imgpel *block, imgpel **cur_imgY, int block_size_y, int block_size_x, int x_pos, int shift_x, int max_imgpel_value)$/;"	f	file:
get_luma_12	src/get_block_otf.c	/^static void get_luma_12(imgpel *block, imgpel **cur_imgY, int *tmp_res, int block_size_y, int block_size_x, int x_pos, int shift_x, int max_imgpel_value)$/;"	f	file:
get_luma_13	src/get_block_otf.c	/^static void get_luma_13(imgpel *block, imgpel **cur_imgY, int block_size_y, int block_size_x, int x_pos, int shift_x, int max_imgpel_value)$/;"	f	file:
get_luma_20	src/get_block_otf.c	/^static void get_luma_20(imgpel *block, imgpel **cur_imgY, int block_size_y, int block_size_x, int x_pos , int max_imgpel_value)$/;"	f	file:
get_luma_21	src/get_block_otf.c	/^static void get_luma_21(imgpel *block, imgpel **cur_imgY, int *tmp_res, int block_size_y, int block_size_x, int x_pos, int max_imgpel_value)$/;"	f	file:
get_luma_22	src/get_block_otf.c	/^static void get_luma_22(imgpel *block, imgpel **cur_imgY, int *tmp_res, int block_size_y, int block_size_x, int x_pos, int max_imgpel_value)$/;"	f	file:
get_luma_23	src/get_block_otf.c	/^static void get_luma_23(imgpel *block, imgpel **cur_imgY, int *tmp_res, int block_size_y, int block_size_x, int x_pos, int max_imgpel_value)$/;"	f	file:
get_luma_30	src/get_block_otf.c	/^static void get_luma_30(imgpel *block, imgpel **cur_imgY, int block_size_y, int block_size_x, int x_pos , int max_imgpel_value)$/;"	f	file:
get_luma_31	src/get_block_otf.c	/^static void get_luma_31(imgpel *block, imgpel **cur_imgY, int block_size_y, int block_size_x, int x_pos, int shift_x, int max_imgpel_value)$/;"	f	file:
get_luma_32	src/get_block_otf.c	/^static void get_luma_32(imgpel *block, imgpel **cur_imgY, int *tmp_res, int block_size_y, int block_size_x, int x_pos, int shift_x, int max_imgpel_value)$/;"	f	file:
get_luma_33	src/get_block_otf.c	/^static void get_luma_33(imgpel *block, imgpel **cur_imgY, int block_size_y, int block_size_x, int x_pos, int shift_x, int max_imgpel_value)$/;"	f	file:
get_mb_block_pos	inc/global.h	/^  void (*get_mb_block_pos)     (BlockPos *PicPos, int mb_addr, short *x, short *y);$/;"	m	struct:video_par
get_mb_block_pos_mbaff	src/mb_access.c	/^void get_mb_block_pos_mbaff (BlockPos *PicPos, int mb_addr, short *x, short *y)$/;"	f
get_mb_block_pos_normal	src/mb_access.c	/^void get_mb_block_pos_normal (BlockPos *PicPos, int mb_addr, short *x, short *y)$/;"	f
get_mb_pos	src/mb_access.c	/^void get_mb_pos (VideoParameters *p_Vid, int mb_addr, int mb_size[2], short *x, short *y)$/;"	f
get_mem_ACcoeff	src/lencod.c	/^int get_mem_ACcoeff (VideoParameters *p_Vid, int***** cofAC)$/;"	f
get_mem_ACcoeff_new	src/lencod.c	/^int get_mem_ACcoeff_new (int****** cofAC, int chroma)$/;"	f
get_mem_DCcoeff	src/lencod.c	/^int get_mem_DCcoeff (int**** cofDC)$/;"	f
get_neighbors	src/mv_search.c	/^void get_neighbors(Macroblock *currMB,       \/\/ <--  current Macroblock$/;"	f
get_number_of_frames	src/configfile.c	/^void get_number_of_frames (InputParameters *p_Inp, VideoDataFile *input_file)$/;"	f
get_original_block	src/mv_search.c	/^void get_original_block(VideoParameters *p_Vid, MEBlock *mv_block)$/;"	f
get_pic_bin_count	src/biariencode.c	/^int get_pic_bin_count(VideoParameters *p_Vid)$/;"	f
get_pic_struct	src/sei.c	/^static int get_pic_struct( VideoParameters *p_Vid, int frame_no, int field_pic_flag, int top )$/;"	f	file:
get_picture_type	src/header.c	/^static int get_picture_type(Slice *currSlice)$/;"	f	file:
get_poc_type_one	src/pred_struct.c	/^void get_poc_type_one( VideoParameters *p_Vid, InputParameters *p_Inp, FrameUnitStruct *p_frm_struct )$/;"	f
get_poc_type_zero	src/pred_struct.c	/^void get_poc_type_zero( VideoParameters *p_Vid, InputParameters *p_Inp, FrameUnitStruct *p_frm_struct )$/;"	f
get_prd_index	src/pred_struct.c	/^static int get_prd_index( InputParameters *p_Inp, SeqStructure *p_seq_struct, int num_frames )$/;"	f	file:
get_predicted_concealment_mb	src/errdo_dist_mhyp.c	/^static void get_predicted_concealment_mb(Macroblock* currMB, StorablePicture* enc_pic, int decoder)$/;"	f	file:
get_predicted_mb	src/errdo_dist_mhyp.c	/^static void get_predicted_mb(Macroblock *currMB, StorablePicture *enc_pic, int decoder)$/;"	f	file:
get_random_access_flag	src/image.c	/^byte get_random_access_flag( VideoParameters *p_Vid )$/;"	f
get_search_range	src/mv_search.c	/^void get_search_range(MEBlock *mv_block, InputParameters *p_Inp, short ref, int blocktype)$/;"	f
get_short_term_pic	src/mbuffer.c	/^StorablePicture *get_short_term_pic(Slice *currSlice, DecodedPictureBuffer *p_Dpb, int picNum)$/;"	f
get_strength_hor_MBAff	src/loop_filter_mbaff.c	/^static void get_strength_hor_MBAff(byte Strength[MB_BLOCK_SIZE], Macroblock *MbQ, int edge, int mvlimit)$/;"	f	file:
get_strength_ver_MBAff	src/loop_filter_mbaff.c	/^static void get_strength_ver_MBAff(byte Strength[MB_BLOCK_SIZE], Macroblock *MbQ, int edge, int mvlimit)$/;"	f	file:
giRDOpt_B8OnlyFlag	inc/global.h	/^  Boolean giRDOpt_B8OnlyFlag;$/;"	m	struct:video_par
gop_levels	inc/pred_struct_types.h	/^  int gop_levels;$/;"	m	struct:pred_struct_atom
gop_structure	inc/global.h	/^  GOP_DATA *gop_structure;$/;"	m	struct:video_par
grayscale	inc/params.h	/^  int  grayscale;                       \/\/!< encode in grayscale (Currently only works for 8 bit, YUV 420)$/;"	m	struct:inp_par_enc
greaterOneBits	inc/rdoq.h	/^  int  greaterOneBits[2][5][2]; \/\/ c1 and c2$/;"	m	struct:est_bits_cabac
greaterOneState	inc/rdoq.h	/^  int  greaterOneState[5];$/;"	m	struct:est_bits_cabac
height	inc/global.h	/^  int height;                  \/\/!< Number of lines$/;"	m	struct:coding_par
height	inc/global.h	/^  int height;                  \/\/!< Number of lines$/;"	m	struct:video_par
height_blk	inc/global.h	/^  int                 height_blk;              \/\/!< Number of lines in blocks$/;"	m	struct:slice
height_blk	inc/global.h	/^  int height_blk;              \/\/!< Number of lines in blocks$/;"	m	struct:coding_par
height_blk	inc/global.h	/^  int height_blk;              \/\/!< Number of lines in blocks$/;"	m	struct:video_par
height_cr	inc/global.h	/^  int height_cr;               \/\/!< Number of lines  chroma$/;"	m	struct:coding_par
height_cr	inc/global.h	/^  int height_cr;               \/\/!< Number of lines  chroma$/;"	m	struct:video_par
height_cr_frame	inc/global.h	/^  int height_cr_frame;         \/\/!< Number of lines  chroma frame$/;"	m	struct:coding_par
height_cr_frame	inc/global.h	/^  int height_cr_frame;         \/\/!< Number of lines  chroma frame$/;"	m	struct:video_par
height_padded	inc/global.h	/^  int height_padded;           \/\/!< Number in lines of padded picture$/;"	m	struct:coding_par
height_padded	inc/global.h	/^  int height_padded;           \/\/!< Number in lines of padded picture$/;"	m	struct:video_par
hierNb	inc/rc_types.h	/^  int   hierNb[RC_MAX_TEMPORAL_LEVELS];$/;"	m	struct:rc_generic
hierarchyPocDelta	inc/global.h	/^  int hierarchyPocDelta;  \/\/! Currently unused$/;"	m	struct:__anon5
hierarchy_layer	inc/global.h	/^  int hierarchy_layer;    \/\/! Hierarchy layer (used with GOP Hierarchy option 2)$/;"	m	struct:__anon5
hm50_ref_management_frame_pic	src/mmco.c	/^void hm50_ref_management_frame_pic(DecodedPictureBuffer *p_Dpb, int current_pic_num)$/;"	f
hme_level	inc/global.h	/^  short            hme_level;        \/\/!< level for HME search;$/;"	m	struct:me_block
hme_ref_size_x_max	inc/global.h	/^  int              hme_ref_size_x_max;$/;"	m	struct:me_block
hme_ref_size_x_pad	inc/global.h	/^  int              hme_ref_size_x_pad;$/;"	m	struct:me_block
hme_ref_size_y_max	inc/global.h	/^  int              hme_ref_size_y_max;$/;"	m	struct:me_block
hme_ref_size_y_pad	inc/global.h	/^  int              hme_ref_size_y_pad;$/;"	m	struct:me_block
hor_offset	src/block.c	/^static const unsigned char hor_offset[4][4][4] =  {$/;"	v	file:
horizontal_symmetric_extension	src/img_dist_ms_ssim.c	/^void horizontal_symmetric_extension(int **buffer, int width, int height )$/;"	f
hours_flag	inc/sei.h	/^  Boolean hours_flag;$/;"	m	struct:__anon19
hours_value	inc/sei.h	/^  int hours_value;$/;"	m	struct:__anon19
i16blk4x4	inc/global.h	/^  int ****i16blk4x4;$/;"	m	struct:slice
i16mode	inc/global.h	/^  char                i16mode;$/;"	m	struct:macroblock_enc
i16mode	inc/global.h	/^  char    i16mode;$/;"	m	struct:rd_data
i16offset	inc/global.h	/^  short               i16offset;  $/;"	m	struct:macroblock_enc
i16offset	inc/global.h	/^  short   i16offset;$/;"	m	struct:rd_data
i16offset	inc/rdopt.h	/^  short i16offset;$/;"	m	struct:__anon27
iInterViewMBs	inc/global.h	/^  int iInterViewMBs;  $/;"	m	struct:video_par
ibuf	inc/global.h	/^  byte *ibuf;$/;"	m	struct:video_par
identify_level	src/parset.c	/^int identify_level(InputParameters *p_Inp)$/;"	f
identify_profile	src/parset.c	/^int identify_profile(InputParameters *p_Inp)$/;"	f
idr_flag	inc/global.h	/^  byte  idr_flag;$/;"	m	struct:picture
idr_flag	inc/global.h	/^  short               idr_flag;$/;"	m	struct:slice
idr_flag	inc/pred_struct_types.h	/^  int idr_flag;$/;"	m	struct:frame_struct
idr_flag	inc/pred_struct_types.h	/^  int idr_flag;$/;"	m	struct:pic_struct
idr_memory_management	src/mbuffer.c	/^static void idr_memory_management(DecodedPictureBuffer *p_Dpb, StorablePicture* p, FrameFormat *output)$/;"	f	file:
idr_period	inc/params.h	/^  int idr_period;                       \/\/!< IDR picture period$/;"	m	struct:inp_par_enc
idr_refresh	inc/global.h	/^  int idr_refresh;$/;"	m	struct:video_par
image_structure	inc/global.h	/^struct image_structure$/;"	s
img2buf	src/output.c	/^void img2buf (imgpel** imgX, unsigned char* buf, int size_x, int size_y, int symbol_size_in_bytes, int crop_left, int crop_right, int crop_top, int crop_bottom)$/;"	f
imgData	inc/global.h	/^  ImageData imgData;           \/\/!< Image data to be encoded$/;"	m	struct:video_par
imgData0	inc/global.h	/^  ImageData imgData0;          \/\/!< Input Image Data$/;"	m	struct:video_par
imgData1	inc/global.h	/^  ImageData imgData1;$/;"	m	struct:video_par
imgData2	inc/global.h	/^  ImageData imgData2;$/;"	m	struct:video_par
imgData3	inc/global.h	/^  ImageData imgData3;$/;"	m	struct:video_par
imgData32	inc/global.h	/^  ImageData imgData32;           \/\/!< Image data to be encoded$/;"	m	struct:video_par
imgData4	inc/global.h	/^  ImageData imgData4;$/;"	m	struct:video_par
imgData5	inc/global.h	/^  ImageData imgData5;$/;"	m	struct:video_par
imgData6	inc/global.h	/^  ImageData imgData6;$/;"	m	struct:video_par
imgDataOpt1	inc/global.h	/^  ImageData imgDataOpt1;$/;"	m	struct:video_par
imgDataOpt2	inc/global.h	/^  ImageData imgDataOpt2;$/;"	m	struct:video_par
imgREF	inc/global.h	/^  struct image_structure imgREF;$/;"	m	struct:video_par	typeref:struct:video_par::image_structure
imgREF0	inc/global.h	/^  struct image_structure imgREF0;$/;"	m	struct:video_par	typeref:struct:video_par::image_structure
imgREF1	inc/global.h	/^  struct image_structure imgREF1;$/;"	m	struct:video_par	typeref:struct:video_par::image_structure
imgRGB_ref	inc/global.h	/^  struct image_structure imgRGB_ref;$/;"	m	struct:video_par	typeref:struct:video_par::image_structure
imgRGB_src	inc/global.h	/^  struct image_structure imgRGB_src;$/;"	m	struct:video_par	typeref:struct:video_par::image_structure
imgRefData	inc/global.h	/^  ImageData imgRefData;$/;"	m	struct:video_par
imgSRC	inc/global.h	/^  struct image_structure imgSRC;$/;"	m	struct:video_par	typeref:struct:video_par::image_structure
imgUV	inc/mbuffer.h	/^  imgpel ***  imgUV;         \/\/!< U and V picture components$/;"	m	struct:storable_picture
imgUV_com	inc/global.h	/^  imgpel   **imgUV_com[2];              \/\/!< Encoded croma images$/;"	m	struct:video_par
imgUV_com_buf	inc/global.h	/^  imgpel   **imgUV_com_buf[2][2];              \/\/!< Encoded croma images$/;"	m	struct:video_par
imgUV_sub	inc/mbuffer.h	/^  imgpel *****imgUV_sub;     \/\/!< UV picture component upsampled (Quarter\/One-Eighth pel)$/;"	m	struct:storable_picture
imgUV_tmp	inc/global.h	/^  imgpel **imgUV_tmp[2];$/;"	m	struct:video_par
imgUV_tmp_buf	inc/global.h	/^  imgpel **imgUV_tmp_buf[2][2];$/;"	m	struct:video_par
imgY	inc/mbuffer.h	/^  imgpel **   imgY;          \/\/!< Y picture component$/;"	m	struct:storable_picture
imgY_com	inc/global.h	/^  imgpel    **imgY_com;               \/\/!< Encoded luma images$/;"	m	struct:video_par
imgY_com_buf	inc/global.h	/^  imgpel    **imgY_com_buf[2];               \/\/!< Encoded luma images$/;"	m	struct:video_par
imgY_sub	inc/mbuffer.h	/^  imgpel **** imgY_sub;      \/\/!< Y picture component upsampled (Quarter pel)$/;"	m	struct:storable_picture
imgY_sub_tmp	inc/global.h	/^  int       **imgY_sub_tmp;           \/\/!< Y picture temporary component (Quarter pel)$/;"	m	struct:video_par
imgY_tmp	inc/global.h	/^  imgpel **imgY_tmp;$/;"	m	struct:video_par
imgY_tmp_buf	inc/global.h	/^  imgpel **imgY_tmp_buf[2];$/;"	m	struct:video_par
imgpel_abs	inc/global.h	/^  int* imgpel_abs;$/;"	m	struct:video_par
imgpel_abs_range	inc/global.h	/^  int  imgpel_abs_range;$/;"	m	struct:video_par
imgpel_quad	inc/global.h	/^  int* imgpel_quad;$/;"	m	struct:video_par
imgpel_to_padded_int	src/img_dist_ms_ssim.c	/^static void imgpel_to_padded_int(imgpel** src, int **buffer, int width, int height)$/;"	f	file:
iminarray	src/mode_decision.c	/^int iminarray ( int arr[], int size, int *minind )$/;"	f
inf	inc/global.h	/^  int                 inf;            \/\/!< info part of UVLC code$/;"	m	struct:syntaxelement_enc
infile_header	inc/params.h	/^  int  infile_header;                   \/\/!< If input file has a header set this to the length of the header$/;"	m	struct:inp_par_enc
info	inc/explicit_seq.h	/^  ExpFrameInfo *info;$/;"	m	struct:exp_seq_info
info_8x8	inc/global.h	/^struct info_8x8$/;"	s
information_init	src/report.c	/^void information_init ( VideoParameters *p_Vid, InputParameters *p_Inp, StatParameters *p_Stats)$/;"	f
init_Deblock	src/loopFilter.c	/^static void  init_Deblock(VideoParameters *p_Vid)$/;"	f	file:
init_ME_engine	src/mv_search.c	/^void init_ME_engine(Macroblock *currMB)$/;"	f
init_YUVtoRGB	src/cconv_yuv2rgb.c	/^void init_YUVtoRGB(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
init_bipred_enabled	src/slice.c	/^static void init_bipred_enabled(VideoParameters *p_Vid)$/;"	f	file:
init_coding_state_methods	src/rdopt_coding_state.c	/^void init_coding_state_methods(Slice *currSlice)$/;"	f
init_contexts	src/context_ini.c	/^void init_contexts (Slice *currSlice)$/;"	f
init_dec_ref_pic_marking_buffer	src/image.c	/^static void init_dec_ref_pic_marking_buffer(VideoParameters *p_Vid)$/;"	f	file:
init_distortion_estimation	src/errdo.c	/^void init_distortion_estimation(VideoParameters *p_Vid, int de_algorithm)$/;"	f
init_done	inc/mbuffer.h	/^  int           init_done;$/;"	m	struct:decoded_picture_buffer
init_dpb	src/mbuffer.c	/^void init_dpb(VideoParameters *p_Vid, DecodedPictureBuffer *p_Dpb)$/;"	f
init_dstats	src/lencod.c	/^void init_dstats (DistortionParams *p_Dist)$/;"	f
init_enc_mb_params	src/mode_decision.c	/^void init_enc_mb_params(Macroblock* currMB, RD_PARAMS *enc_mb, int intra)$/;"	f
init_encoder	src/lencod.c	/^static void init_encoder(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f	file:
init_error_conceal	src/errdo.c	/^void init_error_conceal(VideoParameters *p_Vid, int concealment_type)$/;"	f
init_field	src/image.c	/^static void init_field (VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f	file:
init_fixed_qp	src/image.c	/^static void init_fixed_qp(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f	file:
init_fixed_qp_i_slice	src/image.c	/^static inline void init_fixed_qp_i_slice(VideoParameters *p_Vid, InputParameters *p_Inp, FrameUnitStruct *p_cur_frm )$/;"	f	file:
init_fixed_qp_pb_slice	src/image.c	/^static inline void init_fixed_qp_pb_slice(VideoParameters *p_Vid, InputParameters *p_Inp, FrameUnitStruct *p_cur_frm, int type )$/;"	f	file:
init_fixed_qp_sp_slice	src/image.c	/^static inline void init_fixed_qp_sp_slice(VideoParameters *p_Vid, InputParameters *p_Inp, FrameUnitStruct *p_cur_frm )$/;"	f	file:
init_frame	src/image.c	/^static void init_frame (VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f	file:
init_global_buffers	src/lencod.c	/^static int init_global_buffers(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f	file:
init_gop_struct	src/pred_struct.c	/^static void init_gop_struct( InputParameters *p_Inp, SeqStructure *p_seq_struct, int is_idr, int *memory_size )$/;"	f	file:
init_gop_structure	src/explicit_gop.c	/^void init_gop_structure(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
init_img	src/lencod.c	/^static void init_img( VideoParameters *p_Vid)$/;"	f	file:
init_info_8x8_struct	src/rdopt.c	/^Info8x8 init_info_8x8_struct(void)$/;"	f
init_lists	inc/global.h	/^  void (*init_lists               ) (struct slice *currSlice);$/;"	m	struct:slice
init_lists_b_slice	src/mbuffer.c	/^void init_lists_b_slice(Slice *currSlice)$/;"	f
init_lists_i_slice	src/mbuffer.c	/^void init_lists_i_slice(Slice *currSlice)$/;"	f
init_lists_p_slice	src/mbuffer.c	/^void init_lists_p_slice(Slice *currSlice)$/;"	f
init_mb_line_intra_up	src/image.c	/^static void init_mb_line_intra_up(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f	file:
init_mbaff_lists	src/mbuffer.c	/^void init_mbaff_lists(Slice *currSlice)$/;"	f
init_md_best	src/rdopt.c	/^void init_md_best(BestMode  *best)$/;"	f
init_motion_search_module	src/mv_search.c	/^void init_motion_search_module (VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
init_mv_block	src/mv_search.c	/^void init_mv_block(Macroblock *currMB, MEBlock *mv_block, short blocktype, int list, char ref_idx, short mb_x, short mb_y)$/;"	f
init_orig_buffers	src/lencod.c	/^int init_orig_buffers(VideoParameters *p_Vid, ImageData *imgData)$/;"	f
init_out_buffer	src/output.c	/^void init_out_buffer(VideoParameters *p_Vid)$/;"	f
init_poc	src/pred_struct.c	/^void init_poc(VideoParameters *p_Vid)$/;"	f
init_pred_struct	src/pred_struct.c	/^static void init_pred_struct( VideoParameters *p_Vid, InputParameters *p_Inp, SeqStructure *p_seq_struct, int *memory_size )$/;"	f	file:
init_process_image	src/lencod.c	/^int init_process_image( VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
init_qmatrix	src/q_matrix.c	/^void init_qmatrix (VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
init_qoffset	src/q_offsets.c	/^void init_qoffset (VideoParameters *p_Vid)$/;"	f
init_quant_4x4	src/quant4x4.c	/^void init_quant_4x4(Slice *currSlice)$/;"	f
init_quant_8x8	src/quant8x8.c	/^void init_quant_8x8(Slice *currSlice)$/;"	f
init_quant_Chroma	src/quantChroma.c	/^void init_quant_Chroma(Slice *currSlice)$/;"	f
init_rdopt	src/rdopt.c	/^void init_rdopt (Slice *currSlice)$/;"	f
init_rdoq_slice	src/rdoq.c	/^void init_rdoq_slice(Slice *currSlice)$/;"	f
init_redundant_frame	src/lencod.c	/^void init_redundant_frame(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
init_ref_pic_list_reordering	src/list_reorder.c	/^void init_ref_pic_list_reordering(Slice* currSlice, int refReorderMethod)$/;"	f
init_sei	src/sei.c	/^void init_sei(SEIParameters *p_SEI)$/;"	f
init_seq_structure	src/pred_struct.c	/^SeqStructure * init_seq_structure( VideoParameters *p_Vid, InputParameters *p_Inp, int *memory_size )$/;"	f
init_slice	src/slice.c	/^void init_slice (VideoParameters *p_Vid, Slice **currSlice, int start_mb_addr)$/;"	f
init_slice_lite	src/slice.c	/^void init_slice_lite (VideoParameters *p_Vid, Slice **currSlice, int start_mb_addr)$/;"	f
init_stats	src/lencod.c	/^void init_stats (InputParameters *p_Inp, StatParameters *p_Stats)$/;"	f
init_trellis_data_4x4_CABAC	src/rdoq_cabac.c	/^int init_trellis_data_4x4_CABAC(Macroblock *currMB, int **tblock, $/;"	f
init_trellis_data_4x4_CAVLC	src/rdoq_cavlc.c	/^void init_trellis_data_4x4_CAVLC(Macroblock *currMB, int **tblock, int block_x, int qp_per, int qp_rem, LevelQuantParams **q_params,$/;"	f
init_trellis_data_8x8_CABAC	src/rdoq_cabac.c	/^int init_trellis_data_8x8_CABAC(Macroblock *currMB, int **tblock, int block_x, int qp_per, int qp_rem, LevelQuantParams **q_params, const byte *p_scan, $/;"	f
init_trellis_data_8x8_CAVLC	src/rdoq_cavlc.c	/^void init_trellis_data_8x8_CAVLC(Macroblock *currMB, int **tblock, int block_x, int qp_per, int qp_rem, LevelQuantParams **q_params, $/;"	f
init_trellis_data_DC_CABAC	src/rdoq_cabac.c	/^int init_trellis_data_DC_CABAC(Macroblock *currMB, int **tblock, int qp_per, int qp_rem, $/;"	f
init_trellis_data_DC_CAVLC	src/rdoq_cavlc.c	/^void init_trellis_data_DC_CAVLC(Macroblock *currMB, int **tblock, int qp_per, int qp_rem, $/;"	f
init_trellis_data_DC_cr_CABAC	src/rdoq.c	/^int init_trellis_data_DC_cr_CABAC(Macroblock *currMB, int **tblock, int qp_per, int qp_rem, $/;"	f
init_trellis_data_DC_cr_CAVLC	src/rdoq.c	/^int init_trellis_data_DC_cr_CAVLC(Macroblock *currMB, int **tblock, int qp_per, int qp_rem, $/;"	f
initial_Bframes	inc/global.h	/^  int initial_Bframes;$/;"	m	struct:video_par
initialize_fast_full_search	src/me_fullfast.c	/^void initialize_fast_full_search (VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
initialized	inc/global.h	/^  int*** initialized;$/;"	m	struct:video_par
inp_par_enc	inc/params.h	/^struct inp_par_enc$/;"	s
input_file1	inc/params.h	/^  VideoDataFile   input_file1;          \/\/!< Input video file1$/;"	m	struct:inp_par_enc
input_file2	inc/params.h	/^  VideoDataFile   input_file2;          \/\/!< Input video file2$/;"	m	struct:inp_par_enc
input_file3	inc/params.h	/^  VideoDataFile   input_file3;          \/\/!< Input video file3$/;"	m	struct:inp_par_enc
insert_picture_in_dpb	src/mbuffer.c	/^static void insert_picture_in_dpb(VideoParameters *p_Vid, FrameStore* fs, StorablePicture* p)$/;"	f	file:
inter_view_flag	inc/global.h	/^  int inter_view_flag[2];$/;"	m	struct:video_par
inter_view_flag	inc/mbuffer.h	/^  int         inter_view_flag[2];$/;"	m	struct:storable_picture
inter_view_flag	inc/mbuffer.h	/^  int       inter_view_flag[2];$/;"	m	struct:frame_store
interpret_gop_structure	src/explicit_gop.c	/^void interpret_gop_structure(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
intra16x16_pred	inc/global.h	/^  imgpel              **intra16x16_pred; \/\/[3][33]; \/\/!< 8x8 Intra prediction samples$/;"	m	struct:macroblock_enc
intra16x16_pred_buf	inc/global.h	/^  imgpel              **intra16x16_pred_buf[2]; \/\/[3][33]; \/\/!< 8x8 Intra prediction samples$/;"	m	struct:macroblock_enc
intra4x4_pred	inc/global.h	/^  imgpel              **intra4x4_pred; \/\/[3][17]; \/\/!< 4x4 Intra prediction samples$/;"	m	struct:macroblock_enc
intra4x4_pred_buf	inc/global.h	/^  imgpel              **intra4x4_pred_buf[2]; \/\/[3][17]; \/\/!< 4x4 Intra prediction samples$/;"	m	struct:macroblock_enc
intra8x8_pred	inc/global.h	/^  imgpel              **intra8x8_pred; \/\/[3][25]; \/\/!< 8x8 Intra prediction samples$/;"	m	struct:macroblock_enc
intra8x8_pred_buf	inc/global.h	/^  imgpel              **intra8x8_pred_buf[2]; \/\/[3][25]; \/\/!< 8x8 Intra prediction samples$/;"	m	struct:macroblock_enc
intra_block	inc/global.h	/^  short   *intra_block;$/;"	m	struct:video_par
intra_chroma_RD_decision	inc/global.h	/^  void    (*intra_chroma_RD_decision)           (Macroblock *currMB, RD_PARAMS *);$/;"	m	struct:slice
intra_chroma_RD_decision	src/intra_chroma.c	/^void intra_chroma_RD_decision (Macroblock *currMB, RD_PARAMS *enc_mb)$/;"	f
intra_chroma_RD_decision_mbaff	src/intra_chroma.c	/^void intra_chroma_RD_decision_mbaff (Macroblock *currMB, RD_PARAMS *enc_mb)$/;"	f
intra_chroma_prediction	inc/global.h	/^  void    (*intra_chroma_prediction)            (Macroblock *currMB, int*, int*, int*);$/;"	m	struct:slice
intra_chroma_prediction	src/intra_chroma.c	/^void intra_chroma_prediction (Macroblock *currMB, int *mb_up, int *mb_left, int*mb_up_left)$/;"	f
intra_chroma_prediction_mbaff	src/intra_chroma.c	/^void intra_chroma_prediction_mbaff(Macroblock *currMB, int *mb_up, int *mb_left, int*mb_up_left)$/;"	f
intra_delay	inc/params.h	/^  int intra_delay;                      \/\/!< IDR picture delay$/;"	m	struct:inp_par_enc
intra_period	inc/params.h	/^  int intra_period;                     \/\/!< intra picture period$/;"	m	struct:inp_par_enc
intra_pred_modes	inc/global.h	/^  char                intra_pred_modes   [MB_BLOCK_PARTITIONS];$/;"	m	struct:macroblock_enc
intra_pred_modes	inc/global.h	/^  char    intra_pred_modes[16];$/;"	m	struct:rd_data
intra_pred_modes8x8	inc/global.h	/^  char                intra_pred_modes8x8[MB_BLOCK_PARTITIONS];           \/\/!< four 8x8 blocks in a macroblock$/;"	m	struct:macroblock_enc
intra_pred_modes8x8	inc/global.h	/^  char    intra_pred_modes8x8[16];$/;"	m	struct:rd_data
intra_upd	inc/params.h	/^  int intra_upd;                        \/*!< For error robustness. 0: no special action. 1: One GOB\/frame is intra coded$/;"	m	struct:inp_par_enc
intras	inc/global.h	/^  int intras;         \/\/!< Counts the intra updates in each frame.$/;"	m	struct:video_par
intras	inc/global.h	/^  int intras;$/;"	m	struct:prev_coding_stats
intras	inc/image.h	/^  int   intras;   $/;"	m	struct:coding_info
ipmode_DPCM	inc/global.h	/^  short               ipmode_DPCM;$/;"	m	struct:macroblock_enc
ipr_contexts	inc/global.h	/^  BiContextType  ipr_contexts [NUM_IPR_CTX];$/;"	m	struct:__anon2
ipredmode	inc/global.h	/^  char    **ipredmode;$/;"	m	struct:rd_data
ipredmode	inc/global.h	/^  char **ipredmode;            \/\/!< intra prediction mode$/;"	m	struct:video_par
ipredmode4x4_line	inc/global.h	/^  char **ipredmode4x4_line;     \/\/!< intra prediction mode$/;"	m	struct:video_par
ipredmode8x8	inc/global.h	/^  char **ipredmode8x8;         \/\/!< help storage for 8x8 modes, inserted by YV$/;"	m	struct:video_par
ipredmode8x8_line	inc/global.h	/^  char **ipredmode8x8_line;     \/\/!< help storage for 8x8 modes, inserted by YV$/;"	m	struct:video_par
isCenterBiased	inc/global.h	/^  short               isCenterBiased;  \/\/中心偏置$/;"	m	struct:macroblock_enc
is_FREXT_profile	inc/global.h	/^static inline int is_FREXT_profile(unsigned int profile_idc) $/;"	f
is_MVC_profile	inc/global.h	/^static inline int is_MVC_profile(unsigned int profile_idc)$/;"	f
is_bipred_enabled	src/mode_decision.c	/^int is_bipred_enabled(VideoParameters *p_Vid, int mode) $/;"	f
is_block_available	src/me_epzs_common.c	/^is_block_available (Macroblock * currMB, StorablePicture * ref_picture, MEBlock * mv_block, int block_available[4])$/;"	f	file:
is_field	inc/explicit_seq.h	/^  int is_field;$/;"	m	struct:__anon26
is_field_mode	inc/global.h	/^  byte                is_field_mode;$/;"	m	struct:macroblock_enc
is_gop_first_unit	src/image.c	/^static int is_gop_first_unit(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f	file:
is_idr	inc/explicit_seq.h	/^  int is_idr;$/;"	m	struct:__anon26
is_inter_layer	inc/mbuffer.h	/^  Boolean   is_inter_layer;$/;"	m	struct:frame_store
is_interleaved	inc/params.h	/^  int is_interleaved;$/;"	m	struct:inp_par_enc
is_interview_mb	src/macroblock.c	/^int is_interview_mb(Macroblock *currMB)$/;"	f
is_intra	inc/global.h	/^static inline int is_intra(Macroblock *curr_MB)$/;"	f
is_intra_block	inc/global.h	/^  byte                is_intra_block;$/;"	m	struct:macroblock_enc
is_long_term	inc/mbuffer.h	/^  byte        is_long_term;$/;"	m	struct:storable_picture
is_long_term	inc/mbuffer.h	/^  int       is_long_term;           \/\/!< 0=not used for ref; 1=top used; 2=bottom used; 3=both fields (or frame) used$/;"	m	struct:frame_store
is_non_existent	inc/mbuffer.h	/^  int       is_non_existent;$/;"	m	struct:frame_store
is_orig_reference	inc/mbuffer.h	/^  int       is_orig_reference;      \/\/!< original marking by nal_ref_idc: 0=not used for ref; 1=top used; 2=bottom used; 3=both fields (or frame) used$/;"	m	struct:frame_store
is_output	inc/mbuffer.h	/^  int         is_output;$/;"	m	struct:storable_picture
is_output	inc/mbuffer.h	/^  int       is_output;$/;"	m	struct:frame_store
is_qpel	inc/get_block_otf.h	/^static inline int is_qpel( int x, int y, int bx, int by ) $/;"	f
is_reference	inc/mbuffer.h	/^  int       is_reference;           \/\/!< 0=not used for ref; 1=top used; 2=bottom used; 3=both fields (or frame) used$/;"	m	struct:frame_store
is_used	inc/mbuffer.h	/^  int       is_used;                \/\/!< 0=empty; 1=top; 2=bottom; 3=both fields (or frame)$/;"	m	struct:frame_store
is_v_block	inc/global.h	/^  int is_v_block;$/;"	m	struct:video_par
iteration_no	inc/global.h	/^  int              iteration_no;  \/\/ <--  bi pred iteration number$/;"	m	struct:me_block
itu_t_t35_country_code	inc/sei.h	/^  int itu_t_t35_country_code;$/;"	m	struct:__anon17
itu_t_t35_country_code_extension_byte	inc/sei.h	/^  int itu_t_t35_country_code_extension_byte;$/;"	m	struct:__anon17
jumpd	inc/params.h	/^  int jumpd;                            \/*!< number of frames to skip in input sequence including intermediate pictures $/;"	m	struct:inp_par_enc
key_frame	inc/global.h	/^  int  key_frame;$/;"	m	struct:video_par
l0_cost	inc/me_umhexsmp.h	/^  distblk  ***l0_cost;       \/\/store SAD information needed for forward median and uplayer prediction$/;"	m	struct:umhex_smp_struct
l0_refframe	inc/rdopt.h	/^  char  **l0_refframe;$/;"	m	struct:rdo_structure
l1_cost	inc/me_umhexsmp.h	/^  distblk  ***l1_cost;       \/\/store SAD information needed for backward median and uplayer prediction$/;"	m	struct:umhex_smp_struct
l1_refframe	inc/rdopt.h	/^  char  **l1_refframe;$/;"	m	struct:rdo_structure
lambda	inc/global.h	/^  LambdaParams **lambda;  $/;"	m	struct:video_par
lambda	inc/global.h	/^  int lambda;$/;"	m	struct:prev_coding_stats
lambda_buf	inc/global.h	/^  LambdaParams **lambda_buf[2];  $/;"	m	struct:video_par
lambda_md	inc/global.h	/^  double  **lambda_md;     \/\/!< Mode decision Lambda$/;"	m	struct:video_par
lambda_md	inc/global.h	/^  double lambda_md;        \/\/!< Mode decision Lambda$/;"	m	struct:rd_params
lambda_md_buf	inc/global.h	/^  double  **lambda_md_buf[2];     \/\/!< Mode decision Lambda$/;"	m	struct:video_par
lambda_mdfp	inc/global.h	/^  int    lambda_mdfp;       \/\/!< Fixed point mode decision lambda;$/;"	m	struct:rd_params
lambda_me	inc/global.h	/^  double ***lambda_me;     \/\/!< Motion Estimation Lambda$/;"	m	struct:video_par
lambda_me	inc/global.h	/^  double lambda_me[3];     \/\/!< Motion Estimation Lambda$/;"	m	struct:rd_params
lambda_me_buf	inc/global.h	/^  double ***lambda_me_buf[2];     \/\/!< Motion Estimation Lambda$/;"	m	struct:video_par
lambda_mf	inc/global.h	/^  int    ***lambda_mf;     \/\/!< Integer formatted Motion Estimation Lambda$/;"	m	struct:video_par
lambda_mf	inc/global.h	/^  int    lambda_mf[3];     \/\/!< Integer formatted Motion Estimation Lambda$/;"	m	struct:rd_params
lambda_mf_buf	inc/global.h	/^  int    ***lambda_mf_buf[2];     \/\/!< Integer formatted Motion Estimation Lambda$/;"	m	struct:video_par
lambda_mf_factor	inc/global.h	/^  double **lambda_mf_factor; \/\/!< Motion Estimation Lamda Scale Factor$/;"	m	struct:video_par
lambda_mf_factor	inc/rdopt.h	/^  double lambda_mf_factor;$/;"	m	struct:rdo_structure
lambda_mf_factor_buf	inc/global.h	/^  double **lambda_mf_factor_buf[2]; \/\/!< Motion Estimation Lamda Scale Factor$/;"	m	struct:video_par
lambda_rdoq	inc/global.h	/^  double  **lambda_rdoq;   \/\/!< RDOQ Lambda$/;"	m	struct:video_par
lambda_rdoq_buf	inc/global.h	/^  double  **lambda_rdoq_buf[2];   \/\/!< RDOQ Lambda$/;"	m	struct:video_par
lastBits	inc/rdoq.h	/^  int  lastBits[16][2];$/;"	m	struct:est_bits_cabac
lastINTRA	inc/global.h	/^  int lastINTRA;$/;"	m	struct:video_par
lastIntraNumber	inc/global.h	/^  int lastIntraNumber;$/;"	m	struct:video_par
last_bit_ctr_n	inc/global.h	/^  int64 last_bit_ctr_n;$/;"	m	struct:video_par
last_bl_frm_disposable	inc/pred_struct_types.h	/^  int last_bl_frm_disposable; \/\/ check whether the last frame with layer == 0 (highest priority) $/;"	m	struct:seq_struct
last_contexts	inc/global.h	/^  BiContextType  last_contexts[1][NUM_BLOCK_TYPES][NUM_LAST_CTX];$/;"	m	struct:__anon2
last_contexts	inc/global.h	/^  BiContextType  last_contexts[2][NUM_BLOCK_TYPES][NUM_LAST_CTX];$/;"	m	struct:__anon2
last_has_mmco_5	inc/global.h	/^  int last_has_mmco_5;$/;"	m	struct:video_par
last_idr_code_order	inc/global.h	/^  int last_idr_code_order;$/;"	m	struct:video_par
last_idr_disp	inc/pred_struct_types.h	/^  int last_idr_disp;$/;"	m	struct:seq_struct
last_idr_disp_order	inc/global.h	/^  int last_idr_disp_order;$/;"	m	struct:video_par
last_idr_frame	inc/pred_struct_types.h	/^  int last_idr_frame;$/;"	m	struct:seq_struct
last_intra_disp	inc/pred_struct_types.h	/^  int last_intra_disp;$/;"	m	struct:seq_struct
last_intra_frame	inc/pred_struct_types.h	/^  int last_intra_frame;$/;"	m	struct:seq_struct
last_mmco_5_code_order	inc/global.h	/^  int last_mmco_5_code_order; \/\/!< it is a good idea to re-initialize POCs after such a frame: while seemingly not required it is critical for good implicit WP performance (I *THINK*) since POCs are set internally to zero after an MMCO=5 command.$/;"	m	struct:video_par
last_mmco_5_disp_order	inc/global.h	/^  int last_mmco_5_disp_order;$/;"	m	struct:video_par
last_mmco_5_frame	inc/pred_struct_types.h	/^  int last_mmco_5_frame; \/\/ values during building the structure: have *not* happened yet!$/;"	m	struct:seq_struct
last_output_poc	inc/mbuffer.h	/^  int           last_output_poc;$/;"	m	struct:decoded_picture_buffer
last_output_view_id	inc/mbuffer.h	/^  int           last_output_view_id;$/;"	m	struct:decoded_picture_buffer
last_pic_bottom_field	inc/global.h	/^  int last_pic_bottom_field;$/;"	m	struct:video_par
last_picture	inc/mbuffer.h	/^  FrameStore   *last_picture;$/;"	m	struct:decoded_picture_buffer
last_picture_flag	inc/sei.h	/^  unsigned int last_picture_flag;$/;"	m	struct:__anon11
last_rand_access_disp	inc/pred_struct_types.h	/^  int last_rand_access_disp;$/;"	m	struct:seq_struct
last_random_access_frame	inc/pred_struct_types.h	/^  int last_random_access_frame;$/;"	m	struct:seq_struct
last_ref_idc	inc/global.h	/^  int last_ref_idc;$/;"	m	struct:coding_par
last_ref_idc	inc/global.h	/^  int last_ref_idc;$/;"	m	struct:video_par
last_sp_disp	inc/pred_struct_types.h	/^  int last_sp_disp;$/;"	m	struct:seq_struct
last_sp_frame	inc/pred_struct_types.h	/^  int last_sp_frame;$/;"	m	struct:seq_struct
last_valid_reference	inc/global.h	/^  int last_valid_reference;$/;"	m	struct:video_par
layer	inc/global.h	/^  int layer;              \/\/!< which layer this picture belonged to$/;"	m	struct:video_par
layer	inc/pred_struct_types.h	/^  int layer; \/\/ the lower the higher the priority$/;"	m	struct:pred_struct_frm
layer	inc/pred_struct_types.h	/^  int layer;$/;"	m	struct:frame_struct
layer_id	inc/global.h	/^  int                 layer_id;$/;"	m	struct:slice
layer_id	inc/global.h	/^  int layer_id;$/;"	m	struct:coding_par
layer_id	inc/mbuffer.h	/^  int           layer_id;$/;"	m	struct:decoded_picture_buffer
layer_number	inc/sei.h	/^  int layer_number;$/;"	m	struct:__anon12
ldiamond	inc/global.h	/^  struct epzs_struct *ldiamond;$/;"	m	struct:video_par	typeref:struct:video_par::epzs_struct
len	inc/global.h	/^  int                 len;            \/\/!< length of code$/;"	m	struct:syntaxelement_enc
length	inc/pred_struct_types.h	/^  int length;$/;"	m	struct:pred_struct_atom
level	inc/rdoq.h	/^  int level[3];$/;"	m	struct:level_data_struct
levelDataStruct	inc/rdoq.h	/^} levelDataStruct;$/;"	t	typeref:struct:level_data_struct
levelDouble	inc/rdoq.h	/^  int  levelDouble;$/;"	m	struct:level_data_struct
level_check	src/conformance.c	/^void level_check(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
level_data_struct	inc/rdoq.h	/^typedef struct level_data_struct$/;"	s
levrun_linfo_c2x2	src/vlc.c	/^void levrun_linfo_c2x2(int level,int run,int *len,int *info)$/;"	f
levrun_linfo_inter	src/vlc.c	/^void levrun_linfo_inter(int level,int run,int *len,int *info)$/;"	f
list	inc/global.h	/^  char             list;             \/\/!< current list (list 0 or list 1). This is needed for bipredictive ME$/;"	m	struct:me_block
listX	inc/global.h	/^  struct storable_picture **listX[6];$/;"	m	struct:slice	typeref:struct:slice::storable_picture
listXsize	inc/global.h	/^  char listXsize[6];$/;"	m	struct:slice
list_offset	inc/global.h	/^  short               list_offset;$/;"	m	struct:macroblock_enc
list_prediction_cost	src/mode_decision.c	/^void list_prediction_cost(Macroblock *currMB, int list, int block, int mode, RD_PARAMS *enc_mb, distblk bmcost[5], char best_ref[2])$/;"	f
log2_max_frame_num_minus4	inc/global.h	/^  unsigned int log2_max_frame_num_minus4;$/;"	m	struct:video_par
log2_max_pic_order_cnt_lsb_minus4	inc/global.h	/^  unsigned int log2_max_pic_order_cnt_lsb_minus4;$/;"	m	struct:video_par
long_term_frame_idx	inc/global.h	/^  int long_term_frame_idx;$/;"	m	struct:DecRefPicMarking_s
long_term_frame_idx	inc/mbuffer.h	/^  int         long_term_frame_idx;$/;"	m	struct:storable_picture
long_term_frame_idx	inc/mbuffer.h	/^  int       long_term_frame_idx;$/;"	m	struct:frame_store
long_term_pic_idx	inc/global.h	/^  int                 *long_term_pic_idx[2];$/;"	m	struct:slice
long_term_pic_num	inc/global.h	/^  int long_term_pic_num;$/;"	m	struct:DecRefPicMarking_s
long_term_pic_num	inc/mbuffer.h	/^  int         long_term_pic_num;$/;"	m	struct:storable_picture
long_term_reference_flag	inc/global.h	/^  Boolean long_term_reference_flag;$/;"	m	struct:video_par
lossless_qpprime_flag	inc/global.h	/^  int                 lossless_qpprime_flag;$/;"	m	struct:slice
low_delay_ref_management_frame_pic	src/mmco.c	/^void low_delay_ref_management_frame_pic(DecodedPictureBuffer *p_Dpb, int current_pic_num)$/;"	f
lrec	inc/global.h	/^  int **lrec; \/\/ transform and quantized coefficients will be stored here for SP frames$/;"	m	struct:rd_8x8_data
lrec	inc/global.h	/^  int **lrec;$/;"	m	struct:video_par
lrec_rec	inc/rdopt.h	/^  int    **lrec_rec;$/;"	m	struct:rdo_structure
lrec_rec_uv	inc/rdopt.h	/^  int   ***lrec_rec_uv;$/;"	m	struct:rdo_structure
lrec_uv	inc/global.h	/^  int ***lrec_uv;$/;"	m	struct:video_par
ltref_frames_in_buffer	inc/mbuffer.h	/^  unsigned      ltref_frames_in_buffer;$/;"	m	struct:decoded_picture_buffer
luma	inc/global.h	/^  imgpel ****luma;    \/\/!< component 0 (usually Y, X, or R)$/;"	m	struct:__anon6
luma_log_weight_denom	inc/global.h	/^  short               luma_log_weight_denom;$/;"	m	struct:slice
luma_prediction	src/mc_prediction.c	/^void luma_prediction (Macroblock* currMB, \/\/!< Current Macroblock$/;"	f
luma_prediction_bi	src/mc_prediction.c	/^void luma_prediction_bi (Macroblock* currMB, \/\/!< Current Macroblock$/;"	f
luma_prediction_bi_otf	src/mc_prediction_otf.c	/^void luma_prediction_bi_otf ( Macroblock* currMB, \/\/!< Current Macroblock$/;"	f
luma_prediction_otf	src/mc_prediction_otf.c	/^void luma_prediction_otf ( Macroblock* currMB, \/\/!< Current Macroblock$/;"	f
luma_residual_coding	inc/global.h	/^  void    (*luma_residual_coding)               (Macroblock *currMB);$/;"	m	struct:slice
luma_residual_coding	src/macroblock.c	/^void luma_residual_coding (Macroblock *currMB)$/;"	f
luma_residual_coding_16x16	src/macroblock.c	/^int luma_residual_coding_16x16 (Macroblock* currMB,  \/\/!< Current Macroblock to be coded$/;"	f
luma_residual_coding_8x8	inc/global.h	/^  int     (*luma_residual_coding_8x8)           (Macroblock* currMB, int*, int64*, int, short, int[2], char *);$/;"	m	struct:slice
luma_residual_coding_8x8	src/macroblock.c	/^int luma_residual_coding_8x8 (Macroblock* currMB,  \/\/!< Current Macroblock to be coded$/;"	f
luma_residual_coding_p444	src/macroblock_P444.c	/^void luma_residual_coding_p444 (Macroblock *currMB)$/;"	f
luma_residual_coding_p444_16x16	src/macroblock_P444.c	/^int luma_residual_coding_p444_16x16 (Macroblock* currMB,  \/\/!< Current Macroblock to be coded$/;"	f
luma_residual_coding_p444_8x8	src/macroblock_P444.c	/^int luma_residual_coding_p444_8x8 (Macroblock* currMB,  \/\/!< Current Macroblock to be coded$/;"	f
luma_residual_coding_sp	src/macroblock.c	/^void luma_residual_coding_sp (Macroblock *currMB)$/;"	f
luma_transform_size_8x8_flag	inc/global.h	/^  byte                luma_transform_size_8x8_flag;$/;"	m	struct:macroblock_enc
luma_transform_size_8x8_flag	inc/global.h	/^  byte    luma_transform_size_8x8_flag;$/;"	m	struct:rd_data
m	inc/rtp.h	/^  unsigned int m;          \/\/!< Marker bit$/;"	m	struct:__anon24
m_Qc	inc/rc_types.h	/^  int    m_Qc;$/;"	m	struct:rc_quadratic
m_X1	inc/rc_types.h	/^  double m_X1;$/;"	m	struct:rc_quadratic
m_X2	inc/rc_types.h	/^  double m_X2;$/;"	m	struct:rc_quadratic
m_rgQp	inc/rc_types.h	/^  double m_rgQp      [RC_MODEL_HISTORY];$/;"	m	struct:rc_quadratic
m_rgRp	inc/rc_types.h	/^  double m_rgRp      [RC_MODEL_HISTORY];$/;"	m	struct:rc_quadratic
m_windowSize	inc/rc_types.h	/^  int    m_windowSize;$/;"	m	struct:rc_quadratic
macroblock_enc	inc/global.h	/^typedef struct macroblock_enc$/;"	s
main	src/lencod.c	/^int main(int argc, char **argv)$/;"	f
make_frame_picture_JV	src/macroblock.c	/^void make_frame_picture_JV(VideoParameters *p_Vid)$/;"	f
malloc_picture	src/lencod.c	/^Picture *malloc_picture()$/;"	f
malloc_slice	src/slice.c	/^static Slice *malloc_slice(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f	file:
malloc_slice_lite	src/slice.c	/^static Slice *malloc_slice_lite(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f	file:
map_contexts	inc/global.h	/^  BiContextType  map_contexts [1][NUM_BLOCK_TYPES][NUM_MAP_CTX];$/;"	m	struct:__anon2
map_contexts	inc/global.h	/^  BiContextType  map_contexts [2][NUM_BLOCK_TYPES][NUM_MAP_CTX];$/;"	m	struct:__anon2
mapping	inc/global.h	/^  void    (*mapping)(int value1, int value2, int* len_ptr, int* info_ptr);$/;"	m	struct:syntaxelement_enc
masterQP	inc/global.h	/^  int masterQP;                \/\/!< Master quantization parameter$/;"	m	struct:video_par
matrix4x4_check	src/q_matrix.c	/^int matrix4x4_check[6] = {0, 0, 0, 0, 0, 0};$/;"	v
matrix8x8_check	src/q_matrix.c	/^int matrix8x8_check[6] = {0, 0, 0, 0, 0, 0};$/;"	v
max_bitCount	inc/global.h	/^  int max_bitCount;$/;"	m	struct:coding_par
max_bitCount	inc/global.h	/^  int max_bitCount;$/;"	m	struct:video_par
max_c2	inc/cabac.h	/^static const byte max_c2       [] = { 4,  4,  4,  4,  4,  4,  3,  4,  3,  3,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4}; \/\/ 9$/;"	v
max_frame_num	inc/global.h	/^  unsigned int        max_frame_num;$/;"	m	struct:slice
max_frame_num	inc/global.h	/^  unsigned int max_frame_num;$/;"	m	struct:video_par
max_imgpel_value	inc/global.h	/^  short max_imgpel_value;              \/\/!< max value that one picture element (pixel) can take (depends on pic_unit_bitdepth)$/;"	m	struct:video_par
max_imgpel_value_comp_sq	inc/global.h	/^  int max_imgpel_value_comp_sq   [MAX_PLANE];       \/\/!< max value that one picture element (pixel) can take (depends on pic_unit_bitdepth)$/;"	m	struct:coding_par
max_imgpel_value_comp_sq	inc/global.h	/^  int max_imgpel_value_comp_sq   [MAX_PLANE];       \/\/!< max value that one picture element (pixel) can take (depends on pic_unit_bitdepth)$/;"	m	struct:video_par
max_long_term_frame_idx_plus1	inc/global.h	/^  int max_long_term_frame_idx_plus1;$/;"	m	struct:DecRefPicMarking_s
max_long_term_pic_idx	inc/mbuffer.h	/^  int           max_long_term_pic_idx;$/;"	m	struct:decoded_picture_buffer
max_mvd	inc/global.h	/^  int     max_mvd;  \/\/for MVD overflow checking;$/;"	m	struct:video_par
max_num_references	inc/global.h	/^  int max_num_references;      \/\/!< maximum number of reference pictures that may occur$/;"	m	struct:video_par
max_num_references	inc/global.h	/^  short  max_num_references;      \/\/!< maximum number of reference pictures that may occur$/;"	m	struct:slice
max_num_slices	inc/pred_struct_types.h	/^  int max_num_slices;$/;"	m	struct:seq_struct
max_part_nr	inc/global.h	/^  int                 max_part_nr;  \/\/!< number of different partitions$/;"	m	struct:slice
max_pel_value_comp	inc/global.h	/^  int max_pel_value_comp      [MAX_PLANE];       \/\/!< max value that one picture element (pixel) can take (depends on pic_unit_bitdepth)$/;"	m	struct:coding_par
max_pel_value_comp	inc/global.h	/^  int max_pel_value_comp      [MAX_PLANE];       \/\/!< max value that one picture element (pixel) can take (depends on pic_unit_bitdepth)$/;"	m	struct:video_par
max_pic_order_cnt_lsb	inc/global.h	/^  unsigned int max_pic_order_cnt_lsb;$/;"	m	struct:video_par
max_qp_delta	inc/global.h	/^  int max_qp_delta;$/;"	m	struct:video_par
max_search_range	inc/me_fullfast.h	/^  int          **max_search_range;$/;"	m	struct:me_full_fast
max_value	inc/sei.h	/^  int  max_value;$/;"	m	struct:__anon23
max_x	inc/global.h	/^  int    max_x;$/;"	m	struct:search_window
max_y	inc/global.h	/^  int    max_y;$/;"	m	struct:search_window
maxpos	inc/cabac.h	/^static const byte maxpos       [] = {15, 14, 63, 31, 31, 15,  3, 14,  7, 15, 15, 14, 63, 31, 31, 15, 15, 14, 63, 31, 31, 15};$/;"	v
maxthres	inc/me_epzs_common.h	/^  distblk maxthres[8];$/;"	m	struct:epzs_params
mb16x16_cost	inc/global.h	/^  double mb16x16_cost;$/;"	m	struct:video_par
mb16x16_cost_frame	inc/global.h	/^  double *mb16x16_cost_frame;$/;"	m	struct:video_par
mbAddrA	inc/global.h	/^  int                 mbAddrA, mbAddrB, mbAddrC, mbAddrD;$/;"	m	struct:macroblock_enc
mbAddrB	inc/global.h	/^  int                 mbAddrA, mbAddrB, mbAddrC, mbAddrD;$/;"	m	struct:macroblock_enc
mbAddrC	inc/global.h	/^  int                 mbAddrA, mbAddrB, mbAddrC, mbAddrD;$/;"	m	struct:macroblock_enc
mbAddrD	inc/global.h	/^  int                 mbAddrA, mbAddrB, mbAddrC, mbAddrD;$/;"	m	struct:macroblock_enc
mbAddrX	inc/global.h	/^  int                 mbAddrX;                    \/\/!< current MB address$/;"	m	struct:macroblock_enc
mbAvailA	inc/global.h	/^  byte                mbAvailA, mbAvailB, mbAvailC, mbAvailD;$/;"	m	struct:macroblock_enc
mbAvailB	inc/global.h	/^  byte                mbAvailA, mbAvailB, mbAvailC, mbAvailD;$/;"	m	struct:macroblock_enc
mbAvailC	inc/global.h	/^  byte                mbAvailA, mbAvailB, mbAvailC, mbAvailD;$/;"	m	struct:macroblock_enc
mbAvailD	inc/global.h	/^  byte                mbAvailA, mbAvailB, mbAvailC, mbAvailD;$/;"	m	struct:macroblock_enc
mb_adaptive_frame_field_flag	inc/me_epzs_common.h	/^  int mb_adaptive_frame_field_flag;$/;"	m	struct:__anon28
mb_addr	inc/global.h	/^  int   mb_addr;$/;"	m	struct:pix_pos
mb_aff_contexts	inc/global.h	/^  BiContextType  mb_aff_contexts [NUM_MB_AFF_CTX];$/;"	m	struct:__anon2
mb_aff_frame_flag	inc/global.h	/^  Boolean             mb_aff_frame_flag;$/;"	m	struct:slice
mb_aff_frame_flag	inc/global.h	/^  Boolean mb_aff_frame_flag;    \/\/!< indicates frame with mb aff coding$/;"	m	struct:video_par
mb_aff_frame_flag	inc/mbuffer.h	/^  int         mb_aff_frame_flag;$/;"	m	struct:storable_picture
mb_cb_coeff	inc/global.h	/^  int mb_cb_coeff;$/;"	m	struct:bit_counter
mb_cbp	inc/global.h	/^  unsigned short mb_cbp;$/;"	m	struct:bit_counter
mb_cr_coeff	inc/global.h	/^  int mb_cr_coeff;  $/;"	m	struct:bit_counter
mb_cr_size_x	inc/global.h	/^  short mb_cr_size_x;$/;"	m	struct:coding_par
mb_cr_size_x	inc/global.h	/^  short mb_cr_size_x;$/;"	m	struct:video_par
mb_cr_size_y	inc/global.h	/^  short mb_cr_size_y;$/;"	m	struct:coding_par
mb_cr_size_y	inc/global.h	/^  short mb_cr_size_y;$/;"	m	struct:video_par
mb_data	inc/global.h	/^  Macroblock    *mb_data;                                   \/\/!< array containing all MBs of a whole frame$/;"	m	struct:video_par
mb_data_JV	inc/global.h	/^  Macroblock    *mb_data_JV[MAX_PLANE];  \/\/!< mb_data to be used during 4:4:4 independent mode encoding$/;"	m	struct:video_par
mb_delta_quant	inc/global.h	/^  unsigned short mb_delta_quant;$/;"	m	struct:bit_counter
mb_error_map	inc/errdo.h	/^  byte   ***  mb_error_map;          \/\/!< Map of macroblock errors in hypothetical decoders.$/;"	m	struct:distortion_estimation
mb_field	inc/global.h	/^  byte                mb_field;$/;"	m	struct:macroblock_enc
mb_field	inc/mbuffer.h	/^  byte *      mb_field;      \/\/!< field macroblock indicator$/;"	m	struct:pic_motion_params_old
mb_height_cr	src/configfile.c	/^static const int mb_height_cr[4]= {0,8,16,16};$/;"	v	file:
mb_height_cr	src/lencod.c	/^static const int mb_height_cr[4]= {0, 8,16,16};$/;"	v	file:
mb_inter	inc/global.h	/^  unsigned short mb_inter;$/;"	m	struct:bit_counter
mb_is_available	src/mb_access.c	/^Boolean mb_is_available(int mbAddr, Macroblock *currMB)$/;"	f
mb_left	inc/global.h	/^  struct macroblock_enc   *mb_left; \/\/!< pointer to neighboring MB (CABAC)$/;"	m	struct:macroblock_enc	typeref:struct:macroblock_enc::macroblock_enc
mb_mode	inc/global.h	/^  unsigned short mb_mode;$/;"	m	struct:bit_counter
mb_mode_table	inc/mode_decision.h	/^static const char mb_mode_table[10]  = {0, 1, 2, 3, P8x8, I16MB, I4MB, I8MB, IPCM, SI4MB}; \/\/ DO NOT CHANGE ORDER !!!$/;"	v
mb_ores	inc/global.h	/^  int ***mb_ores;               \/\/!< the diff pixel values between the original macroblock\/block and its prediction (original)$/;"	m	struct:slice
mb_p8x8_cost	inc/global.h	/^  distblk  mb_p8x8_cost;  $/;"	m	struct:rd_8x8_data
mb_pred	inc/global.h	/^  imgpel ***mb_pred;            \/\/!< current best prediction mode$/;"	m	struct:slice
mb_refpic_used	inc/global.h	/^  int           mb_refpic_used; \/\/<! [2][16] for fast reference decision;$/;"	m	struct:video_par
mb_rres	inc/global.h	/^  int ***mb_rres;               \/\/!< the diff pixel values between the original macroblock\/block and its prediction (reconstructed)$/;"	m	struct:slice
mb_size	inc/global.h	/^  int mb_size[MAX_PLANE][2];$/;"	m	struct:coding_par
mb_size	inc/global.h	/^  int mb_size[MAX_PLANE][2];$/;"	m	struct:video_par
mb_stuffing	inc/global.h	/^  int mb_stuffing;$/;"	m	struct:bit_counter
mb_total	inc/global.h	/^  int mb_total;$/;"	m	struct:bit_counter
mb_type	inc/global.h	/^  short               mb_type;                    \/\/!< current MB mode type$/;"	m	struct:macroblock_enc
mb_type	inc/global.h	/^  short   mb_type;  $/;"	m	struct:rd_data
mb_type_contexts	inc/global.h	/^  BiContextType mb_type_contexts [3][NUM_MB_TYPE_CTX];$/;"	m	struct:__anon1
mb_up	inc/global.h	/^  struct macroblock_enc   *mb_up;   \/\/!< pointer to neighboring MB (CABAC)$/;"	m	struct:macroblock_enc	typeref:struct:macroblock_enc::macroblock_enc
mb_uv_coeff	inc/global.h	/^  int mb_uv_coeff;$/;"	m	struct:bit_counter
mb_width_cr	src/configfile.c	/^static const int mb_width_cr[4] = {0,8, 8,16};$/;"	v	file:
mb_width_cr	src/lencod.c	/^static const int mb_width_cr[4] = {0, 8, 8,16};$/;"	v	file:
mb_x	inc/global.h	/^  short               mb_x;                       \/\/!< current MB horizontal$/;"	m	struct:macroblock_enc
mb_y	inc/global.h	/^  short               mb_y;                       \/\/!< current MB vertical$/;"	m	struct:macroblock_enc
mb_y_coeff	inc/global.h	/^  int mb_y_coeff;$/;"	m	struct:bit_counter
mb_y_intra	inc/global.h	/^  int mb_y_intra;              \/\/!< which GOB to intra code$/;"	m	struct:video_par
mb_y_upd	inc/global.h	/^  int mb_y_upd;$/;"	m	struct:video_par
mc_get_block_chroma_otf_L1	src/get_block_otf.c	/^void mc_get_block_chroma_otf_L1 (        VideoParameters *p_Vid, \/\/!< video encoding parameters for current picture$/;"	f
mc_prediction	src/lln_mc_prediction.c	/^static inline void mc_prediction(imgpel** mb_pred,$/;"	f	file:
mc_prediction	src/mc_prediction.c	/^static inline void mc_prediction(imgpel** mb_pred, imgpel* lpred, int block_size_y, int block_x, int block_size_x)$/;"	f	file:
mc_prediction	src/mc_prediction_otf.c	/^static void mc_prediction(imgpel** mb_pred, imgpel* lpred, int block_size_y, int block_size_x, int ioff)$/;"	f	file:
md5String	inc/global.h	/^  char md5String[2][33];$/;"	m	struct:coding_par
me_block	inc/global.h	/^typedef struct me_block$/;"	s
me_full_fast	inc/me_fullfast.h	/^typedef struct me_full_fast$/;"	s
me_get_block_chroma_otf_L1	src/get_block_otf.c	/^void me_get_block_chroma_otf_L1 (        VideoParameters *p_Vid, \/\/!< video encoding parameters for current picture$/;"	f
me_time	inc/global.h	/^  int me_time;$/;"	m	struct:prev_coding_stats
me_time	inc/global.h	/^  int64  me_time;$/;"	m	struct:video_par
me_tot_time	inc/global.h	/^  int64  me_tot_time;$/;"	m	struct:video_par
medthres	inc/me_epzs_common.h	/^  distblk medthres[8];$/;"	m	struct:epzs_params
memory_management_control_operation	inc/global.h	/^  int memory_management_control_operation;$/;"	m	struct:DecRefPicMarking_s
metric	inc/global.h	/^  DistMetric metric[TOTAL_DIST_TYPES];      \/\/!< Distortion metrics$/;"	m	struct:distortion_params
metric_v	inc/global.h	/^  DistMetric metric_v[2][TOTAL_DIST_TYPES]; \/\/!< Distortion metrics for each view$/;"	m	struct:distortion_params
min_IPCM_value	inc/global.h	/^  imgpel min_IPCM_value;$/;"	m	struct:video_par
min_bits	inc/global.h	/^  int                  min_bits;$/;"	m	struct:macroblock_enc
min_dcost	inc/global.h	/^  distblk              min_dcost;$/;"	m	struct:macroblock_enc
min_dcost	inc/global.h	/^  double  min_dcost;$/;"	m	struct:rd_data
min_qp_delta	inc/global.h	/^  int min_qp_delta;$/;"	m	struct:video_par
min_rate	inc/global.h	/^  distblk              min_rate;$/;"	m	struct:macroblock_enc
min_rate	inc/global.h	/^  double  min_rate;$/;"	m	struct:rd_data
min_rdcost	inc/global.h	/^  distblk              min_rdcost;$/;"	m	struct:macroblock_enc
min_rdcost	inc/global.h	/^  double  min_rdcost;$/;"	m	struct:rd_data
min_value	inc/sei.h	/^  int  min_value;$/;"	m	struct:__anon23
min_x	inc/global.h	/^  int    min_x;$/;"	m	struct:search_window
min_y	inc/global.h	/^  int    min_y;$/;"	m	struct:search_window
minthres	inc/me_epzs_common.h	/^  distblk minthres[8];$/;"	m	struct:epzs_params
minutes_flag	inc/sei.h	/^  Boolean minutes_flag;$/;"	m	struct:__anon19
minutes_value	inc/sei.h	/^  int minutes_value;$/;"	m	struct:__anon19
mixedModeEdgeFlag	inc/global.h	/^  byte mixedModeEdgeFlag;$/;"	m	struct:video_par
mmco_long_term	src/mmco.c	/^void mmco_long_term(VideoParameters *p_Vid, int current_pic_num)$/;"	f
mod_qp	inc/pred_struct_types.h	/^  int mod_qp;             \/\/ QP modifier with respect to the slice type default QP$/;"	m	struct:frame_struct
mode	inc/global.h	/^   char   mode;$/;"	m	struct:info_8x8
mode	inc/global.h	/^  int     mode;$/;"	m	struct:rd_data
mode	inc/rdopt.h	/^  byte  mode;$/;"	m	struct:__anon27
mode_best	inc/rdopt.h	/^  BestMode mode_best;$/;"	m	struct:rdo_structure
mode_decision_for_I16x16_MB	inc/global.h	/^  int     (*mode_decision_for_I16x16_MB)        (Macroblock *currMB, int lambda);$/;"	m	struct:slice
mode_decision_for_I16x16_MB	src/rd_intra_jm.c	/^int mode_decision_for_I16x16_MB (Macroblock* currMB, int lambda)$/;"	f
mode_decision_for_I16x16_MB_444	src/rd_intra_jm444.c	/^int mode_decision_for_I16x16_MB_444 (Macroblock* currMB, int lambda)$/;"	f
mode_decision_for_I16x16_MB_RDO	src/rd_intra_jm.c	/^int mode_decision_for_I16x16_MB_RDO (Macroblock* currMB, int lambda)$/;"	f
mode_decision_for_I4x4_MB	src/rd_intra_jm.c	/^int mode_decision_for_I4x4_MB (Macroblock *currMB, int lambda,  distblk* cost)$/;"	f
mode_decision_for_I4x4_blocks	inc/global.h	/^  int     (*mode_decision_for_I4x4_blocks)      (Macroblock *currMB, int  b8,  int  b4,  int  lambda, distblk*  min_cost);$/;"	m	struct:slice
mode_decision_for_I4x4_blocks_JM_High	src/rd_intra_jm.c	/^int mode_decision_for_I4x4_blocks_JM_High (Macroblock *currMB, int  b8,  int  b4,  int  lambda,  distblk*  min_cost)$/;"	f
mode_decision_for_I4x4_blocks_JM_High444	src/rd_intra_jm444.c	/^int mode_decision_for_I4x4_blocks_JM_High444 (Macroblock *currMB, int  b8,  int  b4,  int  lambda,  distblk*  min_cost)$/;"	f
mode_decision_for_I4x4_blocks_JM_Low	src/rd_intra_jm_low.c	/^int mode_decision_for_I4x4_blocks_JM_Low (Macroblock *currMB, int  b8,  int  b4,  int  lambda,  distblk*  min_cost)$/;"	f
mode_decision_for_I4x4_blocks_JM_Low444	src/rd_intra_jm444.c	/^int mode_decision_for_I4x4_blocks_JM_Low444 (Macroblock *currMB, int  b8,  int  b4,  int  lambda,  distblk*  min_cost)$/;"	f
mode_decision_for_I8x8_MB	src/transform8x8.c	/^int mode_decision_for_I8x8_MB (Macroblock *currMB, int lambda, distblk *min_cost)$/;"	f
mode_decision_for_I8x8_blocks	inc/global.h	/^  int     (*mode_decision_for_I8x8_blocks)      (Macroblock *currMB, int b8, int lambda, distblk *min_cost);$/;"	m	struct:slice
mode_decision_for_I8x8_blocks_JM_High	src/rd_intra_jm.c	/^int mode_decision_for_I8x8_blocks_JM_High (Macroblock *currMB, int b8, int lambda, distblk *min_cost)$/;"	f
mode_decision_for_I8x8_blocks_JM_High444	src/transform8x8_H444.c	/^int mode_decision_for_I8x8_blocks_JM_High444 (Macroblock *currMB, int b8, int lambda, distblk *min_cost)$/;"	f
mode_decision_for_I8x8_blocks_JM_Low	src/rd_intra_jm_low.c	/^int mode_decision_for_I8x8_blocks_JM_Low (Macroblock *currMB, int b8, int lambda, distblk *min_cost)$/;"	f
mode_decision_for_I8x8_blocks_JM_Low444	src/transform8x8_H444.c	/^int mode_decision_for_I8x8_blocks_JM_Low444 (Macroblock *currMB, int b8, int lambda, distblk *min_cost)$/;"	f
modelNumber	inc/global.h	/^  int*** modelNumber;$/;"	m	struct:video_par
model_id	inc/sei.h	/^  unsigned int  model_id;$/;"	m	struct:__anon23
model_number	inc/global.h	/^  int                 model_number;$/;"	m	struct:slice
model_number	inc/params.h	/^  int model_number;$/;"	m	struct:inp_par_enc
modification_of_pic_nums_idc	inc/global.h	/^  int                 *modification_of_pic_nums_idc[2];$/;"	m	struct:slice
mot_ctx	inc/global.h	/^  MotionInfoContexts  *mot_ctx;     \/\/!< pointer to struct of context models for use in CABAC$/;"	m	struct:slice
mot_ctx	inc/rdopt_coding_state.h	/^  MotionInfoContexts   *mot_ctx;$/;"	m	struct:coding_state
motion	inc/mbuffer.h	/^  PicMotionParamsOld  motion;    \/\/!< Motion info$/;"	m	struct:storable_picture
motion	inc/me_epzs_common.h	/^  MotionVector motion;$/;"	m	struct:__anon29
motion_cost	inc/global.h	/^  distblk ****motion_cost;$/;"	m	struct:video_par
motion_cost4	inc/global.h	/^  distblk    ***motion_cost4;$/;"	m	struct:slice
motion_cost8	inc/global.h	/^  distblk    ***motion_cost8;$/;"	m	struct:slice
mpr8x8	inc/global.h	/^  imgpel **mpr8x8;$/;"	m	struct:rd_8x8_data
mpr8x8CbCr	inc/global.h	/^  imgpel ***mpr8x8CbCr;$/;"	m	struct:rd_8x8_data
mpr_16x16	inc/global.h	/^  imgpel ****mpr_16x16;         \/\/!< prediction samples for 16x16 intra prediction modes (and chroma)$/;"	m	struct:slice
mpr_4x4	inc/global.h	/^  imgpel ****mpr_4x4;           \/\/!< prediction samples for   4x4 intra prediction modes$/;"	m	struct:slice
mpr_8x8	inc/global.h	/^  imgpel ****mpr_8x8;           \/\/!< prediction samples for   8x8 intra prediction modes$/;"	m	struct:slice
mv	inc/global.h	/^  MotionVector     mv[2];            \/\/!< motion vectors (L0\/L1)$/;"	m	struct:me_block
mv	inc/global.h	/^  MotionVector mv[2];$/;"	m	struct:__anon4
mv	inc/mbuffer.h	/^  MotionVector             mv[2];       \/\/!< motion vector  $/;"	m	struct:pic_motion_params
mv_bit_cost	src/mv_search.c	/^static inline int mv_bit_cost(Macroblock *currMB, MotionVector **all_mv, int cur_list, short cur_ref, int by, int bx, int step_v0, int step_v, int step_h0, int step_h, int mvd_bits)$/;"	f	file:
mv_cost	inc/mv_search.h	/^static inline distblk mv_cost(const VideoParameters *p_Vid, int lambda, const MotionVector *mv, const MotionVector *pmv)$/;"	f
mv_info	inc/mbuffer.h	/^  PicMotionParams **mv_info;                 \/\/!< Motion info$/;"	m	struct:storable_picture
mv_res_contexts	inc/global.h	/^  BiContextType mv_res_contexts  [2][NUM_MV_RES_CTX];$/;"	m	struct:__anon1
mv_scale	inc/me_epzs_common.h	/^  int mv_scale       [6][MAX_REFERENCE_PICTURES][MAX_REFERENCE_PICTURES];$/;"	m	struct:epzs_params
mv_scale_update	inc/me_epzs_common.h	/^  int mv_scale_update[6][MAX_REFERENCE_PICTURES][MAX_REFERENCE_PICTURES];$/;"	m	struct:epzs_params
mv_x	inc/global.h	/^  short mv_x;$/;"	m	struct:__anon3
mv_y	inc/global.h	/^  short mv_y;$/;"	m	struct:__anon3
mvbits	inc/global.h	/^  int* mvbits;$/;"	m	struct:video_par
mvc_ref_pic_list_reordering	src/header.c	/^static int mvc_ref_pic_list_reordering(Slice *currSlice, Bitstream *bitstream)$/;"	f	file:
mvd	inc/global.h	/^  short               mvd[2][BLOCK_MULTIPLE][BLOCK_MULTIPLE][2];          \/\/!< indices correspond to [list][block_y][block_x][x,y]$/;"	m	struct:macroblock_enc
mvd	inc/rdopt_coding_state.h	/^  short                 mvd[2][BLOCK_MULTIPLE][BLOCK_MULTIPLE][2];$/;"	m	struct:coding_state
mvscale	inc/global.h	/^  int                 mvscale[6][MAX_REFERENCE_PICTURES];$/;"	m	struct:slice
n_frames	inc/sei.h	/^  int n_frames;$/;"	m	struct:__anon19
nal_initial_cpb_removal_delay	inc/sei.h	/^  int nal_initial_cpb_removal_delay[MAX_CPB_CNT_MINUS1+1];$/;"	m	struct:__anon8
nal_initial_cpb_removal_delay_offset	inc/sei.h	/^  int nal_initial_cpb_removal_delay_offset[MAX_CPB_CNT_MINUS1+1];$/;"	m	struct:__anon8
nal_ref_idc	inc/pred_struct_types.h	/^  int nal_ref_idc;$/;"	m	struct:frame_struct
nal_ref_idc	inc/pred_struct_types.h	/^  int nal_ref_idc;$/;"	m	struct:pic_struct
nal_ref_idc	inc/pred_struct_types.h	/^  int nal_ref_idc;$/;"	m	struct:pred_struct_frm
nal_reference_idc	inc/global.h	/^  int                 nal_reference_idc;                       \/\/!< nal_reference_idc from NAL unit$/;"	m	struct:slice
nal_reference_idc	inc/global.h	/^  int nal_reference_idc;$/;"	m	struct:prev_coding_stats
nal_reference_idc	inc/global.h	/^  int nal_reference_idc;$/;"	m	struct:video_par
nal_unit	inc/global.h	/^  NALU_t              *nal_unit;$/;"	m	struct:datapartition_enc
nextLast	inc/me_epzs_common.h	/^  int    nextLast;$/;"	m	struct:epzs_struct
next_end_pos	inc/me_epzs.h	/^static const int next_end_pos[5][5] =$/;"	v
next_macroblock	src/macroblock.c	/^void next_macroblock(Macroblock *currMB)$/;"	f
next_points	inc/me_epzs_common.h	/^  int next_points;$/;"	m	struct:__anon29
next_start_pos	inc/me_epzs.h	/^static const int next_start_pos[5][5] =$/;"	v
nextpattern	inc/me_epzs_common.h	/^  struct epzs_struct *nextpattern;$/;"	m	struct:epzs_struct	typeref:struct:epzs_struct::epzs_struct
noLevels	inc/rdoq.h	/^  int noLevels;$/;"	m	struct:level_data_struct
no_frames	inc/explicit_seq.h	/^  int no_frames;$/;"	m	struct:exp_seq_info
no_frames	inc/params.h	/^  int no_frames;                        \/\/!< number of frames to be encoded$/;"	m	struct:inp_par_enc
no_output_of_prior_pics_flag	inc/global.h	/^  int     no_output_of_prior_pics_flag;$/;"	m	struct:video_par
no_part	inc/rdopt_coding_state.h	/^  int                  no_part;$/;"	m	struct:coding_state
no_slices	inc/global.h	/^  int   no_slices;$/;"	m	struct:picture
nobskip	inc/params.h	/^  int nobskip;$/;"	m	struct:inp_par_enc
non_existing	inc/mbuffer.h	/^  int         non_existing;$/;"	m	struct:storable_picture
non_idr_flag	inc/global.h	/^  int non_idr_flag[2];$/;"	m	struct:video_par
norm_factor_4x4	inc/global.h	/^  double norm_factor_4x4;$/;"	m	struct:slice
norm_factor_8x8	inc/global.h	/^  double norm_factor_8x8;$/;"	m	struct:slice
norm_shift_4x4	inc/global.h	/^  int    norm_shift_4x4;$/;"	m	struct:slice
norm_shift_8x8	inc/global.h	/^  int    norm_shift_8x8;$/;"	m	struct:slice
nuit_field_based_flag	inc/sei.h	/^  Boolean nuit_field_based_flag;$/;"	m	struct:__anon19
nullify_rddata	src/slice.c	/^static void nullify_rddata(RD_DATA *rd_data)$/;"	f	file:
num_blk8x8_uv	inc/global.h	/^  int                 num_blk8x8_uv;$/;"	m	struct:slice
num_blk8x8_uv	inc/global.h	/^  int num_blk8x8_uv;$/;"	m	struct:coding_par
num_blk8x8_uv	inc/global.h	/^  int num_blk8x8_uv;$/;"	m	struct:video_par
num_cdc_coeff	inc/global.h	/^  int num_cdc_coeff;$/;"	m	struct:coding_par
num_cdc_coeff	inc/global.h	/^  int num_cdc_coeff;$/;"	m	struct:video_par
num_frames	inc/pred_struct_types.h	/^  int num_frames;$/;"	m	struct:seq_struct
num_frames_mvc	inc/pred_struct_types.h	/^  int num_frames_mvc;$/;"	m	struct:seq_struct
num_gops	inc/pred_struct_types.h	/^  int num_gops;$/;"	m	struct:seq_struct
num_intra_gops	inc/pred_struct_types.h	/^  int num_intra_gops;$/;"	m	struct:seq_struct
num_mb	inc/global.h	/^  int                 num_mb;       \/\/!< number of MBs in the slice$/;"	m	struct:slice
num_mb_per_slice	inc/global.h	/^  int num_mb_per_slice;$/;"	m	struct:video_par
num_of_layers	inc/global.h	/^  int num_of_layers; $/;"	m	struct:video_par
num_of_views	inc/params.h	/^  int num_of_views;                     \/\/!< number of views to encode (1=1view, 2=2views)$/;"	m	struct:inp_par_enc
num_pivots	inc/sei.h	/^  int num_pivots;$/;"	m	struct:__anon23
num_prds	inc/pred_struct_types.h	/^  int num_prds;$/;"	m	struct:seq_struct
num_ref_frames	inc/global.h	/^  int num_ref_frames;          \/\/!< number of reference frames to be used$/;"	m	struct:video_par
num_ref_frames	inc/mbuffer.h	/^  int           num_ref_frames;$/;"	m	struct:decoded_picture_buffer
num_ref_frames	inc/params.h	/^  int num_ref_frames;                   \/\/!< number of reference frames to be used$/;"	m	struct:inp_par_enc
num_ref_frames_in_pic_order_cnt_cycle	inc/global.h	/^  unsigned int num_ref_frames_in_pic_order_cnt_cycle;$/;"	m	struct:video_par
num_ref_frames_org	inc/params.h	/^  int num_ref_frames_org;$/;"	m	struct:inp_par_enc
num_ref_idx_active	inc/global.h	/^  char                num_ref_idx_active[2];$/;"	m	struct:slice
num_ref_idx_l0	inc/image.h	/^  int   num_ref_idx_l0; $/;"	m	struct:coding_info
num_ref_idx_l0_active	inc/global.h	/^  int num_ref_idx_l0_active;$/;"	m	struct:prev_coding_stats
num_ref_idx_l0_active	inc/global.h	/^  int num_ref_idx_l0_active;$/;"	m	struct:video_par
num_ref_idx_l1	inc/image.h	/^  int   num_ref_idx_l1; $/;"	m	struct:coding_info
num_ref_idx_l1_active	inc/global.h	/^  int num_ref_idx_l1_active;$/;"	m	struct:prev_coding_stats
num_ref_idx_l1_active	inc/global.h	/^  int num_ref_idx_l1_active;$/;"	m	struct:video_par
num_referenced_subseqs	inc/sei.h	/^  int num_referenced_subseqs;$/;"	m	struct:__anon13
num_refs	inc/pred_struct_types.h	/^  int num_refs;$/;"	m	struct:frame_struct
num_refs	inc/pred_struct_types.h	/^  int num_refs;$/;"	m	struct:slice_struct
num_slice_groups_minus1	inc/params.h	/^  int num_slice_groups_minus1;           \/\/!< "FmoNumSliceGroups" in encoder.cfg, same as FmoNumSliceGroups, which should be erased later$/;"	m	struct:inp_par_enc
num_slices	inc/pred_struct_types.h	/^  int num_slices;$/;"	m	struct:pic_struct
num_slices_wp	inc/global.h	/^  int   num_slices_wp;$/;"	m	struct:video_par
num_spare_pics	inc/sei.h	/^  int num_spare_pics;$/;"	m	struct:__anon10
num_wp_ref_list	inc/wp_mcprec.h	/^  int               num_wp_ref_list[2];         \/\/ num of elements in each of the above matrices [LIST]$/;"	m	struct:wpx_object
number	inc/global.h	/^  int number;                  \/\/!< current image number to be encoded (in first layer)  $/;"	m	struct:video_par
number_of_slices	inc/global.h	/^  int number_of_slices;$/;"	m	struct:video_par
number_sp2_frames	inc/global.h	/^  int number_sp2_frames;$/;"	m	struct:video_par
nz_coeff	inc/global.h	/^  int ***nz_coeff;             \/\/!< number of coefficients per block (CAVLC)$/;"	m	struct:video_par
nz_coeff_buf	inc/global.h	/^  int ***nz_coeff_buf[2];$/;"	m	struct:video_par
of_mode	inc/params.h	/^  int of_mode;                       \/\/!< Specifies the mode of the output file$/;"	m	struct:inp_par_enc
offset	inc/global.h	/^  short offset[3];$/;"	m	struct:wp_params
offset4x4_check	src/q_offsets.c	/^int offset4x4_check[15] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };$/;"	v
offset8x8_check	src/q_offsets.c	/^int offset8x8_check[15] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };$/;"	v
offsetBi	inc/global.h	/^  short            offsetBi;$/;"	m	struct:me_block
offsetBi_cr	inc/global.h	/^  short            offsetBi_cr[2];$/;"	m	struct:me_block
offset_cr	inc/global.h	/^  int offset_y, offset_cr;$/;"	m	struct:video_par
offset_cr	inc/global.h	/^  short            offset_cr[2];$/;"	m	struct:me_block
offset_for_non_ref_pic	inc/global.h	/^  int          offset_for_non_ref_pic;$/;"	m	struct:video_par
offset_for_ref_frame	inc/global.h	/^  int          offset_for_ref_frame[1];$/;"	m	struct:video_par
offset_for_top_to_bottom_field	inc/global.h	/^  int          offset_for_top_to_bottom_field;$/;"	m	struct:video_par
offset_luma	inc/global.h	/^  short            offset_luma;$/;"	m	struct:me_block
offset_y	inc/global.h	/^  int offset_y, offset_cr;$/;"	m	struct:video_par
one_contexts	inc/global.h	/^  BiContextType  one_contexts [NUM_BLOCK_TYPES][NUM_ONE_CTX];$/;"	m	struct:__anon2
opix_c_y	inc/global.h	/^  short               opix_c_y;                   \/\/!< current original picture pixel chroma vertical$/;"	m	struct:macroblock_enc
opix_y	inc/global.h	/^  short               opix_y;                     \/\/!< current original picture pixel vertical$/;"	m	struct:macroblock_enc
order_num	inc/mbuffer.h	/^  int         order_num;$/;"	m	struct:storable_picture
origData0	inc/global.h	/^  ImageData origData0;$/;"	m	struct:video_par
origData1	inc/global.h	/^  ImageData origData1;$/;"	m	struct:video_par
orig_pic	inc/global.h	/^  imgpel         **orig_pic;      \/\/!< Block Data$/;"	m	struct:me_block
original_bottom_field_flag	inc/sei.h	/^  Boolean original_bottom_field_flag;$/;"	m	struct:__anon20
original_field_pic_flag	inc/sei.h	/^  Boolean original_field_pic_flag;$/;"	m	struct:__anon20
original_frame_num	inc/sei.h	/^  int original_frame_num;$/;"	m	struct:__anon20
original_idr_flag	inc/sei.h	/^  Boolean original_idr_flag;$/;"	m	struct:__anon20
otf_flag	inc/mbuffer.h	/^  int  otf_flag;$/;"	m	struct:storable_picture
out_buffer	inc/global.h	/^  struct frame_store            *out_buffer;$/;"	m	struct:video_par	typeref:struct:video_par::frame_store
out_of_bounds_mvs	src/conformance.c	/^int out_of_bounds_mvs(VideoParameters *p_Vid, const MotionVector *mv)$/;"	f
outfile	inc/params.h	/^  char outfile       [FILE_NAME_SIZE];  \/\/!< H.264 compressed output bitstream$/;"	m	struct:inp_par_enc
output	inc/params.h	/^  FrameFormat output;                   \/\/!< output related information$/;"	m	struct:inp_par_enc
output_SP_coefficients	src/image.c	/^void output_SP_coefficients(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
output_format	inc/global.h	/^  FrameFormat output_format[MAX_NUM_DPB_LAYERS];$/;"	m	struct:video_par
output_one_frame_from_dpb	src/mbuffer.c	/^static void output_one_frame_from_dpb(DecodedPictureBuffer *p_Dpb, FrameFormat *output)$/;"	f	file:
overflow_weight_cost	inc/mv_search.h	/^static inline int64 overflow_weight_cost(int lambda, int bits)$/;"	f
p	inc/rtp.h	/^  unsigned int p;          \/\/!< Padding bit, Padding MUST NOT be used$/;"	m	struct:__anon24
pCurImg	inc/global.h	/^  imgpel    **pCurImg;                \/\/!< Reference image. Luma for other profiles, can be any component for 4:4:4$/;"	m	struct:video_par
pCurImgRef	inc/global.h	/^  imgpel    **pCurImgRef;$/;"	m	struct:video_par
pImgOrg	inc/global.h	/^  imgpel    **pImgOrg[MAX_PLANE];$/;"	m	struct:video_par
pImgOrgRef	inc/global.h	/^  imgpel    **pImgOrgRef[MAX_PLANE];$/;"	m	struct:video_par
pWPX	inc/global.h	/^  struct wpx_object   *pWPX;$/;"	m	struct:video_par	typeref:struct:video_par::wpx_object
p_CurrEncodePar	inc/global.h	/^  CodingParameters         *p_CurrEncodePar;$/;"	m	struct:video_par
p_Dist	inc/global.h	/^  DistortionParams *p_Dist;$/;"	m	struct:video_par
p_Dpb	inc/global.h	/^  struct decoded_picture_buffer *p_Dpb;$/;"	m	struct:slice	typeref:struct:slice::decoded_picture_buffer
p_Dpb_layer	inc/global.h	/^  struct decoded_picture_buffer *p_Dpb_layer[MAX_NUM_DPB_LAYERS];$/;"	m	struct:video_par	typeref:struct:video_par::decoded_picture_buffer
p_EPZS	inc/global.h	/^  struct epzs_params      *p_EPZS;  $/;"	m	struct:slice	typeref:struct:slice::epzs_params
p_Enc	src/lencod.c	/^EncoderParams   *p_Enc = NULL;$/;"	v
p_EncodePar	inc/global.h	/^  CodingParameters         *p_EncodePar[MAX_NUM_DPB_LAYERS];$/;"	m	struct:video_par
p_Inp	inc/global.h	/^  InputParameters          *p_Inp;$/;"	m	struct:video_par
p_Inp	inc/global.h	/^  InputParameters     *p_Inp;   \/\/ pointer to the input parameters$/;"	m	struct:slice
p_Inp	inc/global.h	/^  InputParameters     *p_Inp;   \/\/!< pointer to the input parameters$/;"	m	struct:datapartition_enc
p_Inp	inc/global.h	/^  InputParameters    *p_Inp;$/;"	m	struct:macroblock_enc
p_Inp	inc/global.h	/^  InputParameters   *p_Inp;          \/\/!< Input Parameters$/;"	m	struct:encoder_params
p_Inp	inc/mbuffer.h	/^  InputParameters *p_Inp;$/;"	m	struct:decoded_picture_buffer
p_MV_con_diff	inc/errdo.h	/^  int **  p_MV_con_diff[MAX_PLANE];       \/\/!< pointer array for accessing MV_con_diff_Y \/ MV_con_diff_UV[] $/;"	m	struct:distortion_estimation
p_QScale	inc/global.h	/^  struct scaling_list           *p_QScale;$/;"	m	struct:video_par	typeref:struct:video_par::scaling_list
p_Quant	inc/global.h	/^  struct quant_params           *p_Quant;$/;"	m	struct:video_par	typeref:struct:video_par::quant_params
p_RDO	inc/global.h	/^  struct rdo_structure    *p_RDO;$/;"	m	struct:slice	typeref:struct:slice::rdo_structure
p_SEI	inc/global.h	/^  struct sei_params        *p_SEI;$/;"	m	struct:video_par	typeref:struct:video_par::sei_params
p_SetupFastFullPelSearch	inc/global.h	/^  void (*p_SetupFastFullPelSearch) (struct macroblock_enc *, MEBlock *, int ) ;$/;"	m	struct:macroblock_enc
p_Slice	inc/global.h	/^  struct slice        *p_Slice;$/;"	m	struct:datapartition_enc	typeref:struct:datapartition_enc::slice
p_Slice	inc/global.h	/^  struct slice       *p_Slice;                    \/\/!< pointer to the current slice$/;"	m	struct:macroblock_enc	typeref:struct:macroblock_enc::slice
p_Slice	inc/global.h	/^  struct slice    *p_Slice;$/;"	m	struct:me_block	typeref:struct:me_block::slice
p_Slice	inc/pred_struct_types.h	/^  SliceStructure *p_Slice;$/;"	m	struct:pic_struct
p_Stats	inc/global.h	/^  struct stat_parameters  *p_Stats;$/;"	m	struct:video_par	typeref:struct:video_par::stat_parameters
p_UMHex	inc/global.h	/^  struct umhex_struct *p_UMHex;$/;"	m	struct:video_par	typeref:struct:video_par::umhex_struct
p_UMHexSMP	inc/global.h	/^  struct umhex_smp_struct *p_UMHexSMP;$/;"	m	struct:video_par	typeref:struct:video_par::umhex_smp_struct
p_Vid	inc/global.h	/^  VideoParameters   *p_Vid;          \/\/!< Image Parameters$/;"	m	struct:encoder_params
p_Vid	inc/global.h	/^  struct video_par      *p_Vid;$/;"	m	struct:datapartition_enc	typeref:struct:datapartition_enc::video_par
p_Vid	inc/global.h	/^  struct video_par    *p_Vid;   \/\/ pointer to the original video structure$/;"	m	struct:slice	typeref:struct:slice::video_par
p_Vid	inc/global.h	/^  struct video_par   *p_Vid;                      \/\/!< pointer to VideoParameters$/;"	m	struct:macroblock_enc	typeref:struct:macroblock_enc::video_par
p_Vid	inc/global.h	/^  struct video_par *p_Vid;$/;"	m	struct:encoding_environment	typeref:struct:encoding_environment::video_par
p_Vid	inc/global.h	/^  struct video_par *p_Vid;$/;"	m	struct:me_block	typeref:struct:me_block::video_par
p_Vid	inc/mbuffer.h	/^  VideoParameters *p_Vid;$/;"	m	struct:decoded_picture_buffer
p_Vid	inc/me_epzs_common.h	/^  VideoParameters *p_Vid;$/;"	m	struct:epzs_params
p_atom	inc/pred_struct_types.h	/^  PredStructAtom *p_atom; \/\/ pointer to the prediction structure type to which this frame belongs$/;"	m	struct:frame_struct
p_bot_fld_pic	inc/pred_struct_types.h	/^  PicStructure *p_bot_fld_pic;$/;"	m	struct:frame_struct
p_colocated	inc/me_epzs_common.h	/^  EPZSColocParams *p_colocated;$/;"	m	struct:epzs_params
p_curr_frm_struct	inc/global.h	/^  FrameUnitStruct *p_curr_frm_struct;$/;"	m	struct:video_par
p_curr_img	inc/mbuffer.h	/^  imgpel **   p_curr_img;                \/\/!< current int-pel ref. picture area to be used for motion estimation$/;"	m	struct:storable_picture
p_curr_img_sub	inc/mbuffer.h	/^  imgpel **** p_curr_img_sub;            \/\/!< current sub-pel ref. picture area to be used for motion estimation$/;"	m	struct:storable_picture
p_curr_pic	inc/global.h	/^  PicStructure    *p_curr_pic;$/;"	m	struct:video_par
p_curr_slice	inc/global.h	/^  SliceStructure  *p_curr_slice;$/;"	m	struct:video_par
p_dec	inc/global.h	/^  int p_dec;                      \/\/!< decoded image file handle$/;"	m	struct:video_par
p_dec2	inc/global.h	/^  int p_dec2;                     \/\/!< decoded image file handle for view 1$/;"	m	struct:video_par
p_dec_img	inc/errdo.h	/^  imgpel ***  p_dec_img[MAX_PLANE];  \/\/!< pointer array for accessing decoded pictures in hypothetical decoders$/;"	m	struct:distortion_estimation
p_dec_img	inc/mbuffer.h	/^  imgpel ***  p_dec_img[MAX_PLANE];      \/\/!< pointer array for accessing decoded pictures in hypothetical decoders$/;"	m	struct:storable_picture
p_decs	inc/global.h	/^  struct decoders          *p_decs;$/;"	m	struct:video_par	typeref:struct:video_par::decoders
p_edge	inc/global.h	/^  struct edge_info *p_edge;$/;"	m	struct:video_par	typeref:struct:video_par::edge_info
p_error_sign_flag	inc/errdo.h	/^  byte ** p_error_sign_flag[MAX_PLANE];   \/\/!< pointer array for accessing error_sign_flag_Y \/ error_sign_flag_UV[]$/;"	m	struct:distortion_estimation
p_ffast_me	inc/global.h	/^  struct me_full_fast *p_ffast_me;$/;"	m	struct:video_par	typeref:struct:video_par::me_full_fast
p_first_moment	inc/errdo.h	/^  imgpel **   p_first_moment[MAX_PLANE];  \/\/!< pointer array for accessing first_moment_Y \/ first_moment_UV[]$/;"	m	struct:distortion_estimation
p_frame_pic	inc/global.h	/^  Picture *p_frame_pic;$/;"	m	struct:video_par
p_frame_pic	inc/pred_struct_types.h	/^  PicStructure *p_frame_pic;$/;"	m	struct:frame_struct
p_frm	inc/pred_struct_types.h	/^  FrameUnitStruct *p_frm;  $/;"	m	struct:seq_struct
p_frm	inc/pred_struct_types.h	/^  PredStructFrm *p_frm;$/;"	m	struct:pred_struct_atom
p_frm_mvc	inc/pred_struct_types.h	/^  FrameUnitStruct *p_frm_mvc; \/\/ frame struct store for num_views > 1$/;"	m	struct:seq_struct
p_gop	inc/pred_struct_types.h	/^  PredStructAtom *p_gop; \/\/ IDR GOPs$/;"	m	struct:seq_struct
p_hme_int_img	inc/mbuffer.h	/^  imgpel ***  p_hme_int_img;     \/\/!< [level][y][x];$/;"	m	struct:storable_picture
p_hme_sub_img	inc/mbuffer.h	/^  imgpel *****  p_hme_sub_img;   \/\/!< [level][y_frac][x_frac][y][x];$/;"	m	struct:storable_picture
p_img	inc/mbuffer.h	/^  imgpel **   p_img[MAX_PLANE];          \/\/!< pointer array for accessing imgY\/imgUV[]$/;"	m	struct:storable_picture
p_img_sub	inc/mbuffer.h	/^  imgpel **** p_img_sub[MAX_PLANE];      \/\/!< pointer array for storing top address of imgY_sub\/imgUV_sub[]$/;"	m	struct:storable_picture
p_intra_gop	inc/pred_struct_types.h	/^  PredStructAtom *p_intra_gop; \/\/ Intra GOPs$/;"	m	struct:seq_struct
p_log	inc/global.h	/^  FILE *p_log;                     \/\/!< SNR file$/;"	m	struct:video_par
p_motion	inc/me_epzs_common.h	/^  MotionVector *****p_motion;  \/\/!< Array for storing Motion Vectors$/;"	m	struct:epzs_params
p_motion	inc/me_epzs_common.h	/^  MotionVector ****p_motion;  \/\/!< Array for storing Motion Vectors$/;"	m	struct:epzs_params
p_prd	inc/pred_struct_types.h	/^  PredStructAtom *p_prd; \/\/ regular prediction structure$/;"	m	struct:seq_struct
p_pred	inc/global.h	/^  SeqStructure    *p_pred;$/;"	m	struct:video_par
p_rc_gen	inc/global.h	/^  RCGeneric   *p_rc_gen;$/;"	m	struct:video_par
p_rc_gen_best	inc/global.h	/^  RCGeneric   *p_rc_gen_init, *p_rc_gen_best;$/;"	m	struct:video_par
p_rc_gen_init	inc/global.h	/^  RCGeneric   *p_rc_gen_init, *p_rc_gen_best;$/;"	m	struct:video_par
p_rc_quad	inc/global.h	/^  RCQuadratic *p_rc_quad;$/;"	m	struct:video_par
p_rc_quad_best	inc/global.h	/^  RCQuadratic *p_rc_quad_init, *p_rc_quad_best;$/;"	m	struct:video_par
p_rc_quad_init	inc/global.h	/^  RCQuadratic *p_rc_quad_init, *p_rc_quad_best;$/;"	m	struct:video_par
p_res_con_diff	inc/errdo.h	/^  int **  p_res_con_diff[MAX_PLANE];      \/\/!< pointer array for accessing res_con_error_Y \/ res_con_error_UV[] $/;"	m	struct:distortion_estimation
p_search_window	inc/global.h	/^  struct search_window *p_search_window;$/;"	m	struct:video_par	typeref:struct:video_par::search_window
p_second_moment	inc/errdo.h	/^  uint16 **   p_second_moment[MAX_PLANE]; \/\/!< pointer array for accessing second_moment_Y \/ first_moment_UV[]$/;"	m	struct:distortion_estimation
p_stats	inc/mbuffer.h	/^  PictureStats p_stats;$/;"	m	struct:storable_picture
p_top_fld_pic	inc/pred_struct_types.h	/^  PicStructure *p_top_fld_pic;$/;"	m	struct:frame_struct
p_trace	inc/global.h	/^  FILE              *p_trace;        \/\/!< Trace file$/;"	m	struct:encoder_params
p_transmission_dist	inc/errdo.h	/^  int **  p_transmission_dist[MAX_PLANE]; \/\/!< pointer array for accessing transmission_dist_Y \/ transmission_dist_UV[] $/;"	m	struct:distortion_estimation
p_transmission_err	inc/errdo.h	/^  int **  p_transmission_err[MAX_PLANE];  \/\/!< pointer array for accessing transmission_dist_Y \/ transmission_dist_UV[] $/;"	m	struct:distortion_estimation
pac_scan_rect_repetition_period	inc/sei.h	/^  int pac_scan_rect_repetition_period;$/;"	m	struct:__anon15
packet	inc/rtp.h	/^  byte *       packet;     \/\/!< complete packet including header and payload$/;"	m	struct:__anon24
packlen	inc/rtp.h	/^  unsigned int packlen;    \/\/!< length of packet, typically paylen+12$/;"	m	struct:__anon24
pad_MVs	inc/mv_search.h	/^static inline MotionVector pad_MVs(MotionVector mv0, MEBlock *mv_block)$/;"	f
pad_size_uv_x	inc/global.h	/^  int pad_size_uv_x;$/;"	m	struct:coding_par
pad_size_uv_x	inc/global.h	/^  int pad_size_uv_x;$/;"	m	struct:video_par
pad_size_uv_x	inc/mbuffer.h	/^  int         pad_size_uv_y, pad_size_uv_x; $/;"	m	struct:storable_picture
pad_size_uv_y	inc/global.h	/^  int pad_size_uv_y;$/;"	m	struct:coding_par
pad_size_uv_y	inc/global.h	/^  int pad_size_uv_y;$/;"	m	struct:video_par
pad_size_uv_y	inc/mbuffer.h	/^  int         pad_size_uv_y, pad_size_uv_x; $/;"	m	struct:storable_picture
padded_size_x	inc/global.h	/^  int padded_size_x;  $/;"	m	struct:coding_par
padded_size_x	inc/global.h	/^  int padded_size_x;  $/;"	m	struct:video_par
padded_size_x_m4x4	inc/global.h	/^  int padded_size_x_m4x4;$/;"	m	struct:coding_par
padded_size_x_m4x4	inc/global.h	/^  int padded_size_x_m4x4;$/;"	m	struct:video_par
padded_size_x_m8x8	inc/global.h	/^  int padded_size_x_m8x8;$/;"	m	struct:coding_par
padded_size_x_m8x8	inc/global.h	/^  int padded_size_x_m8x8;$/;"	m	struct:video_par
pan_scan_cnt_minus1	inc/sei.h	/^  int pan_scan_cnt_minus1;             \/\/!< ranges from 0 to 2$/;"	m	struct:__anon15
pan_scan_rect_bottom_offset	inc/sei.h	/^  int pan_scan_rect_bottom_offset[3];$/;"	m	struct:__anon15
pan_scan_rect_cancel_flag	inc/sei.h	/^  int pan_scan_rect_cancel_flag;$/;"	m	struct:__anon15
pan_scan_rect_id	inc/sei.h	/^  int pan_scan_rect_id;$/;"	m	struct:__anon15
pan_scan_rect_left_offset	inc/sei.h	/^  int pan_scan_rect_left_offset[3];$/;"	m	struct:__anon15
pan_scan_rect_right_offset	inc/sei.h	/^  int pan_scan_rect_right_offset[3];$/;"	m	struct:__anon15
pan_scan_rect_top_offset	inc/sei.h	/^  int pan_scan_rect_top_offset[3];$/;"	m	struct:__anon15
panscanrect_information_struct	inc/sei.h	/^} panscanrect_information_struct;$/;"	t	typeref:struct:__anon15
parent_part_refpic_used	inc/global.h	/^  int           parent_part_refpic_used; \/\/<! [2][16] for fast reference decision;$/;"	m	struct:video_par
part	inc/global.h	/^  Info8x8 part[4];$/;"	m	struct:rd_8x8_data
partArr	inc/global.h	/^  DataPartition       *partArr;     \/\/!< array of partitions$/;"	m	struct:slice
part_size	inc/macroblock.h	/^static const short part_size[8][2] = $/;"	v
partition_mode	inc/global.h	/^  short               partition_mode;$/;"	m	struct:slice
partition_mode	inc/params.h	/^  int partition_mode;                \/\/!< Specifies the mode of data partitioning$/;"	m	struct:inp_par_enc
pattern_data	src/me_epzs_common.c	/^static const short pattern_data[7][12][4] =$/;"	v	file:
paylen	inc/rtp.h	/^  unsigned int paylen;     \/\/!< length of payload in bytes$/;"	m	struct:__anon24
payload	inc/rtp.h	/^  byte *       payload;    \/\/!< the payload including payload headers$/;"	m	struct:__anon24
payloadSize	inc/sei.h	/^  int payloadSize;$/;"	m	struct:__anon10
payloadSize	inc/sei.h	/^  int payloadSize;$/;"	m	struct:__anon11
payloadSize	inc/sei.h	/^  int payloadSize;$/;"	m	struct:__anon12
payloadSize	inc/sei.h	/^  int payloadSize;$/;"	m	struct:__anon13
payloadSize	inc/sei.h	/^  int payloadSize;$/;"	m	struct:__anon14
payloadSize	inc/sei.h	/^  int payloadSize;$/;"	m	struct:__anon15
payloadSize	inc/sei.h	/^  int payloadSize;$/;"	m	struct:__anon16
payloadSize	inc/sei.h	/^  int payloadSize;$/;"	m	struct:__anon17
payloadSize	inc/sei.h	/^  int payloadSize;$/;"	m	struct:__anon18
payloadSize	inc/sei.h	/^  int payloadSize;$/;"	m	struct:__anon19
payloadSize	inc/sei.h	/^  int payloadSize;$/;"	m	struct:__anon20
payloadSize	inc/sei.h	/^  int payloadSize;$/;"	m	struct:__anon21
payloadSize	inc/sei.h	/^  int payloadSize;$/;"	m	struct:__anon22
payloadSize	inc/sei.h	/^  int payloadSize;$/;"	m	struct:__anon23
payloadSize	inc/sei.h	/^  int payloadSize;$/;"	m	struct:__anon8
payloadSize	inc/sei.h	/^  int payloadSize;$/;"	m	struct:__anon9
pdir	inc/global.h	/^   char   pdir;$/;"	m	struct:info_8x8
pelnum_cr	inc/loop_filter.h	/^static const int pelnum_cr[2][4] =  {{0,8,16,16}, {0,8, 8,16}};  \/\/[dir:0=vert, 1=hor.][yuv_format]$/;"	v
perform_encode_field	src/image.c	/^void perform_encode_field(VideoParameters *p_Vid)$/;"	f
perform_encode_frame	src/image.c	/^void perform_encode_frame(VideoParameters *p_Vid)$/;"	f
perform_mc	src/lln_mc_prediction.c	/^void perform_mc(Macroblock* currMB, int decoder, ColorPlane pl, StorablePicture *dec_picture, int pred_dir, int l0_mode, int l1_mode, $/;"	f
perform_mc_concealment	src/lln_mc_prediction.c	/^void perform_mc_concealment(Macroblock* currMB, int decoder, ColorPlane pl, StorablePicture *dec_picture, int pred_dir, int l0_mode, int l1_mode, $/;"	f
pf_OneComponentChromaPrediction4x4_regenerate	inc/mbuffer.h	/^  void (*pf_OneComponentChromaPrediction4x4_regenerate)(Macroblock *currMB, imgpel* , int , int , MotionVector ** , StorablePicture *listX, int );$/;"	m	struct:decoded_picture_buffer
pf_OneComponentChromaPrediction4x4_retrieve	inc/mbuffer.h	/^  void (*pf_OneComponentChromaPrediction4x4_retrieve) (Macroblock *currMB, imgpel* , int , int , MotionVector ** , StorablePicture *listX, int );$/;"	m	struct:decoded_picture_buffer
pf_chroma_prediction	inc/mbuffer.h	/^  void (*pf_chroma_prediction)     ( Macroblock* currMB, int, int, int, int, int, int, int, int, short, short, short );$/;"	m	struct:decoded_picture_buffer
pf_computeBiPredSAD1	inc/mbuffer.h	/^  distblk (*pf_computeBiPredSAD1)(StorablePicture *ref1, StorablePicture *ref2, MEBlock*, distblk, MotionVector *, MotionVector *);$/;"	m	struct:decoded_picture_buffer
pf_computeBiPredSAD2	inc/mbuffer.h	/^  distblk (*pf_computeBiPredSAD2)(StorablePicture *ref1, StorablePicture *ref2, MEBlock*, distblk, MotionVector *, MotionVector *);$/;"	m	struct:decoded_picture_buffer
pf_computeBiPredSATD1	inc/mbuffer.h	/^  distblk (*pf_computeBiPredSATD1)  (StorablePicture *ref1, StorablePicture *ref2, MEBlock*, distblk, MotionVector *, MotionVector *);$/;"	m	struct:decoded_picture_buffer
pf_computeBiPredSATD2	inc/mbuffer.h	/^  distblk (*pf_computeBiPredSATD2)  (StorablePicture *ref1, StorablePicture *ref2, MEBlock*, distblk, MotionVector *, MotionVector *);$/;"	m	struct:decoded_picture_buffer
pf_computeBiPredSSE1	inc/mbuffer.h	/^  distblk (*pf_computeBiPredSSE1)    (StorablePicture *ref1, StorablePicture *ref2, MEBlock*, distblk, MotionVector *, MotionVector *);$/;"	m	struct:decoded_picture_buffer
pf_computeBiPredSSE2	inc/mbuffer.h	/^  distblk (*pf_computeBiPredSSE2)    (StorablePicture *ref1, StorablePicture *ref2, MEBlock*, distblk, MotionVector *, MotionVector *);$/;"	m	struct:decoded_picture_buffer
pf_computeSAD	inc/mbuffer.h	/^  distblk (*pf_computeSAD)         (StorablePicture *ref1, MEBlock*, distblk, MotionVector *);$/;"	m	struct:decoded_picture_buffer
pf_computeSADWP	inc/mbuffer.h	/^  distblk (*pf_computeSADWP)     (StorablePicture *ref1, MEBlock*, distblk, MotionVector *);$/;"	m	struct:decoded_picture_buffer
pf_computeSATD	inc/mbuffer.h	/^  distblk (*pf_computeSATD)      (StorablePicture *ref1, MEBlock*, distblk, MotionVector *);$/;"	m	struct:decoded_picture_buffer
pf_computeSATDWP	inc/mbuffer.h	/^  distblk (*pf_computeSATDWP)    (StorablePicture *ref1, MEBlock*, distblk, MotionVector *);$/;"	m	struct:decoded_picture_buffer
pf_computeSSE	inc/mbuffer.h	/^  distblk (*pf_computeSSE)       (StorablePicture *ref1, MEBlock*, distblk, MotionVector *);$/;"	m	struct:decoded_picture_buffer
pf_computeSSEWP	inc/mbuffer.h	/^  distblk (*pf_computeSSEWP)     (StorablePicture *ref1, MEBlock*, distblk, MotionVector *);$/;"	m	struct:decoded_picture_buffer
pf_get_block_chroma	inc/mbuffer.h	/^  void (*pf_get_block_chroma[2])   ( struct video_par *, imgpel*, int*, int, int, int, int, struct storable_picture*, int );$/;"	m	struct:decoded_picture_buffer
pf_get_block_luma	inc/mbuffer.h	/^  void (*pf_get_block_luma)        ( struct video_par *, imgpel*, int*, int, int, int, int, struct storable_picture*, int );$/;"	m	struct:decoded_picture_buffer
pf_luma_prediction	inc/mbuffer.h	/^  void (*pf_luma_prediction)    ( Macroblock* currMB, int, int, int, int, int, int[2], char *, short );$/;"	m	struct:decoded_picture_buffer
pf_luma_prediction_bi	inc/mbuffer.h	/^  void (*pf_luma_prediction_bi)    ( Macroblock* currMB, int, int, int, int, int, int, short, short, int );$/;"	m	struct:decoded_picture_buffer
pic_bin_count	inc/global.h	/^  int pic_bin_count;$/;"	m	struct:video_par
pic_motion_params	inc/mbuffer.h	/^typedef struct pic_motion_params$/;"	s
pic_motion_params_old	inc/mbuffer.h	/^struct pic_motion_params_old$/;"	s
pic_num	inc/mbuffer.h	/^  int         pic_num;$/;"	m	struct:storable_picture
pic_order_cnt_lsb	inc/global.h	/^  unsigned int pic_order_cnt_lsb;$/;"	m	struct:video_par
pic_order_cnt_type	inc/global.h	/^  unsigned int pic_order_cnt_type;$/;"	m	struct:video_par
pic_order_cnt_type	inc/params.h	/^  int pic_order_cnt_type;   \/\/! POC type$/;"	m	struct:inp_par_enc
pic_struct	inc/global.h	/^  int pic_struct;$/;"	m	struct:video_par
pic_struct	inc/pred_struct_types.h	/^typedef struct pic_struct$/;"	s
pic_struct	inc/sei.h	/^  int pic_struct;$/;"	m	struct:__anon19
pic_type	inc/global.h	/^  char pic_type[256];$/;"	m	struct:prev_coding_stats
pictiming_information_struct	inc/sei.h	/^} pictiming_information_struct;$/;"	t	typeref:struct:__anon19
picture	inc/global.h	/^typedef struct picture$/;"	s
picture_coding_decision	src/rdpicdecision.c	/^int picture_coding_decision (VideoParameters *p_Vid, Picture *picture1, Picture *picture2, int qp)$/;"	f
picture_id	inc/global.h	/^  int                 picture_id;$/;"	m	struct:slice
picture_stats	inc/mbuffer.h	/^struct picture_stats$/;"	s
picture_structure_decision	src/image.c	/^static byte picture_structure_decision (VideoParameters *p_Vid, Picture *frame, Picture *top, Picture *bot)$/;"	f	file:
pix_c_x	inc/global.h	/^  short               pix_c_x;                    \/\/!< current pixel chroma horizontal$/;"	m	struct:macroblock_enc
pix_c_y	inc/global.h	/^  short               pix_c_y;                    \/\/!< current pixel chroma vertical$/;"	m	struct:macroblock_enc
pix_pos	inc/global.h	/^typedef struct pix_pos$/;"	s
pix_x	inc/global.h	/^  int pix_x;                   \/\/!< current pixel horizontal$/;"	m	struct:video_par
pix_x	inc/global.h	/^  short               pix_x;                      \/\/!< current pixel horizontal$/;"	m	struct:macroblock_enc
pix_y	inc/global.h	/^  int pix_y;                   \/\/!< current pixel vertical$/;"	m	struct:video_par
pix_y	inc/global.h	/^  short               pix_y;                      \/\/!< current pixel vertical$/;"	m	struct:macroblock_enc
pixel_map	inc/global.h	/^  byte **pixel_map;   \/\/!< Shows the latest reference frame that is reliable for each pixel$/;"	m	struct:video_par
pmvfast	inc/global.h	/^  struct epzs_struct *pmvfast;$/;"	m	struct:video_par	typeref:struct:video_par::epzs_struct
poc	inc/mbuffer.h	/^  int         poc;$/;"	m	struct:storable_picture
poc	inc/mbuffer.h	/^  int       poc;$/;"	m	struct:frame_store
poc_based_ref_management_field_pic	src/mmco.c	/^void poc_based_ref_management_field_pic(DecodedPictureBuffer *p_Dpb, int current_pic_num)$/;"	f
poc_based_ref_management_frame_pic	src/mmco.c	/^void poc_based_ref_management_frame_pic(DecodedPictureBuffer *p_Dpb, int current_pic_num)$/;"	f
poc_ref_pic_reorder_dummy	src/list_reorder.c	/^static void poc_ref_pic_reorder_dummy(Slice *currSlice, unsigned num_ref_idx_lX_active, int list_no)$/;"	f	file:
poc_ref_pic_reorder_field	src/list_reorder.c	/^void poc_ref_pic_reorder_field(Slice *currSlice, unsigned num_ref_idx_lX_active, int list_no)$/;"	f
poc_ref_pic_reorder_field_enh	src/list_reorder.c	/^void poc_ref_pic_reorder_field_enh(Slice *currSlice, unsigned num_ref_idx_lX_active, int list_no)$/;"	f
poc_ref_pic_reorder_frame	inc/global.h	/^  void (*poc_ref_pic_reorder_frame) (struct slice *currSlice, unsigned num_ref_idx_lX_active, int list_no );$/;"	m	struct:slice
poc_ref_pic_reorder_frame_default	src/list_reorder.c	/^void poc_ref_pic_reorder_frame_default(Slice *currSlice, unsigned num_ref_idx_lX_active, int list_no)$/;"	f
poc_ref_pic_reorder_frame_enh	src/list_reorder.c	/^void poc_ref_pic_reorder_frame_enh(Slice *currSlice, unsigned num_ref_idx_lX_active, int list_no)$/;"	f
point	inc/me_epzs_common.h	/^  SPoint *point;$/;"	m	struct:epzs_struct
pop_flag	inc/pred_struct_types.h	/^  int pop_flag;$/;"	m	struct:seq_struct
pop_pred_struct_frm	src/pred_struct.c	/^static inline void pop_pred_struct_frm( PredStructFrm *p_dst, int slice_type, int nal_ref_idc, int disp_offset, int layer, int slice_qp_off,$/;"	f	file:
pop_start_frame	inc/pred_struct_types.h	/^  int pop_start_frame; \/\/ frame index (in coding order) from which frame structure population commences$/;"	m	struct:seq_struct
populate_frame	src/pred_struct.c	/^static void populate_frame( InputParameters *p_Inp, SeqStructure *p_seq_struct, FrameUnitStruct *p_frm_struct, PredStructAtom *p_cur_prd, $/;"	f	file:
populate_frame_explicit	src/pred_struct.c	/^void populate_frame_explicit( ExpFrameInfo *info, InputParameters *p_Inp, FrameUnitStruct *p_frm_struct, int num_slices )$/;"	f
populate_frame_slice_type	src/pred_struct.c	/^void populate_frame_slice_type( InputParameters *p_Inp, FrameUnitStruct *p_frm_struct, int slice_type, int num_slices )$/;"	f
populate_frm_struct	src/pred_struct.c	/^void populate_frm_struct( VideoParameters *p_Vid, InputParameters *p_Inp, SeqStructure *p_seq_struct, int num_to_populate, int init_frames_to_code )$/;"	f
populate_frm_struct_mvc	src/pred_struct.c	/^void populate_frm_struct_mvc( VideoParameters *p_Vid, InputParameters *p_Inp, SeqStructure *p_seq_struct, int start, int end )$/;"	f
populate_reg_pic	src/pred_struct.c	/^void populate_reg_pic( InputParameters *p_Inp, PicStructure *p_pic, FrameUnitStruct *p_frm_struct, int num_slices, int is_bot_fld )$/;"	f
populate_reg_pred_struct_atom	src/pred_struct.c	/^static int populate_reg_pred_struct_atom( VideoParameters *p_Vid, InputParameters *p_Inp, SeqStructure *p_seq_struct, $/;"	f	file:
populate_rnd_acc_pred_struct_atom	src/pred_struct.c	/^static int populate_rnd_acc_pred_struct_atom( VideoParameters *p_Vid, InputParameters *p_Inp, SeqStructure *p_seq_struct, $/;"	f	file:
pos	inc/global.h	/^  int  pos;$/;"	m	struct:slice
pos2ctx_last	src/cabac.c	/^const byte* pos2ctx_last    [] = {$/;"	v
pos2ctx_last2x4c	src/cabac.c	/^static const byte  pos2ctx_last2x4c[] = {$/;"	v	file:
pos2ctx_last4x4	src/cabac.c	/^static const byte  pos2ctx_last4x4 [] = {$/;"	v	file:
pos2ctx_last4x4c	src/cabac.c	/^static const byte  pos2ctx_last4x4c[] = { $/;"	v	file:
pos2ctx_last8x4	src/cabac.c	/^static const byte  pos2ctx_last8x4 [] = {$/;"	v	file:
pos2ctx_last8x8	src/cabac.c	/^static const byte  pos2ctx_last8x8 [] = {$/;"	v	file:
pos2ctx_map	src/cabac.c	/^const byte* pos2ctx_map    [] = {$/;"	v
pos2ctx_map2x4c	src/cabac.c	/^static const byte  pos2ctx_map2x4c[] = {$/;"	v	file:
pos2ctx_map4x4	src/cabac.c	/^static const byte  pos2ctx_map4x4 [] = {$/;"	v	file:
pos2ctx_map4x4c	src/cabac.c	/^static const byte  pos2ctx_map4x4c[] = {$/;"	v	file:
pos2ctx_map4x8i	src/cabac.c	/^static const byte  pos2ctx_map4x8i[] = {$/;"	v	file:
pos2ctx_map8x4	src/cabac.c	/^static const byte  pos2ctx_map8x4 [] = {$/;"	v	file:
pos2ctx_map8x4i	src/cabac.c	/^static const byte  pos2ctx_map8x4i[] = { $/;"	v	file:
pos2ctx_map8x8	src/cabac.c	/^static const byte  pos2ctx_map8x8 [] = {$/;"	v	file:
pos2ctx_map8x8i	src/cabac.c	/^static const byte  pos2ctx_map8x8i[] = {$/;"	v	file:
pos2ctx_map_int	src/cabac.c	/^const byte* pos2ctx_map_int[] = {$/;"	v
pos_00	inc/me_fullfast.h	/^  int          **pos_00;             \/\/!< position of (0,0) vector$/;"	m	struct:me_full_fast
pos_cr_x	inc/global.h	/^  short            pos_cr_x;        \/\/!< position x in image$/;"	m	struct:me_block
pos_cr_y	inc/global.h	/^  short            pos_cr_y;        \/\/!< position y in image$/;"	m	struct:me_block
pos_x	inc/global.h	/^  short            pos_x;           \/\/!< position x in image$/;"	m	struct:me_block
pos_x	inc/global.h	/^  short pos_x;$/;"	m	struct:pix_pos
pos_x2	inc/global.h	/^  short            pos_x2;          \/\/!< position x >> 2 in image$/;"	m	struct:me_block
pos_x_padded	inc/global.h	/^  short            pos_x_padded;    \/\/!< position x in image$/;"	m	struct:me_block
pos_y	inc/global.h	/^  short            pos_y;           \/\/!< position y in image$/;"	m	struct:me_block
pos_y	inc/global.h	/^  short pos_y;$/;"	m	struct:pix_pos
pos_y2	inc/global.h	/^  short            pos_y2;          \/\/!< position y >> 2 in image$/;"	m	struct:me_block
pos_y_padded	inc/global.h	/^  short            pos_y_padded;    \/\/!< position y in image$/;"	m	struct:me_block
post_filter_information_struct	inc/sei.h	/^} post_filter_information_struct;$/;"	t	typeref:struct:__anon22
pre_frame_num	inc/global.h	/^  int pre_frame_num;$/;"	m	struct:video_par
pre_level	inc/rdoq.h	/^  int pre_level;$/;"	m	struct:level_data_struct
precalcUnaryLevelTab	inc/global.h	/^  int precalcUnaryLevelTab[128][MAX_PREC_COEFF];$/;"	m	struct:video_par
precalculate_unary_exp_golomb_level	src/rdoq_cabac.c	/^void precalculate_unary_exp_golomb_level(VideoParameters *p_Vid)$/;"	f
pred	inc/rdopt.h	/^  imgpel **pred;$/;"	m	struct:rdo_structure
pred_MV_ref	inc/me_umhex.h	/^  int pred_MV_ref[2], pred_MV_uplayer[2];     \/\/!< pred motion vector by space or temporal correlation,Median is provided$/;"	m	struct:umhex_struct
pred_MV_ref_flag	inc/me_umhex.h	/^  int pred_MV_ref_flag;$/;"	m	struct:umhex_struct
pred_MV_uplayer	inc/me_umhex.h	/^  int pred_MV_ref[2], pred_MV_uplayer[2];     \/\/!< pred motion vector by space or temporal correlation,Median is provided$/;"	m	struct:umhex_struct
pred_MV_uplayer_X	inc/me_umhexsmp.h	/^  short   pred_MV_uplayer_X;    \/\/ Up layer MV predictor X-component$/;"	m	struct:umhex_smp_struct
pred_MV_uplayer_Y	inc/me_umhexsmp.h	/^  short   pred_MV_uplayer_Y;    \/\/ Up layer MV predictor Y-component$/;"	m	struct:umhex_smp_struct
pred_SAD	inc/me_umhex.h	/^  distblk pred_SAD;                               \/\/!<  SAD prediction in use.$/;"	m	struct:umhex_struct
pred_SAD_uplayer	inc/me_umhexsmp.h	/^  distblk   pred_SAD_uplayer;     \/\/ Up layer SAD prediction$/;"	m	struct:umhex_smp_struct
pred_struct_atom	inc/pred_struct_types.h	/^typedef struct pred_struct_atom$/;"	s
pred_struct_frm	inc/pred_struct_types.h	/^typedef struct pred_struct_frm$/;"	s
pred_weight_table	src/header.c	/^static int pred_weight_table(Slice *currSlice, Bitstream *bitstream)$/;"	f	file:
predictCurrPicMAD	src/rc_quadratic.c	/^void predictCurrPicMAD( InputParameters *p_Inp, RCQuadratic *p_quad, RCGeneric *p_gen )$/;"	f
predict_nnz	src/macroblock.c	/^int predict_nnz(Macroblock *currMB, int block_type, int i,int j)$/;"	f
predict_nnz_chroma	src/macroblock.c	/^int predict_nnz_chroma(Macroblock *currMB, int i,int j)$/;"	f
predict_point	inc/me_umhex.h	/^  int predict_point[5][2];$/;"	m	struct:umhex_struct
predictor	inc/me_epzs_common.h	/^  EPZSStructure *predictor;$/;"	m	struct:epzs_params
prepare_enc_frame_picture	src/image.c	/^static void prepare_enc_frame_picture (VideoParameters *p_Vid, StorablePicture **stored_pic)$/;"	f	file:
prepare_frame_params	src/lencod.c	/^static void prepare_frame_params(VideoParameters *p_Vid, InputParameters *p_Inp, int curr_frame_to_code)$/;"	f	file:
prepare_ipcm_mode	src/rdopt.c	/^void prepare_ipcm_mode(Macroblock *currMB)$/;"	f
prevFrameNum	inc/global.h	/^  unsigned int prevFrameNum;  \/\/!< POC type 1$/;"	m	struct:video_par
prevFrameNum	inc/global.h	/^  unsigned int prevFrameNum;$/;"	m	struct:coding_par
prevFrameNumOffset	inc/global.h	/^  int prevFrameNumOffset;     \/\/!< POC type 1$/;"	m	struct:video_par
prevFrameNumOffset	inc/global.h	/^  unsigned int prevFrameNumOffset;$/;"	m	struct:coding_par
prev_cbp	inc/global.h	/^  int                 prev_cbp;$/;"	m	struct:macroblock_enc
prev_cbp	inc/global.h	/^  int     prev_cbp;$/;"	m	struct:rd_data
prev_coding_stats	inc/global.h	/^typedef struct prev_coding_stats$/;"	s
prev_cs	inc/global.h	/^  PrevCodingStats prev_cs;$/;"	m	struct:video_par
prev_dqp	inc/global.h	/^  short               prev_dqp;$/;"	m	struct:macroblock_enc
prev_dqp	inc/global.h	/^  short   prev_dqp;$/;"	m	struct:rd_data
prev_frame_no	inc/global.h	/^  int prev_frame_no; \/\/ POC200301$/;"	m	struct:video_par
prev_qp	inc/global.h	/^  short               prev_qp;$/;"	m	struct:macroblock_enc
prev_qp	inc/global.h	/^  short   prev_qp;$/;"	m	struct:rd_data
prev_recode_mb	inc/global.h	/^  Boolean             prev_recode_mb;$/;"	m	struct:macroblock_enc
prev_view_is_anchor	inc/global.h	/^  int prev_view_is_anchor;$/;"	m	struct:video_par
primary_pic_type	inc/global.h	/^  unsigned int primary_pic_type;$/;"	m	struct:video_par
priority_id	inc/global.h	/^  int priority_id;$/;"	m	struct:video_par
probabilities	src/context_ini.c	/^static const double probabilities[64] =$/;"	v	file:
probability	inc/global.h	/^  double probability[128];$/;"	m	struct:video_par
proc_picture	inc/global.h	/^  struct storable_picture *proc_picture;$/;"	m	struct:video_par	typeref:struct:video_par::storable_picture
process_picture_in_dpb_s	src/mbuffer.c	/^static void process_picture_in_dpb_s(VideoParameters *p_Vid, StorablePicture *p_pic)$/;"	f	file:
profile_check	src/conformance.c	/^void profile_check(InputParameters *p_Inp)$/;"	f
propagate_carry	src/biariencode.c	/^static forceinline void propagate_carry(EncodingEnvironmentPtr eep)$/;"	f	file:
psnr_value	inc/global.h	/^  float psnr_value[3];$/;"	m	struct:prev_coding_stats
pt	inc/rtp.h	/^  unsigned int pt;         \/\/!< 7 bits, Payload Type, dynamically established$/;"	m	struct:__anon24
put_buffer	src/biariencode.c	/^static forceinline void put_buffer(EncodingEnvironmentPtr eep)$/;"	f	file:
put_buffer_bot	src/image.c	/^static void put_buffer_bot(VideoParameters *p_Vid)$/;"	f	file:
put_buffer_frame	src/image.c	/^static void put_buffer_frame(VideoParameters *p_Vid)$/;"	f	file:
put_buffer_top	src/image.c	/^static void put_buffer_top(VideoParameters *p_Vid)$/;"	f	file:
put_last_chunk_plus_outstanding	src/biariencode.c	/^static inline void put_last_chunk_plus_outstanding(EncodingEnvironmentPtr eep, unsigned int l) $/;"	f	file:
put_last_chunk_plus_outstanding_final	src/biariencode.c	/^static inline void put_last_chunk_plus_outstanding_final(EncodingEnvironmentPtr eep, unsigned int l) $/;"	f	file:
put_one_byte	src/biariencode.c	/^static inline void put_one_byte(EncodingEnvironmentPtr eep, int b) $/;"	f	file:
put_one_byte_final	src/biariencode.c	/^static inline void put_one_byte_final(EncodingEnvironmentPtr eep, unsigned int b)$/;"	f	file:
put_one_word	src/biariencode.c	/^static inline void put_one_word(EncodingEnvironmentPtr eep, int b) $/;"	f	file:
qp	inc/global.h	/^  int                 qp;$/;"	m	struct:slice
qp	inc/global.h	/^  int qp;                      \/\/!< quant for the current frame$/;"	m	struct:video_par
qp	inc/global.h	/^  short               qp;                         \/\/!< QP luma  $/;"	m	struct:macroblock_enc
qp	inc/global.h	/^  short   qp;$/;"	m	struct:rd_data
qp	inc/params.h	/^  int qp[NUM_SLICE_TYPES];              \/\/!< QP values for all slice types$/;"	m	struct:inp_par_enc
qp	inc/pred_struct_types.h	/^  int qp;                 \/\/ QP used to code this frame unit$/;"	m	struct:frame_struct
qp	inc/pred_struct_types.h	/^  int qp;$/;"	m	struct:slice_struct
qp2frame	inc/params.h	/^  int qp2frame;                         \/\/!< frame in display order from which to apply the Change QP offsets$/;"	m	struct:inp_par_enc
qp2off	inc/params.h	/^  int qp2off[NUM_SLICE_TYPES];          \/\/!< Change QP offset values for all slice types$/;"	m	struct:inp_par_enc
qpBRSOffset	inc/params.h	/^  int qpBRSOffset;                      \/\/!< QP for reference B slice coded pictures$/;"	m	struct:inp_par_enc
qp_scaled	inc/global.h	/^  short               qp_scaled[MAX_PLANE];       \/\/!< QP scaled for all comps.$/;"	m	struct:macroblock_enc
qpc	inc/global.h	/^  short               qpc[2];                     \/\/!< QP chroma$/;"	m	struct:macroblock_enc
qpsp	inc/global.h	/^  int qpsp;                    \/\/!< quant for the prediction frame of SP-frame$/;"	m	struct:video_par
qpsp	inc/global.h	/^  short               qpsp;$/;"	m	struct:macroblock_enc
qpsp	inc/params.h	/^  int qpsp;                             \/\/!< QPSP quantization value$/;"	m	struct:inp_par_enc
qs	inc/global.h	/^  int                 qs;$/;"	m	struct:slice
quant_4x4	inc/global.h	/^  int (*quant_4x4)     (Macroblock *currMB, int **tblock, struct quant_methods *q_method);$/;"	m	struct:slice
quant_4x4_2step	src/quant4x4_2step.c	/^int quant_4x4_2step(Macroblock *currMB, int **tblock, struct quant_methods *q_method)$/;"	f
quant_4x4_around	src/quant4x4_around.c	/^int quant_4x4_around(Macroblock *currMB, int **tblock, struct quant_methods *q_method)$/;"	f
quant_4x4_normal	src/quant4x4_normal.c	/^int quant_4x4_normal(Macroblock *currMB, int **tblock, struct quant_methods *q_method)$/;"	f
quant_4x4_trellis	src/quant4x4_trellis.c	/^int quant_4x4_trellis(Macroblock *currMB, int **tblock, struct quant_methods *q_method)$/;"	f
quant_8x8	inc/global.h	/^  int (*quant_8x8)     (Macroblock *currMB, int **tblock, struct quant_methods *q_method);$/;"	m	struct:slice
quant_8x8_around	src/quant8x8_around.c	/^int quant_8x8_around(Macroblock *currMB, int **tblock, struct quant_methods *q_method)$/;"	f
quant_8x8_normal	src/quant8x8_normal.c	/^int quant_8x8_normal(Macroblock *currMB, int **tblock, struct quant_methods *q_method)$/;"	f
quant_8x8_trellis	src/quant8x8_trellis.c	/^int quant_8x8_trellis(Macroblock *currMB, int **tblock, struct quant_methods *q_method)$/;"	f
quant_8x8cavlc	inc/global.h	/^  int (*quant_8x8cavlc)(Macroblock *currMB, int **tblock, struct quant_methods *q_method, int***  cofAC);$/;"	m	struct:slice
quant_8x8cavlc_around	src/quant8x8_around.c	/^int quant_8x8cavlc_around(Macroblock *currMB, int **tblock, struct quant_methods *q_method, int***  cofAC)$/;"	f
quant_8x8cavlc_normal	src/quant8x8_normal.c	/^int quant_8x8cavlc_normal(Macroblock *currMB, int **tblock, struct quant_methods *q_method, int***  cofAC)$/;"	f
quant_8x8cavlc_trellis	src/quant8x8_trellis.c	/^int quant_8x8cavlc_trellis(Macroblock *currMB, int **tblock, struct quant_methods *q_method, int***  cofAC)$/;"	f
quant_ac4x4	inc/global.h	/^  int (*quant_ac4x4)   (Macroblock *currMB, int **tblock, struct quant_methods *q_method);$/;"	m	struct:slice
quant_ac4x4_2step	src/quant4x4_2step.c	/^int quant_ac4x4_2step(Macroblock *currMB, int **tblock, struct quant_methods *q_method)$/;"	f
quant_ac4x4_around	src/quant4x4_around.c	/^int quant_ac4x4_around(Macroblock *currMB, int **tblock, struct quant_methods *q_method)$/;"	f
quant_ac4x4_normal	src/quant4x4_normal.c	/^int quant_ac4x4_normal(Macroblock *currMB, int **tblock, struct quant_methods *q_method)$/;"	f
quant_ac4x4_trellis	src/quant4x4_trellis.c	/^int quant_ac4x4_trellis(Macroblock *currMB, int **tblock, struct quant_methods *q_method)$/;"	f
quant_ac4x4cr	inc/global.h	/^  int (*quant_ac4x4cr) (Macroblock *currMB, int **tblock, struct quant_methods *q_method);$/;"	m	struct:slice
quant_coef	src/q_matrix.c	/^static const int quant_coef[6][4][4] = {$/;"	v	file:
quant_coef8	src/q_matrix.c	/^static const int quant_coef8[6][8][8] =$/;"	v	file:
quant_dc2x2_2step	src/quantChroma_2step.c	/^int quant_dc2x2_2step(Macroblock *currMB, int **tblock, int qp, int* DCLevel, int* DCRun, $/;"	f
quant_dc2x2_around	src/quantChroma_around.c	/^int quant_dc2x2_around(Macroblock *currMB, int **tblock, int qp, int* DCLevel, int* DCRun, $/;"	f
quant_dc2x2_normal	src/quantChroma_normal.c	/^int quant_dc2x2_normal(Macroblock *currMB, int **tblock, int qp, int* DCLevel, int* DCRun, $/;"	f
quant_dc2x2_trellis	src/quantChroma_trellis.c	/^int quant_dc2x2_trellis(Macroblock *currMB, int **tblock, int qp, int* DCLevel, int* DCRun, $/;"	f
quant_dc4x2_2step	src/quantChroma_2step.c	/^int quant_dc4x2_2step(Macroblock *currMB, int **tblock, int qp, int* DCLevel, int* DCRun, $/;"	f
quant_dc4x2_around	src/quantChroma_around.c	/^int quant_dc4x2_around(Macroblock *currMB, int **tblock, int qp, int* DCLevel, int* DCRun, $/;"	f
quant_dc4x2_normal	src/quantChroma_normal.c	/^int quant_dc4x2_normal(Macroblock *currMB, int **tblock, int qp, int* DCLevel, int* DCRun, $/;"	f
quant_dc4x2_trellis	src/quantChroma_trellis.c	/^int quant_dc4x2_trellis(Macroblock *currMB, int **tblock, int qp, int* DCLevel, int* DCRun, $/;"	f
quant_dc4x4	inc/global.h	/^  int (*quant_dc4x4)   (Macroblock *currMB, int **tblock, int qp, int*  DCLevel, int*  DCRun, LevelQuantParams *q_params_4x4, const byte (*pos_scan)[2]);$/;"	m	struct:slice
quant_dc4x4_2step	src/quant4x4_2step.c	/^int quant_dc4x4_2step(Macroblock *currMB, int **tblock, int qp, int* DCLevel, int* DCRun, $/;"	f
quant_dc4x4_around	src/quant4x4_around.c	/^int quant_dc4x4_around(Macroblock *currMB, int **tblock, int qp, int* DCLevel, int* DCRun, $/;"	f
quant_dc4x4_normal	src/quant4x4_normal.c	/^int quant_dc4x4_normal(Macroblock *currMB, int **tblock, int qp, int* DCLevel, int* DCRun, $/;"	f
quant_dc4x4_trellis	src/quant4x4_trellis.c	/^int quant_dc4x4_trellis(Macroblock *currMB, int **tblock, int qp, int* DCLevel, int* DCRun, $/;"	f
quant_dc_cr	inc/global.h	/^  int (*quant_dc_cr)     (Macroblock *currMB, int **tblock, int qp, int* DCLevel, int* DCRun, $/;"	m	struct:slice
quincunx_sampling_flag	inc/sei.h	/^  Boolean       quincunx_sampling_flag;$/;"	m	struct:__anon21
rand_acc_test_range	src/pred_struct.c	/^static int rand_acc_test_range( int curr_frame, int offset, int idr_period )$/;"	f	file:
random_access	inc/pred_struct_types.h	/^  int random_access;      \/\/ random access point (IDR or Intra-coded picture that precludes future pictures in display order to reference pictures decoded prior to this picture)$/;"	m	struct:frame_struct
random_access	inc/pred_struct_types.h	/^  int random_access; \/\/ to support open GOPs$/;"	m	struct:pic_struct
random_access	inc/pred_struct_types.h	/^  int random_access;$/;"	m	struct:pred_struct_frm
rate	inc/rdopt.h	/^  double rate;   \/\/ why is rate a double? Could we use int64 or even simply int given that this is for a MB? Could a MB require int64 bits (answer is no)? $/;"	m	struct:__anon27
rc_alloc_generic	src/ratectl.c	/^void rc_alloc_generic( VideoParameters *p_Vid, RCGeneric **p_quad )$/;"	f
rc_alloc_quadratic	src/rc_quadratic.c	/^void rc_alloc_quadratic( VideoParameters *p_Vid, InputParameters *p_Inp, RCQuadratic **p_quad )$/;"	f
rc_allocate_memory	src/rc_quadratic.c	/^void rc_allocate_memory( VideoParameters *p_Vid, InputParameters *p_Inp )$/;"	f
rc_copy_generic	src/ratectl.c	/^void rc_copy_generic( VideoParameters *p_Vid, RCGeneric *dst, RCGeneric *src )$/;"	f
rc_copy_quadratic	src/rc_quadratic.c	/^void rc_copy_quadratic( VideoParameters *p_Vid, InputParameters *p_Inp, RCQuadratic *dst, RCQuadratic *src )$/;"	f
rc_cpb_size	inc/params.h	/^  int rc_cpb_size;$/;"	m	struct:inp_par_enc
rc_free_generic	src/ratectl.c	/^void rc_free_generic(RCGeneric **p_quad)$/;"	f
rc_free_memory	src/rc_quadratic.c	/^void rc_free_memory( VideoParameters *p_Vid, InputParameters *p_Inp )$/;"	f
rc_free_quadratic	src/rc_quadratic.c	/^void rc_free_quadratic(RCQuadratic **p_quad)$/;"	f
rc_generic	inc/rc_types.h	/^typedef struct rc_generic$/;"	s
rc_handle_mb	src/rc_quadratic.c	/^int rc_handle_mb( Macroblock *currMB, int prev_mb )$/;"	f
rc_init_GOP	src/rc_quadratic.c	/^void rc_init_GOP(VideoParameters *p_Vid, InputParameters *p_Inp, RCQuadratic *p_quad, RCGeneric *p_gen, int np, int nb)$/;"	f
rc_init_bottom_field	src/rc_quadratic.c	/^void rc_init_bottom_field ( VideoParameters *p_Vid, InputParameters *p_Inp, int TopFieldBits )$/;"	f
rc_init_frame	src/ratectl.c	/^void rc_init_frame(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
rc_init_frame_rdpic	src/rc_quadratic.c	/^void rc_init_frame_rdpic( VideoParameters *p_Vid, InputParameters *p_Inp, float rateRatio )$/;"	f
rc_init_gop_params	src/ratectl.c	/^void rc_init_gop_params(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
rc_init_pict	src/rc_quadratic.c	/^void rc_init_pict(VideoParameters *p_Vid, InputParameters *p_Inp, RCQuadratic *p_quad, RCGeneric *p_gen, int fieldpic,int topfield,int targetcomputation, float mult)$/;"	f
rc_init_pict_ptr	inc/global.h	/^  void (*rc_init_pict_ptr)        (struct video_par *p_Vid, InputParameters *p_Inp, RCQuadratic *p_quad, RCGeneric *p_gen, int fieldpic, int topfield, int targetcomputation, float mult);$/;"	m	struct:video_par
rc_init_seq	src/rc_quadratic.c	/^void rc_init_seq(VideoParameters *p_Vid, InputParameters *p_Inp, RCQuadratic *p_quad, RCGeneric *p_gen)$/;"	f
rc_init_sequence	src/ratectl.c	/^void rc_init_sequence(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
rc_init_top_field	src/rc_quadratic.c	/^void rc_init_top_field ( VideoParameters *p_Vid, InputParameters *p_Inp )$/;"	f
rc_quadratic	inc/rc_types.h	/^typedef struct rc_quadratic$/;"	s
rc_restore_state	src/rc_quadratic.c	/^void rc_restore_state( VideoParameters *p_Vid, InputParameters *p_Inp )$/;"	f
rc_save_state	src/rc_quadratic.c	/^void rc_save_state( VideoParameters *p_Vid, InputParameters *p_Inp )$/;"	f
rc_store_diff	src/ratectl.c	/^void rc_store_diff(int diffy[16][16], imgpel **p_curImg, int cpix_x,imgpel **prediction)$/;"	f
rc_store_diff_16b	src/ratectl.c	/^void rc_store_diff_16b(int diffy[16][16], imgpel **p_curImg, int cpix_x,imgpel **prediction)$/;"	f
rc_store_mad	src/ratectl.c	/^void rc_store_mad(Macroblock *currMB)$/;"	f
rc_store_slice_header_bits	src/ratectl.c	/^void rc_store_slice_header_bits( VideoParameters *p_Vid, InputParameters *p_Inp, int len )$/;"	f
rc_update_mb_stats	src/rc_quadratic.c	/^void rc_update_mb_stats(Macroblock *currMB)$/;"	f
rc_update_pict	src/rc_quadratic.c	/^void rc_update_pict(VideoParameters *p_Vid, InputParameters *p_Inp, RCQuadratic *p_quad, RCGeneric *p_gen, int nbits)$/;"	f
rc_update_pict_frame	src/rc_quadratic.c	/^void rc_update_pict_frame(VideoParameters *p_Vid, InputParameters *p_Inp, RCQuadratic *p_quad, RCGeneric *p_gen, int nbits)$/;"	f
rc_update_pict_frame_ptr	inc/global.h	/^  void (*rc_update_pict_frame_ptr)(struct video_par *p_Vid, InputParameters *p_Inp, RCQuadratic *p_quad, RCGeneric *p_gen, int nbits);$/;"	m	struct:video_par
rc_update_picture	src/rc_quadratic.c	/^void rc_update_picture( VideoParameters *p_Vid, InputParameters *p_Inp, int bits )$/;"	f
rc_update_picture_ptr	inc/global.h	/^  void (*rc_update_picture_ptr)   (struct video_par *p_Vid, InputParameters *p_Inp, int bits);$/;"	m	struct:video_par
rd_8x8_data	inc/global.h	/^typedef struct rd_8x8_data$/;"	s
rd_data	inc/global.h	/^typedef struct rd_data$/;"	s
rd_params	inc/global.h	/^typedef struct rd_params$/;"	s
rd_pass	inc/global.h	/^  int rd_pass;$/;"	m	struct:prev_coding_stats
rd_pass	inc/global.h	/^  unsigned int rd_pass;$/;"	m	struct:video_par
rd_pic_decision	src/rdpicdecision.c	/^int rd_pic_decision(double snrY_version1, double snrY_version2, int bits_version1, int bits_version2, double lambda_picture)$/;"	f
rdcost	inc/rdopt.h	/^  double rdcost;$/;"	m	struct:__anon27
rdcost_for_4x4_intra_blocks	inc/global.h	/^  distblk (*rdcost_for_4x4_intra_blocks)        (Macroblock *currMB, int *c_nz, int b8, int b4, int ipmode, int lambda, int mostProbableMode, distblk min_rdcost);$/;"	m	struct:slice
rdcost_for_4x4_intra_blocks	src/rdopt.c	/^static distblk rdcost_for_4x4_intra_blocks (Macroblock *currMB,$/;"	f	file:
rdcost_for_4x4_intra_blocks_444	src/rdopt.c	/^static distblk rdcost_for_4x4_intra_blocks_444 (Macroblock *currMB,$/;"	f	file:
rdcost_for_8x8_intra_blocks	inc/global.h	/^  distblk (*rdcost_for_8x8_intra_blocks)        (Macroblock *currMB, int *c_nz, int b8, int ipmode, int lambda, distblk min_rdcost, int mostProbableMode);$/;"	m	struct:slice
rdcost_for_8x8_intra_blocks	src/transform8x8.c	/^distblk rdcost_for_8x8_intra_blocks(Macroblock *currMB, int *nonzero, int b8, int ipmode, int lambda, distblk min_rdcost, int mostProbableMode)$/;"	f
rdcost_for_8x8_intra_blocks_444	src/transform8x8.c	/^distblk  rdcost_for_8x8_intra_blocks_444(Macroblock *currMB, int *nonzero, int b8, int ipmode, int lambda, distblk min_rdcost, int mostProbableMode)$/;"	f
rdcost_for_8x8blocks	src/rdopt.c	/^distblk rdcost_for_8x8blocks (Macroblock *currMB, \/\/ --> Current macroblock to code$/;"	f
rddata	inc/global.h	/^  RD_DATA *rddata;$/;"	m	struct:slice
rddata_bot_field_mb	inc/global.h	/^  RD_DATA rddata_bot_field_mb;$/;"	m	struct:slice
rddata_bot_frame_mb	inc/global.h	/^  RD_DATA rddata_bot_frame_mb; $/;"	m	struct:slice
rddata_top_field_mb	inc/global.h	/^  RD_DATA rddata_top_field_mb;$/;"	m	struct:slice
rddata_top_frame_mb	inc/global.h	/^  RD_DATA rddata_top_frame_mb;$/;"	m	struct:slice
rddata_trellis_best	inc/global.h	/^  RD_DATA rddata_trellis_best;$/;"	m	struct:slice
rddata_trellis_curr	inc/global.h	/^  RD_DATA rddata_trellis_curr;$/;"	m	struct:slice
rdo_low_intra_chroma_decision	inc/global.h	/^  void    (*rdo_low_intra_chroma_decision)      (Macroblock *currMB, int mb_available_up, int mb_available_left[2], int mb_available_up_left);$/;"	m	struct:slice
rdo_low_intra_chroma_decision	src/intra_chroma.c	/^void rdo_low_intra_chroma_decision(Macroblock *currMB, int mb_available_up, int mb_available_left[2], int mb_available_up_left)$/;"	f
rdo_low_intra_chroma_decision_mbaff	src/intra_chroma.c	/^void rdo_low_intra_chroma_decision_mbaff(Macroblock *currMB, int mb_available_up, int mb_available_left[2], int mb_available_up_left)$/;"	f
rdo_structure	inc/rdopt.h	/^struct rdo_structure$/;"	s
rdopt	inc/params.h	/^  int rdopt;$/;"	m	struct:inp_par_enc
rdoq_4x4	inc/global.h	/^  void (*rdoq_4x4)       (Macroblock *currMB, int **tblock, struct quant_methods *q_method, int levelTrellis[16]);$/;"	m	struct:slice
rdoq_4x4_CABAC	src/quant4x4_trellis.c	/^void rdoq_4x4_CABAC(Macroblock *currMB, int **tblock, struct quant_methods *q_method, int levelTrellis[])$/;"	f
rdoq_4x4_CAVLC	src/quant4x4_trellis.c	/^void rdoq_4x4_CAVLC(Macroblock *currMB, int **tblock, struct quant_methods *q_method, int levelTrellis[])$/;"	f
rdoq_8x8_CABAC	src/quant8x8_trellis.c	/^static void rdoq_8x8_CABAC(Macroblock *currMB, int **tblock, int block_x,int qp_per, int qp_rem, $/;"	f	file:
rdoq_8x8_CAVLC	src/quant8x8_trellis.c	/^static void rdoq_8x8_CAVLC(Macroblock *currMB, int **tblock, int block_y, int block_x, int qp_per, int qp_rem,$/;"	f	file:
rdoq_ac4x4	inc/global.h	/^  void (*rdoq_ac4x4)     (Macroblock *currMB, int **tblock , struct quant_methods *q_method, int levelTrellis[16]);$/;"	m	struct:slice
rdoq_ac4x4_CABAC	src/quant4x4_trellis.c	/^void rdoq_ac4x4_CABAC(Macroblock *currMB, int **tblock, struct quant_methods *q_method, int levelTrellis[])$/;"	f
rdoq_ac4x4_CAVLC	src/quant4x4_trellis.c	/^void rdoq_ac4x4_CAVLC(Macroblock *currMB, int **tblock, struct quant_methods *q_method, int levelTrellis[])$/;"	f
rdoq_dc	inc/global.h	/^  void (*rdoq_dc)        (Macroblock *currMB, int **tblock, int qp_per, int qp_rem, LevelQuantParams *q_params_4x4, $/;"	m	struct:slice
rdoq_dc_CABAC	src/quant4x4_trellis.c	/^void rdoq_dc_CABAC(Macroblock *currMB, int **tblock, int qp_per, int qp_rem, LevelQuantParams *q_params_4x4, const byte (*pos_scan)[2], int levelTrellis[], int type)$/;"	f
rdoq_dc_CAVLC	src/quant4x4_trellis.c	/^void rdoq_dc_CAVLC(Macroblock *currMB, int **tblock, int qp_per, int qp_rem, LevelQuantParams *q_params_4x4, $/;"	f
rdoq_dc_cr	inc/global.h	/^  void (*rdoq_dc_cr)     (Macroblock *currMB, int **tblock, int qp_per, int qp_rem, LevelQuantParams *q_params_4x4, $/;"	m	struct:slice
rdoq_dc_cr_CABAC	src/quantChroma_trellis.c	/^void rdoq_dc_cr_CABAC(Macroblock *currMB, int **tblock, int qp_per, int qp_rem, LevelQuantParams *q_params_4x4, const byte (*pos_scan)[2], int levelTrellis[], int type)$/;"	f
rdoq_dc_cr_CAVLC	src/quantChroma_trellis.c	/^void rdoq_dc_cr_CAVLC(Macroblock *currMB, int **tblock, int qp_per, int qp_rem, LevelQuantParams *q_params_4x4, const byte (*pos_scan)[2], int levelTrellis[], int type)$/;"	f
rdoq_motion_copy	inc/global.h	/^  int                 rdoq_motion_copy;$/;"	m	struct:slice
read_SP_coefficients	src/image.c	/^void read_SP_coefficients(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
read_input_data	src/image.c	/^static int read_input_data(VideoParameters *p_Vid)$/;"	f	file:
read_input_data_32pulldown	src/image.c	/^static int read_input_data_32pulldown(VideoParameters *p_Vid)$/;"	f	file:
read_slice_group_info	src/configfile.c	/^void read_slice_group_info(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
rec4x4	inc/rdopt.h	/^  imgpel ***rec4x4;$/;"	m	struct:rdo_structure
rec8x8	inc/rdopt.h	/^  imgpel ***rec8x8;$/;"	m	struct:rdo_structure
rec_mb	inc/global.h	/^  imgpel  ***rec_mb;            \/\/!< hold the components of reconstructed MB$/;"	m	struct:rd_data
rec_mb	inc/rdopt.h	/^  imgpel ***rec_mb;$/;"	m	struct:rdo_structure
rec_mb8x8_cr	inc/global.h	/^  imgpel ***rec_mb8x8_cr;$/;"	m	struct:rd_8x8_data
rec_mbY8x8	inc/global.h	/^  imgpel **rec_mbY8x8;$/;"	m	struct:rd_8x8_data
rec_type	inc/errdo.h	/^  int rec_type;$/;"	m	struct:decoders
recovery_frame_cnt	inc/sei.h	/^  unsigned int  recovery_frame_cnt;$/;"	m	struct:__anon18
recovery_point_information_struct	inc/sei.h	/^} recovery_point_information_struct;$/;"	t	typeref:struct:__anon18
redundant_coding	inc/global.h	/^  int  redundant_coding;$/;"	m	struct:video_par
redundant_pic_cnt	inc/global.h	/^  int redundant_pic_cnt;$/;"	m	struct:video_par
redundant_pic_flag	inc/params.h	/^  int redundant_pic_flag;   \/\/! encoding of redundant pictures$/;"	m	struct:inp_par_enc
redundant_ref_idx	inc/global.h	/^  int  redundant_ref_idx;$/;"	m	struct:video_par
ref	inc/global.h	/^   char   ref[2];$/;"	m	struct:info_8x8
refIdx	inc/global.h	/^  short refIdx[2];$/;"	m	struct:__anon4
ref_cost	inc/mv_search.h	/^static inline distblk ref_cost(const Slice *currSlice, int lambda, short ref, int list_offset)$/;"	f
ref_frames_in_buffer	inc/mbuffer.h	/^  unsigned      ref_frames_in_buffer;$/;"	m	struct:decoded_picture_buffer
ref_idx	inc/global.h	/^  char             ref_idx;          \/\/!< current reference index$/;"	m	struct:me_block
ref_idx	inc/mbuffer.h	/^  char                     ref_idx[2];  \/\/!< reference picture   [list][subblock_y][subblock_x]$/;"	m	struct:pic_motion_params
ref_no_contexts	inc/global.h	/^  BiContextType ref_no_contexts  [2][NUM_REF_NO_CTX];$/;"	m	struct:__anon1
ref_pic	inc/mbuffer.h	/^  struct storable_picture *ref_pic[2];  \/\/!< referrence picture pointer$/;"	m	struct:pic_motion_params	typeref:struct:pic_motion_params::storable_picture
ref_pic_list_reordering	src/header.c	/^static int ref_pic_list_reordering(Slice *currSlice, Bitstream *bitstream)$/;"	f	file:
ref_pic_list_reordering_flag	inc/global.h	/^  int                 ref_pic_list_reordering_flag[2];$/;"	m	struct:slice
ref_pic_na	inc/mbuffer.h	/^  int  ref_pic_na[6];$/;"	m	struct:storable_picture
ref_subseq_id	inc/sei.h	/^  int ref_subseq_id[MAX_DEPENDENT_SUBSEQ];$/;"	m	struct:__anon13
ref_subseq_layer_num	inc/sei.h	/^  int ref_subseq_layer_num[MAX_DEPENDENT_SUBSEQ];$/;"	m	struct:__anon13
refar	inc/global.h	/^  char    ***refar;                   \/\/!< reference frame array [list][y][x]$/;"	m	struct:rd_data
refbits	inc/global.h	/^  int*    refbits;$/;"	m	struct:video_par
reference_idc	inc/explicit_seq.h	/^  int reference_idc;$/;"	m	struct:__anon26
reference_idc	inc/global.h	/^  int reference_idc;      \/\/! Is reference?$/;"	m	struct:__anon5
refresh_map	inc/global.h	/^  byte **refresh_map; \/\/!< Stores the new values for pixel_map$/;"	m	struct:video_par
remove_frame_from_dpb	src/mbuffer.c	/^void remove_frame_from_dpb(DecodedPictureBuffer *p_Dpb, int pos)$/;"	f
renorm_table_32	src/biariencode.c	/^static const byte renorm_table_32[32]={6,5,4,4,3,3,3,3,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};$/;"	v	file:
reorder_against_default_ref_pic_lists	src/list_reorder.c	/^void reorder_against_default_ref_pic_lists(Slice *currSlice, int cur_list)$/;"	f
reorder_lists	inc/global.h	/^  void (*reorder_lists            ) (struct slice *currSlice);$/;"	m	struct:slice
reorder_lists	src/list_reorder.c	/^void reorder_lists( Slice *currSlice )$/;"	f
reorder_lists_dummy	src/list_reorder.c	/^static void reorder_lists_dummy( Slice *currSlice )$/;"	f	file:
reorder_long_term	src/mbuffer.c	/^static void reorder_long_term(Slice *currSlice, DecodedPictureBuffer *p_Dpb, StorablePicture **RefPicListX, int cur_list, int frame_no, int *refIdxLX)$/;"	f	file:
reorder_ref_pic_list	src/mbuffer.c	/^void reorder_ref_pic_list(Slice *currSlice, int cur_list)$/;"	f
reorder_short_term	src/mbuffer.c	/^void reorder_short_term(Slice *currSlice, DecodedPictureBuffer *p_Dpb, int cur_list, int picNumLX, int *refIdxLX)$/;"	f
replace_top_pic_with_frame	src/mbuffer.c	/^void replace_top_pic_with_frame(DecodedPictureBuffer *p_Dpb, StorablePicture* p, FrameFormat *output)$/;"	f
replace_top_proc_pic_with_frame	src/mbuffer.c	/^void replace_top_proc_pic_with_frame(DecodedPictureBuffer *p_Dpb, StorablePicture* p)$/;"	f
report	src/report.c	/^void report( VideoParameters *p_Vid, InputParameters *p_Inp, StatParameters *p_Stats)$/;"	f
report_frame_statistic	src/report.c	/^void report_frame_statistic(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
report_log	src/report.c	/^void report_log(VideoParameters *p_Vid, InputParameters *p_Inp, StatParameters *p_Stats)$/;"	f
report_log_mode	src/report.c	/^void report_log_mode(VideoParameters *p_Vid, InputParameters *p_Inp, StatParameters *p_Stats)$/;"	f
report_slice_pred_stats	src/report.c	/^double report_slice_pred_stats(FILE *p_stat, StatParameters *p_Stats, int slice_type, double bit_use, char *slice_name)$/;"	f
report_stats	src/report.c	/^void report_stats(VideoParameters *p_Vid, InputParameters *p_Inp, StatParameters *p_Stats, int64 bit_use[NUM_SLICE_TYPES][2])$/;"	f
report_stats_on_error	src/report.c	/^void report_stats_on_error(void)$/;"	f
res_con_diff_UV	inc/errdo.h	/^  int *** res_con_diff_UV;                \/\/!< for storing the residual concealment difference for component UV in rmpc algorithm $/;"	m	struct:distortion_estimation
res_con_diff_Y	inc/errdo.h	/^  int **  res_con_diff_Y;                 \/\/!< for storing the residual concealment difference for component Y in rmpc algorithm$/;"	m	struct:distortion_estimation
res_img	inc/errdo.h	/^  int    ***res_img;                 \/\/!< Residual values for macroblock$/;"	m	struct:decoders
res_mb_best8x8	inc/errdo.h	/^  int    ***res_mb_best8x8;          \/\/!< Residual values for the best b8x8 to be used in P8x8 mode decision$/;"	m	struct:decoders
reset_adaptive_rounding	src/q_around.c	/^void reset_adaptive_rounding(VideoParameters *p_Vid)$/;"	f
reset_adaptive_rounding_direct	src/q_around.c	/^void reset_adaptive_rounding_direct(VideoParameters *p_Vid)$/;"	f
reset_block	src/macroblock.c	/^int reset_block(Macroblock* currMB, int *cbp, int64 *cbp_blk, int block8x8)$/;"	f
reset_coding_state	inc/global.h	/^  void (*reset_coding_state) (Macroblock *currMB, struct coding_state *);$/;"	m	struct:slice
reset_coding_state_cabac	src/rdopt_coding_state.c	/^static void reset_coding_state_cabac (Macroblock *currMB, CSobj *cs)$/;"	f	file:
reset_coding_state_cavlc	src/rdopt_coding_state.c	/^void reset_coding_state_cavlc (Macroblock *currMB, CSobj *cs)$/;"	f
reset_coding_state_nordo	src/rdopt_coding_state.c	/^static void reset_coding_state_nordo (Macroblock *currMB, CSobj *cs)$/;"	f	file:
reset_fast_full_search	src/me_fullfast.c	/^void reset_fast_full_search (VideoParameters *p_Vid)$/;"	f
reset_macroblock	src/macroblock.c	/^void reset_macroblock(Macroblock *currMB)$/;"	f
reset_mb_nz_coeff	src/vlc.c	/^void reset_mb_nz_coeff(VideoParameters *p_Vid, int mb_number)$/;"	f
reset_pic_bin_count	src/biariencode.c	/^void reset_pic_bin_count(VideoParameters *p_Vid)$/;"	f
reset_valid_modes	src/mode_decision.c	/^void reset_valid_modes(RD_PARAMS *enc_mb)$/;"	f
residual_transform_quant_chroma_4x4	inc/global.h	/^  int  (*residual_transform_quant_chroma_4x4[2])(struct macroblock_enc *currMB, int uv,int i11);$/;"	m	struct:macroblock_enc
residual_transform_quant_chroma_4x4	src/block.c	/^int residual_transform_quant_chroma_4x4(Macroblock *currMB, int uv, int cr_cbp)$/;"	f
residual_transform_quant_chroma_4x4_ls	src/block.c	/^int residual_transform_quant_chroma_4x4_ls(Macroblock *currMB, int uv, int cr_cbp)$/;"	f
residual_transform_quant_chroma_4x4_sp	src/block.c	/^int residual_transform_quant_chroma_4x4_sp(Macroblock *currMB, int uv,int cr_cbp)$/;"	f
residual_transform_quant_chroma_4x4_sp2	src/block.c	/^int residual_transform_quant_chroma_4x4_sp2(Macroblock *currMB, int uv,int cr_cbp)$/;"	f
residual_transform_quant_luma_16x16	inc/global.h	/^  int  (*residual_transform_quant_luma_16x16)    (struct macroblock_enc *currMB, ColorPlane pl);$/;"	m	struct:macroblock_enc
residual_transform_quant_luma_16x16	src/block.c	/^int residual_transform_quant_luma_16x16(Macroblock *currMB, ColorPlane pl)$/;"	f
residual_transform_quant_luma_16x16_ls	src/block.c	/^int residual_transform_quant_luma_16x16_ls(Macroblock *currMB, ColorPlane pl)$/;"	f
residual_transform_quant_luma_4x4	inc/global.h	/^  int  (*residual_transform_quant_luma_4x4)      (struct macroblock_enc *currMB, ColorPlane pl, int block_x, int block_y, int *coeff_cost, int intra);$/;"	m	struct:macroblock_enc
residual_transform_quant_luma_4x4	src/block.c	/^int residual_transform_quant_luma_4x4(Macroblock *currMB, ColorPlane pl, int block_x,int block_y, int *coeff_cost, int intra)$/;"	f
residual_transform_quant_luma_4x4_ls	src/block.c	/^int residual_transform_quant_luma_4x4_ls(Macroblock *currMB, ColorPlane pl, int block_x,int block_y,int *coeff_cost, int intra)$/;"	f
residual_transform_quant_luma_4x4_sp	src/block.c	/^int residual_transform_quant_luma_4x4_sp(Macroblock *currMB, ColorPlane pl, int block_x,int block_y,int *coeff_cost, int intra)$/;"	f
residual_transform_quant_luma_4x4_sp2	src/block.c	/^int residual_transform_quant_luma_4x4_sp2(Macroblock *currMB, ColorPlane pl, int block_x,int block_y,int *coeff_cost, int intra)$/;"	f
residual_transform_quant_luma_8x8	inc/global.h	/^  int  (*residual_transform_quant_luma_8x8)      (struct macroblock_enc *currMB, ColorPlane pl, int b8, int *coeff_cost, int intra);$/;"	m	struct:macroblock_enc
residual_transform_quant_luma_8x8	src/transform8x8.c	/^int residual_transform_quant_luma_8x8(Macroblock *currMB, ColorPlane pl, int b8, int *coeff_cost, int intra)$/;"	f
residual_transform_quant_luma_8x8_cavlc	src/transform8x8.c	/^int residual_transform_quant_luma_8x8_cavlc(Macroblock *currMB, ColorPlane pl, int b8, int *coeff_cost, int intra)$/;"	f
residual_transform_quant_luma_8x8_ls	src/transform8x8.c	/^int residual_transform_quant_luma_8x8_ls(Macroblock *currMB, ColorPlane pl, int b8, int *coeff_cost, int intra)$/;"	f
restore_coding_info	src/image_mp.c	/^void restore_coding_info(VideoParameters *p_Vid, CodingInfo *coding_info)$/;"	f
restore_nz_coeff	src/rdopt.c	/^void restore_nz_coeff(Macroblock *currMB)$/;"	f
rewrite_paramsets	src/filehandle.c	/^int rewrite_paramsets(VideoParameters *p_Vid)$/;"	f
run_length_minus1	inc/params.h	/^  int *run_length_minus1;                \/\/!< run_length_minus1 is for slice group type being 0$/;"	m	struct:inp_par_enc
sad	inc/global.h	/^  distblk sad;$/;"	m	struct:__anon4
sbdiamond	inc/global.h	/^  struct epzs_struct *sbdiamond;$/;"	m	struct:video_par	typeref:struct:video_par::epzs_struct
scale_mv	inc/me_epzs_common.h	/^static inline void scale_mv(MotionVector *out_mv, int scale, const MotionVector *mv, int shift_mv)$/;"	f
scale_mv_xy	inc/me_epzs_common.h	/^static inline void scale_mv_xy(MotionVector *out_mv, int *scale, const MotionVector *mv, int shift_mv)$/;"	f
scaling_list	inc/q_matrix.h	/^struct scaling_list {$/;"	s
scene_id	inc/sei.h	/^  int scene_id;$/;"	m	struct:__anon14
scene_information_struct	inc/sei.h	/^} scene_information_struct;$/;"	t	typeref:struct:__anon14
scene_transition_type	inc/sei.h	/^  int scene_transition_type;$/;"	m	struct:__anon14
sdiamond	inc/global.h	/^  struct epzs_struct *sdiamond;$/;"	m	struct:video_par	typeref:struct:video_par::epzs_struct
se_linfo	src/vlc.c	/^void se_linfo(int se, int dummy, int *len,int *info)$/;"	f
searchPattern	inc/me_epzs_common.h	/^  EPZSStructure *searchPattern;$/;"	m	struct:epzs_params
searchPatternD	inc/me_epzs_common.h	/^  EPZSStructure *searchPatternD;$/;"	m	struct:epzs_params
searchPoints	inc/me_epzs_common.h	/^  int    searchPoints;$/;"	m	struct:epzs_struct
searchRange	inc/global.h	/^  struct search_window searchRange;$/;"	m	struct:me_block	typeref:struct:me_block::search_window
searchRange	inc/global.h	/^  struct search_window searchRange;$/;"	m	struct:video_par	typeref:struct:video_par::search_window
search_center	inc/me_fullfast.h	/^  MotionVector **search_center; \/\/!< absolute search center for fast full motion search$/;"	m	struct:me_full_fast
search_center_padded	inc/me_fullfast.h	/^  MotionVector **search_center_padded; \/\/!< absolute search center for fast full motion search$/;"	m	struct:me_full_fast
search_point_hp	inc/me_epzs.h	/^static const MotionVector search_point_hp[10] = {{0,0},{-2,0}, {0,2}, {2,0},  {0,-2}, {-2,2},  {2,2},  {2,-2}, {-2,-2}, {-2,2}};$/;"	v
search_point_qp	inc/me_epzs.h	/^static const MotionVector search_point_qp[10] = {{0,0},{-1,0}, {0,1}, {1,0},  {0,-1}, {-1,1},  {1,1},  {1,-1}, {-1,-1}, {-1,1}};$/;"	v
search_pos2	inc/global.h	/^  int              search_pos2;   \/\/ <--  search positions for    half-pel search  (default: 9)$/;"	m	struct:me_block
search_pos4	inc/global.h	/^  int              search_pos4;   \/\/ <--  search positions for quarter-pel search  (default: 9)$/;"	m	struct:me_block
search_range	inc/params.h	/^  int search_range[2];                  \/*!< search range - integer pel search and 16x16 blocks.  The search window is$/;"	m	struct:inp_par_enc
search_rpu_square	inc/global.h	/^  struct epzs_struct *search_rpu_square;$/;"	m	struct:video_par	typeref:struct:video_par::epzs_struct
search_setup_done	inc/me_fullfast.h	/^  int          **search_setup_done;     \/\/!< flag if all block SAD's have been calculated yet$/;"	m	struct:me_full_fast
search_window	inc/global.h	/^struct search_window {$/;"	s
searcharray	inc/me_epzs_common.h	/^  int   searcharray;$/;"	m	struct:epzs_params
sec_view_force_fld	inc/global.h	/^  int sec_view_force_fld;    \/\/!< if view 0 is coded as FLD then force also view to be coded as FLD as well$/;"	m	struct:video_par
second_moment_UV	inc/errdo.h	/^  uint16 ***  second_moment_UV;           \/\/!< for storing the estimated second moment for component Y in rope algorithm$/;"	m	struct:distortion_estimation
second_moment_Y	inc/errdo.h	/^  uint16 **   second_moment_Y;            \/\/!< for storing the estimated second moment for component Y in rope algorithm$/;"	m	struct:distortion_estimation
second_moment_bestY_b8x8	inc/errdo.h	/^  uint16 ***second_moment_bestY_b8x8;$/;"	m	struct:decoders
second_moment_bestY_mb	inc/errdo.h	/^  uint16 **second_moment_bestY_mb;$/;"	m	struct:decoders
second_moment_pred	inc/errdo.h	/^  uint16 **second_moment_pred;$/;"	m	struct:decoders
second_moment_pred_bestY_b8x8	inc/errdo.h	/^  uint16 ***second_moment_pred_bestY_b8x8;$/;"	m	struct:decoders
second_scene_id	inc/sei.h	/^  int second_scene_id;$/;"	m	struct:__anon14
seconds_flag	inc/sei.h	/^  Boolean seconds_flag;$/;"	m	struct:__anon19
seconds_value	inc/sei.h	/^  int seconds_value;$/;"	m	struct:__anon19
seiBufferingPeriod	inc/sei.h	/^  bufferingperiod_information_struct seiBufferingPeriod;$/;"	m	struct:sei_params
seiDRPMRepetition	inc/sei.h	/^  drpm_repetition_information_struct seiDRPMRepetition;$/;"	m	struct:sei_params
seiFramePackingArrangement	inc/sei.h	/^  frame_packing_arrangement_information_struct seiFramePackingArrangement;$/;"	m	struct:sei_params
seiHasBufferingPeriod_info	inc/sei.h	/^  Boolean seiHasBufferingPeriod_info;$/;"	m	struct:sei_params
seiHasClock_timestamp	inc/sei.h	/^  Boolean seiHasClock_timestamp;$/;"	m	struct:sei_params
seiHasDRPMRepetition_info	inc/sei.h	/^  Boolean seiHasDRPMRepetition_info;$/;"	m	struct:sei_params
seiHasFiller_payload	inc/sei.h	/^  Boolean seiHasFiller_payload;$/;"	m	struct:sei_params
seiHasFramePackingArrangement_info	inc/sei.h	/^  Boolean seiHasFramePackingArrangement_info;$/;"	m	struct:sei_params
seiHasHrd_picture	inc/sei.h	/^  Boolean seiHasHrd_picture;$/;"	m	struct:sei_params
seiHasPanScanRectInfo	inc/sei.h	/^  Boolean seiHasPanScanRectInfo;$/;"	m	struct:sei_params
seiHasPanscan_rect	inc/sei.h	/^  Boolean seiHasPanscan_rect;$/;"	m	struct:sei_params
seiHasPicTiming_info	inc/sei.h	/^  Boolean seiHasPicTiming_info;$/;"	m	struct:sei_params
seiHasPostFilterHints_info	inc/sei.h	/^  Boolean seiHasPostFilterHints_info;$/;"	m	struct:sei_params
seiHasRecoveryPoint_info	inc/sei.h	/^  Boolean seiHasRecoveryPoint_info;$/;"	m	struct:sei_params
seiHasRef_pic_buffer_management_repetition	inc/sei.h	/^  Boolean seiHasRef_pic_buffer_management_repetition;$/;"	m	struct:sei_params
seiHasSceneInformation	inc/sei.h	/^  Boolean seiHasSceneInformation;$/;"	m	struct:sei_params
seiHasSparePicture	inc/sei.h	/^  Boolean seiHasSparePicture;$/;"	m	struct:sei_params
seiHasSpare_picture	inc/sei.h	/^  Boolean seiHasSpare_picture;$/;"	m	struct:sei_params
seiHasSubseqChar	inc/sei.h	/^  Boolean seiHasSubseqChar;$/;"	m	struct:sei_params
seiHasSubseqInfo	inc/sei.h	/^  Boolean seiHasSubseqInfo;$/;"	m	struct:sei_params
seiHasSubseqLayerInfo	inc/sei.h	/^  Boolean seiHasSubseqLayerInfo;$/;"	m	struct:sei_params
seiHasSubseq_characteristics	inc/sei.h	/^  Boolean seiHasSubseq_characteristics;$/;"	m	struct:sei_params
seiHasSubseq_information	inc/sei.h	/^  Boolean seiHasSubseq_information;$/;"	m	struct:sei_params
seiHasSubseq_layer_characteristics	inc/sei.h	/^  Boolean seiHasSubseq_layer_characteristics;$/;"	m	struct:sei_params
seiHasTemporal_reference	inc/sei.h	/^  Boolean seiHasTemporal_reference;$/;"	m	struct:sei_params
seiHasTone_mapping	inc/sei.h	/^  Boolean seiHasTone_mapping;$/;"	m	struct:sei_params
seiHasUser_data_registered_itu_t_t35	inc/sei.h	/^  Boolean seiHasUser_data_registered_itu_t_t35;$/;"	m	struct:sei_params
seiHasUser_data_registered_itu_t_t35_info	inc/sei.h	/^  Boolean seiHasUser_data_registered_itu_t_t35_info;$/;"	m	struct:sei_params
seiHasUser_data_unregistered	inc/sei.h	/^  Boolean seiHasUser_data_unregistered;$/;"	m	struct:sei_params
seiHasUser_data_unregistered_info	inc/sei.h	/^  Boolean seiHasUser_data_unregistered_info;$/;"	m	struct:sei_params
seiPanScanRectInfo	inc/sei.h	/^  panscanrect_information_struct seiPanScanRectInfo;$/;"	m	struct:sei_params
seiPicTiming	inc/sei.h	/^  pictiming_information_struct seiPicTiming;$/;"	m	struct:sei_params
seiPostFilterHints	inc/sei.h	/^  post_filter_information_struct seiPostFilterHints;$/;"	m	struct:sei_params
seiRecoveryPoint	inc/sei.h	/^  recovery_point_information_struct seiRecoveryPoint;$/;"	m	struct:sei_params
seiSceneInformation	inc/sei.h	/^  scene_information_struct seiSceneInformation;$/;"	m	struct:sei_params
seiSparePicturePayload	inc/sei.h	/^  spare_picture_struct seiSparePicturePayload;$/;"	m	struct:sei_params
seiSubseqChar	inc/sei.h	/^  subseq_char_information_struct seiSubseqChar;$/;"	m	struct:sei_params
seiSubseqInfo	inc/sei.h	/^  subseq_information_struct seiSubseqInfo[MAX_LAYER_NUMBER];$/;"	m	struct:sei_params
seiSubseqLayerInfo	inc/sei.h	/^  subseq_layer_information_struct seiSubseqLayerInfo;$/;"	m	struct:sei_params
seiToneMapping	inc/sei.h	/^  ToneMappingSEI seiToneMapping;$/;"	m	struct:sei_params
seiUser_data_registered_itu_t_t35	inc/sei.h	/^  user_data_registered_itu_t_t35_information_struct seiUser_data_registered_itu_t_t35;$/;"	m	struct:sei_params
seiUser_data_unregistered	inc/sei.h	/^  user_data_unregistered_information_struct seiUser_data_unregistered;$/;"	m	struct:sei_params
sei_bit_depth	inc/sei.h	/^  unsigned char sei_bit_depth;$/;"	m	struct:__anon23
sei_message	inc/sei.h	/^  sei_struct sei_message[2];$/;"	m	struct:sei_params
sei_params	inc/sei.h	/^struct sei_params {$/;"	s
sei_pivot_value	inc/sei.h	/^  int sei_pivot_value[MAX_NUM_PIVOTS];$/;"	m	struct:__anon23
sei_struct	inc/sei.h	/^} sei_struct;$/;"	t	typeref:struct:__anon9
select_distortion	src/me_distortion.c	/^void select_distortion(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
select_img	src/img_distortion.c	/^void select_img(VideoParameters *p_Vid, ImageStructure *imgSRC, ImageStructure *imgREF, ImageData *imgData)$/;"	f
select_plane	src/image.c	/^void select_plane(VideoParameters *p_Vid, ColorPlane color_plane)$/;"	f
select_transform	src/block.c	/^void select_transform(Macroblock *currMB)$/;"	f
separate_colour_plane_flag	inc/params.h	/^  int separate_colour_plane_flag;$/;"	m	struct:inp_par_enc
seq	inc/rtp.h	/^  unsigned int seq;        \/*!< RTP sequence number, incremented by one for$/;"	m	struct:__anon24
seq_number	inc/explicit_seq.h	/^  int seq_number;$/;"	m	struct:__anon26
seq_parameter_set_id	inc/sei.h	/^  int seq_parameter_set_id;$/;"	m	struct:__anon8
seq_struct	inc/pred_struct_types.h	/^typedef struct seq_struct$/;"	s
set_MB_parameters	src/macroblock.c	/^void set_MB_parameters (Slice *currSlice, Macroblock *currMB)$/;"	f
set_access_method	src/mv_search.c	/^void set_access_method(int *access_method, MotionVector *blk, int min_x, int min_y, int max_x, int max_y)$/;"	f
set_block8x8_info	src/rdopt.c	/^void set_block8x8_info(Block8x8Info *b8x8info, int mode, int block,  Info8x8 *best)$/;"	f
set_chroma_pred_mode	src/md_common.c	/^void set_chroma_pred_mode(Macroblock *currMB, RD_PARAMS enc_mb, int *mb_available, char chroma_pred_mode_range[2])$/;"	f
set_chroma_qp	src/macroblock.c	/^static void set_chroma_qp(Macroblock* currMB)$/;"	f	file:
set_coeff_and_recon_8x8	inc/global.h	/^  void (*set_coeff_and_recon_8x8      )         (Macroblock *currMB);$/;"	m	struct:slice
set_coeff_and_recon_8x8_b_slice	src/rdopt.c	/^void set_coeff_and_recon_8x8_b_slice (Macroblock* currMB)$/;"	f
set_coeff_and_recon_8x8_p_slice	src/rdopt.c	/^void set_coeff_and_recon_8x8_p_slice (Macroblock* currMB)$/;"	f
set_default_quant4x4	src/q_matrix.c	/^static void set_default_quant4x4(LevelQuantParams **q_params_4x4,  const int (*quant)[4], const int (*dequant)[4])$/;"	f	file:
set_default_ref_pic_lists	src/list_reorder.c	/^void set_default_ref_pic_lists(Slice *currSlice)$/;"	f
set_direct_references	src/mv_direct.c	/^static inline void set_direct_references(const PixelPos *mb, char *l0_rFrame, char *l1_rFrame, PicMotionParams **mv_info)$/;"	f	file:
set_direct_references_mb_field	src/mv_direct.c	/^static void set_direct_references_mb_field(const PixelPos *mb, char *l0_rFrame, char *l1_rFrame, PicMotionParams **mv_info, Macroblock *mb_data)$/;"	f	file:
set_direct_references_mb_frame	src/mv_direct.c	/^static void set_direct_references_mb_frame(const PixelPos *mb, char *l0_rFrame, char *l1_rFrame, PicMotionParams **mv_info, Macroblock *mb_data)$/;"	f	file:
set_dpb_layer_id	src/lencod.c	/^void set_dpb_layer_id(VideoParameters *p_Vid, int idx)$/;"	f
set_integer_mv	src/me_epzs.c	/^static inline void set_integer_mv(MotionVector *mv) $/;"	f	file:
set_intrapred_16x16	inc/global.h	/^  void    (*set_intrapred_16x16)                (Macroblock *currMB, ColorPlane pl, int *left_available, int *up_available, int *all_available);$/;"	m	struct:slice
set_intrapred_16x16	src/intra16x16.c	/^void set_intrapred_16x16(Macroblock *currMB, ColorPlane pl, int *left_available, int *up_available, int *all_available)$/;"	f
set_intrapred_16x16_mbaff	src/intra16x16.c	/^void set_intrapred_16x16_mbaff(Macroblock *currMB, ColorPlane pl, int *left_available, int *up_available, int *all_available)$/;"	f
set_intrapred_4x4	inc/global.h	/^  void    (*set_intrapred_4x4)                  (Macroblock *currMB, ColorPlane pl, int img_x,int img_y, int *left_available, int *up_available, int *all_available);$/;"	m	struct:slice
set_intrapred_4x4	src/intra4x4.c	/^void set_intrapred_4x4(Macroblock *currMB, ColorPlane pl, int img_x,int img_y, int *left_available, int *up_available, int *all_available)$/;"	f
set_intrapred_4x4_mbaff	src/intra4x4.c	/^void set_intrapred_4x4_mbaff(Macroblock *currMB, ColorPlane pl, int img_x,int img_y, int *left_available, int *up_available, int *all_available)$/;"	f
set_intrapred_8x8	inc/global.h	/^  void    (*set_intrapred_8x8)                  (Macroblock *currMB, ColorPlane pl, int img_x,int img_y, int *left_available, int *up_available, int *all_available);$/;"	m	struct:slice
set_intrapred_8x8	src/intra8x8.c	/^void set_intrapred_8x8(Macroblock *currMB, ColorPlane pl, int img_x,int img_y, int *left_available, int *up_available, int *all_available)$/;"	f
set_intrapred_8x8_mbaff	src/intra8x8.c	/^void set_intrapred_8x8_mbaff(Macroblock *currMB, ColorPlane pl, int img_x,int img_y, int *left_available, int *up_available, int *all_available)$/;"	f
set_intrapred_chroma	src/intra_chroma.c	/^void set_intrapred_chroma(Macroblock *currMB, int *left_available, int *up_available, int *all_available)$/;"	f
set_intrapred_chroma_mbaff	src/intra_chroma.c	/^void set_intrapred_chroma_mbaff(Macroblock *currMB, ColorPlane pl, int *left_available, int *up_available, int *all_available)$/;"	f
set_jm_vui_params	src/configfile.c	/^static void set_jm_vui_params( InputParameters *p_Inp )$/;"	f	file:
set_lagrangian_multipliers	inc/global.h	/^  void    (*set_lagrangian_multipliers)         (struct slice *currSlice);  $/;"	m	struct:slice
set_level_indices	src/lencod.c	/^static void set_level_indices(VideoParameters *p_Vid)$/;"	f	file:
set_loop_filter_functions_mbaff	src/loop_filter_mbaff.c	/^void set_loop_filter_functions_mbaff(VideoParameters *p_Vid)$/;"	f
set_loop_filter_functions_normal	src/loop_filter_normal.c	/^void set_loop_filter_functions_normal(VideoParameters *p_Vid)$/;"	f
set_mbaff_parameters	src/rdopt.c	/^void set_mbaff_parameters(Macroblock  *currMB)$/;"	f
set_me_parameters	src/mv_search.c	/^static inline void set_me_parameters( PicMotionParams **motion, const MotionVector *all_mv, int list, char ref, int step_h, int step_v, int pic_block_y, int pic_block_x)$/;"	f	file:
set_modes_and_reframe	inc/global.h	/^  void (*set_modes_and_reframe)    (Macroblock *currMB, int b8, short* p_dir, int list_mode[2], char *list_ref_idx);$/;"	m	struct:slice
set_modes_and_reframe	src/macroblock.c	/^void set_modes_and_reframe (Macroblock* currMB, int b8, short* p_dir, int list_mode[2], char *list_ref_idx)$/;"	f
set_modes_and_reframe_b_slice	src/macroblock.c	/^void set_modes_and_reframe_b_slice (Macroblock* currMB, int b8, short* p_dir, int list_mode[2], char *list_ref_idx)$/;"	f
set_modes_and_reframe_i_slice	src/macroblock.c	/^void set_modes_and_reframe_i_slice (Macroblock* currMB, int b8, short* p_dir, int list_mode[2], char *list_ref_idx)$/;"	f
set_modes_and_reframe_p_slice	src/macroblock.c	/^void set_modes_and_reframe_p_slice (Macroblock* currMB, int b8, short* p_dir, int list_mode[2], char *list_ref_idx)$/;"	f
set_modes_and_refs_for_blocks	inc/global.h	/^  void (*set_modes_and_refs_for_blocks)         (Macroblock *currMB, short mode);$/;"	m	struct:slice
set_modes_and_refs_for_blocks_b_slice	src/rdopt.c	/^void set_modes_and_refs_for_blocks_b_slice(Macroblock *currMB, short mode)$/;"	f
set_modes_and_refs_for_blocks_i_slice	src/rdopt.c	/^void set_modes_and_refs_for_blocks_i_slice(Macroblock *currMB, short mode)$/;"	f
set_modes_and_refs_for_blocks_p_slice	src/rdopt.c	/^void set_modes_and_refs_for_blocks_p_slice(Macroblock *currMB, short mode)$/;"	f
set_motion_vectors_mb	inc/global.h	/^  void    (*set_motion_vectors_mb)              (Macroblock *currMB);$/;"	m	struct:slice
set_pic_bin_count	src/biariencode.c	/^void set_pic_bin_count(VideoParameters *p_Vid, EncodingEnvironmentPtr eep)$/;"	f
set_rdoq_lambda	src/lambda.c	/^void set_rdoq_lambda( Slice *currSlice )$/;"	f
set_redundant_frame	src/lencod.c	/^void set_redundant_frame(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
set_ref_and_motion_vectors	inc/global.h	/^  void    (*set_ref_and_motion_vectors)         (Macroblock *currMB, struct pic_motion_params **motion, Info8x8 *part, int block);$/;"	m	struct:slice
set_ref_and_motion_vectors_B_slice	src/rdopt.c	/^static void set_ref_and_motion_vectors_B_slice (Macroblock *currMB, PicMotionParams **motion, Info8x8 *part, int block)$/;"	f	file:
set_ref_and_motion_vectors_P_slice	src/rdopt.c	/^void set_ref_and_motion_vectors_P_slice (Macroblock *currMB, PicMotionParams **motion, Info8x8 *part, int block)$/;"	f
set_slice	src/slice.c	/^void set_slice (VideoParameters *p_Vid, Slice *currSlice)$/;"	f
set_slice_type	src/image.c	/^void set_slice_type(VideoParameters *p_Vid, InputParameters *p_Inp, int slice_type)$/;"	f
set_storage_format	src/lencod.c	/^static void set_storage_format(VideoParameters *p_Vid, FrameFormat *p_src, FrameFormat *p_dst)$/;"	f	file:
set_stored_macroblock_parameters	src/rdopt.c	/^static void set_stored_macroblock_parameters (Macroblock *currMB)$/;"	f	file:
set_stored_macroblock_parameters_mpass	src/rdopt.c	/^static void set_stored_macroblock_parameters_mpass (Macroblock *currMB)$/;"	f	file:
set_stored_macroblock_parameters_sp	src/rdopt.c	/^static void set_stored_macroblock_parameters_sp (Macroblock *currMB)$/;"	f	file:
set_stored_mb_parameters	inc/global.h	/^  void    (*set_stored_mb_parameters)           (Macroblock *currMB);$/;"	m	struct:slice
set_subblock8x8_info	src/rdopt.c	/^void set_subblock8x8_info(Block8x8Info *b8x8info,int mode, int block, RD_8x8DATA *tr)$/;"	f
setupDistCost	src/rdopt.c	/^void setupDistCost(Slice *currSlice, InputParameters *p_Inp)$/;"	f
setupDistortion	src/md_distortion.c	/^void setupDistortion(Slice *currSlice)$/;"	f
setup_cabac	src/slice.c	/^static void setup_cabac(Slice *currSlice, char *listXsize)$/;"	f	file:
setup_cavlc	src/slice.c	/^static void setup_cavlc(Slice *currSlice, char *listXsize)$/;"	f	file:
setup_coding_layer	src/lencod.c	/^void setup_coding_layer(VideoParameters *p_Vid)$/;"	f
setup_dpb_layer	src/lencod.c	/^void setup_dpb_layer(DecodedPictureBuffer *p_Dpb, VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
setup_fast_full_search	src/me_fullfast.c	/^void setup_fast_full_search (Macroblock *currMB, MEBlock *mv_block, int list)  \/\/ <--  reference frame parameter, list0 or 1$/;"	f
setup_mbs	src/macroblock.c	/^void setup_mbs(Macroblock *pMBs, int mb_num, int layer_id)$/;"	f
setup_open_gop_lists	src/slice.c	/^void setup_open_gop_lists(VideoParameters *p_Vid, Slice *currSlice)$/;"	f
setup_slice	src/slice.c	/^static void setup_slice(Slice *currSlice)$/;"	f	file:
shift_cr_x	inc/global.h	/^  int shift_cr_x, shift_cr_y;$/;"	m	struct:video_par
shift_cr_x	inc/global.h	/^  int shift_cr_x;$/;"	m	struct:coding_par
shift_cr_x2	inc/global.h	/^  int shift_cr_x2;$/;"	m	struct:video_par
shift_cr_y	inc/global.h	/^  int shift_cr_x, shift_cr_y;$/;"	m	struct:video_par
shift_cr_y	inc/global.h	/^  int shift_cr_y;$/;"	m	struct:coding_par
si_frame_indicator	inc/global.h	/^  Boolean si_frame_indicator;$/;"	m	struct:slice
si_frame_indicator	inc/params.h	/^  int si_frame_indicator;               \/\/!< Flag indicating whether SI frames should be encoded rather than SP frames (0: not used, 1: used)$/;"	m	struct:inp_par_enc
sigmoid_midpoint	inc/sei.h	/^  int  sigmoid_midpoint;$/;"	m	struct:__anon23
sigmoid_width	inc/sei.h	/^  int  sigmoid_width;$/;"	m	struct:__anon23
sign	inc/rdoq.h	/^  int sign;$/;"	m	struct:level_data_struct
significantBits	inc/rdoq.h	/^  int  significantBits[16][2];$/;"	m	struct:est_bits_cabac
size	inc/global.h	/^  int size;                    \/\/!< Luma Picture size in pels$/;"	m	struct:coding_par
size	inc/global.h	/^  int size;                    \/\/!< Luma Picture size in pels$/;"	m	struct:video_par
size	inc/mbuffer.h	/^  unsigned      size;$/;"	m	struct:decoded_picture_buffer
size_cr	inc/global.h	/^  int size_cr;                 \/\/!< Chroma Picture size in pels$/;"	m	struct:coding_par
size_cr	inc/global.h	/^  int size_cr;                 \/\/!< Chroma Picture size in pels$/;"	m	struct:video_par
size_x	inc/mbuffer.h	/^  int         size_x, size_y, size_x_cr, size_y_cr;$/;"	m	struct:storable_picture
size_x	inc/me_epzs_common.h	/^  int size_x, size_y;$/;"	m	struct:__anon28
size_x_cr	inc/mbuffer.h	/^  int         size_x, size_y, size_x_cr, size_y_cr;$/;"	m	struct:storable_picture
size_x_cr_pad	inc/mbuffer.h	/^  int         size_x_cr_pad, size_y_cr_pad;$/;"	m	struct:storable_picture
size_x_pad	inc/mbuffer.h	/^  int         size_x_pad, size_y_pad;$/;"	m	struct:storable_picture
size_x_padded	inc/mbuffer.h	/^  int         size_x_padded, size_y_padded;$/;"	m	struct:storable_picture
size_y	inc/mbuffer.h	/^  int         size_x, size_y, size_x_cr, size_y_cr;$/;"	m	struct:storable_picture
size_y	inc/me_epzs_common.h	/^  int size_x, size_y;$/;"	m	struct:__anon28
size_y_cr	inc/mbuffer.h	/^  int         size_x, size_y, size_x_cr, size_y_cr;$/;"	m	struct:storable_picture
size_y_cr_pad	inc/mbuffer.h	/^  int         size_x_cr_pad, size_y_cr_pad;$/;"	m	struct:storable_picture
size_y_pad	inc/mbuffer.h	/^  int         size_x_pad, size_y_pad;$/;"	m	struct:storable_picture
size_y_padded	inc/mbuffer.h	/^  int         size_x_padded, size_y_padded;$/;"	m	struct:storable_picture
skip_flag	inc/global.h	/^  int                 skip_flag;$/;"	m	struct:macroblock_enc
skip_gl_stats	inc/params.h	/^  int skip_gl_stats; $/;"	m	struct:inp_par_enc
slice	inc/global.h	/^typedef struct slice$/;"	s
slice_argument	inc/params.h	/^  int slice_argument;                   \/\/!< Argument to the specified slice algorithm$/;"	m	struct:inp_par_enc
slice_group_change_cycle	inc/global.h	/^  int slice_group_change_cycle;$/;"	m	struct:video_par
slice_group_change_cycle	inc/params.h	/^  int slice_group_change_cycle;$/;"	m	struct:inp_par_enc
slice_group_change_direction_flag	inc/params.h	/^  int slice_group_change_direction_flag;$/;"	m	struct:inp_par_enc
slice_group_change_rate_minus1	inc/params.h	/^  int slice_group_change_rate_minus1;$/;"	m	struct:inp_par_enc
slice_group_id	inc/params.h	/^  byte *slice_group_id;                   \/\/!< slice_group_id is for slice group type being 6$/;"	m	struct:inp_par_enc
slice_group_map_type	inc/params.h	/^  int slice_group_map_type;$/;"	m	struct:inp_par_enc
slice_mode	inc/params.h	/^  int slice_mode;                       \/\/!< Indicate what algorithm to use for setting slices$/;"	m	struct:inp_par_enc
slice_nr	inc/global.h	/^  short               slice_nr;                   \/\/!< current MB slice id$/;"	m	struct:macroblock_enc
slice_nr	inc/global.h	/^  short               slice_nr;$/;"	m	struct:slice
slice_qp_off	inc/global.h	/^  int slice_qp_off;       \/\/! Assigned QP offset$/;"	m	struct:__anon5
slice_qp_off	inc/pred_struct_types.h	/^  int slice_qp_off;$/;"	m	struct:pred_struct_frm
slice_struct	inc/pred_struct_types.h	/^typedef struct slice_struct$/;"	s
slice_too_big	inc/global.h	/^  Boolean (*slice_too_big)                      (int bits_slice); \/\/!< for use of callback functions$/;"	m	struct:slice
slice_too_big	src/macroblock.c	/^int slice_too_big(Slice *currSlice, int rlc_bits)$/;"	f
slice_type	inc/explicit_seq.h	/^  int slice_type;$/;"	m	struct:__anon26
slice_type	inc/global.h	/^  int slice_type;         \/\/! Slice type$/;"	m	struct:__anon5
slice_type	inc/global.h	/^  short               slice_type;   \/\/!< picture type$/;"	m	struct:slice
slice_type	inc/pred_struct_types.h	/^  int slice_type;$/;"	m	struct:pred_struct_frm
slices	inc/global.h	/^  struct slice *slices[MAXSLICEPERPICTURE];$/;"	m	struct:picture	typeref:struct:picture::slice
sliding_window_memory_management	src/mbuffer.c	/^static void sliding_window_memory_management(DecodedPictureBuffer *p_Dpb, StorablePicture* p)$/;"	f	file:
smb_p8x8_cost	inc/global.h	/^  distblk  smb_p8x8_cost[4];  $/;"	m	struct:rd_8x8_data
smb_p8x8_rdcost	inc/global.h	/^  distblk  smb_p8x8_rdcost[4];$/;"	m	struct:rd_8x8_data
smpUMHEXBipredIntegerPelBlockMotionSearch	src/me_umhexsmp.c	/^smpUMHEXBipredIntegerPelBlockMotionSearch (Macroblock *currMB,      \/\/ <--  current Macroblock$/;"	f
smpUMHEXFullSubPelBlockMotionSearch	src/me_umhexsmp.c	/^smpUMHEXFullSubPelBlockMotionSearch (Macroblock *currMB,      \/\/ <--  current Macroblock$/;"	f
smpUMHEXIntegerPelBlockMotionSearch	src/me_umhexsmp.c	/^smpUMHEXIntegerPelBlockMotionSearch (Macroblock *currMB,      \/\/ <--  current Macroblock$/;"	f
smpUMHEXSubPelBlockME	src/me_umhexsmp.c	/^smpUMHEXSubPelBlockME (Macroblock *currMB,       \/\/ <--  current Macroblock$/;"	f
smpUMHEXSubPelBlockMotionSearch	src/me_umhexsmp.c	/^smpUMHEXSubPelBlockMotionSearch  ($/;"	f
smpUMHEX_decide_intrabk_SAD	src/me_umhexsmp.c	/^void smpUMHEX_decide_intrabk_SAD(Macroblock *currMB)$/;"	f
smpUMHEX_free_mem	src/me_umhexsmp.c	/^void smpUMHEX_free_mem(VideoParameters *p_Vid)$/;"	f
smpUMHEX_get_mem	src/me_umhexsmp.c	/^int smpUMHEX_get_mem(VideoParameters *p_Vid)$/;"	f
smpUMHEX_init	src/me_umhexsmp.c	/^void smpUMHEX_init(VideoParameters *p_Vid)$/;"	f
smpUMHEX_setup	src/me_umhexsmp.c	/^void smpUMHEX_setup(Macroblock *currMB,$/;"	f
smpUMHEX_skip_intrabk_SAD	src/me_umhexsmp.c	/^void smpUMHEX_skip_intrabk_SAD(Macroblock *currMB)$/;"	f
source	inc/params.h	/^  FrameFormat source;                   \/\/!< source related information$/;"	m	struct:inp_par_enc
sp2_frame_indicator	inc/global.h	/^  Boolean sp2_frame_indicator;$/;"	m	struct:slice
sp2_frame_indicator	inc/global.h	/^  Boolean sp2_frame_indicator;$/;"	m	struct:video_par
sp2_frame_indicator	inc/params.h	/^  int sp2_frame_indicator;              \/\/!< Flag indicating whether switching SP frames should be encoded rather than SP frames (0: not used, 1: used)$/;"	m	struct:inp_par_enc
sp2_input_filename1	inc/params.h	/^  char sp2_input_filename1[FILE_NAME_SIZE];   \/\/!<Filename of coefficients of the first bitstream when encoding SP frames to switch bitstreams$/;"	m	struct:inp_par_enc
sp2_input_filename2	inc/params.h	/^  char sp2_input_filename2[FILE_NAME_SIZE];   \/\/!<Filenames of coefficients of the second bitstream when encoding SP frames to switch bitstreams$/;"	m	struct:inp_par_enc
sp_output_filename	inc/params.h	/^  char sp_output_filename[FILE_NAME_SIZE];    \/\/!<Filename where SP coefficients are output$/;"	m	struct:inp_par_enc
sp_output_indicator	inc/params.h	/^  int sp_output_indicator;              \/\/!< Flag indicating whether coefficients are output to allow future encoding of switchin SP frames (0: not used, 1: used)$/;"	m	struct:inp_par_enc
sp_periodicity	inc/params.h	/^  int sp_periodicity;                   \/\/!< The periodicity of SP-pictures$/;"	m	struct:inp_par_enc
sp_switch_period	inc/params.h	/^  int sp_switch_period;                 \/\/!< Switch period (in terms of switching SP\/SI frames) between bitstream 1 and bitstream 2$/;"	m	struct:inp_par_enc
spare_picture_struct	inc/sei.h	/^} spare_picture_struct;$/;"	t	typeref:struct:__anon10
spatial_flipping_flag	inc/sei.h	/^  Boolean       spatial_flipping_flag;$/;"	m	struct:__anon21
spiral_hpel_search	inc/global.h	/^  MotionVector* spiral_hpel_search;$/;"	m	struct:video_par
spiral_qpel_search	inc/global.h	/^  MotionVector* spiral_qpel_search;$/;"	m	struct:video_par
spiral_search	inc/global.h	/^  MotionVector* spiral_search;$/;"	m	struct:video_par
sps	inc/global.h	/^  seq_parameter_set_rbsp_t *sps[MAX_NUM_DPB_LAYERS];$/;"	m	struct:video_par
square	inc/global.h	/^  struct epzs_struct *square;$/;"	m	struct:video_par	typeref:struct:video_par::epzs_struct
src_BitDepthRescale	inc/params.h	/^  int src_BitDepthRescale;              \/\/!< Control if input sequence bitdepth should be adjusted$/;"	m	struct:inp_par_enc
src_resize	inc/params.h	/^  int src_resize;                       \/\/!< Control if input sequence will be resized (currently only cropping is supported)$/;"	m	struct:inp_par_enc
ssim_value	inc/global.h	/^  float ssim_value[3];$/;"	m	struct:prev_coding_stats
ssrc	inc/rtp.h	/^  unsigned int ssrc;       \/\/!< Synchronization Source, chosen randomly$/;"	m	struct:__anon24
start_frame	inc/params.h	/^  int start_frame;                      \/\/!< Encode sequence starting from Frame start_frame$/;"	m	struct:inp_par_enc
start_macroblock	src/macroblock.c	/^void start_macroblock(Slice *currSlice, Macroblock **currMB, int mb_addr, Boolean mb_field)$/;"	f
start_mb_nr	inc/global.h	/^  int                 start_mb_nr;$/;"	m	struct:slice
start_me_refinement_hp	inc/global.h	/^  short start_me_refinement_hp; \/\/!< if set then recheck the center position when doing half-pel motion refinement$/;"	m	struct:video_par
start_me_refinement_qp	inc/global.h	/^  short start_me_refinement_qp; \/\/!< if set then recheck the center position when doing quarter-pel motion refinement$/;"	m	struct:video_par
start_nmbr	inc/me_epzs_common.h	/^  int start_nmbr;$/;"	m	struct:__anon29
start_of_coded_interval	inc/sei.h	/^  int start_of_coded_interval[1<<MAX_SEI_BIT_DEPTH];$/;"	m	struct:__anon23
start_sequence	src/filehandle.c	/^int start_sequence(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
start_slice	src/slice.c	/^static int start_slice(Slice *currSlice, StatParameters *cur_stats)$/;"	f	file:
state	inc/global.h	/^  byte state; \/\/uint16 state;         \/\/ index into state-table CP$/;"	m	struct:bi_context_type
stats	inc/mbuffer.h	/^  StatParameters stats;$/;"	m	struct:storable_picture
stdRange	inc/params.h	/^  int stdRange;                         \/\/!< 1 - standard range, 0 - full range$/;"	m	struct:inp_par_enc
stopSearch	inc/me_epzs_common.h	/^  int    stopSearch;$/;"	m	struct:epzs_struct
storable_picture	inc/mbuffer.h	/^typedef struct storable_picture$/;"	s
storage_format	inc/mbuffer.h	/^  FrameFormat   storage_format;$/;"	m	struct:decoded_picture_buffer
storeRedundantFrame	src/image.c	/^static void storeRedundantFrame(VideoParameters *p_Vid)$/;"	f	file:
store_8x8_motion_vectors	inc/global.h	/^  void (*store_8x8_motion_vectors) (struct slice *currSlice, int dir, int block8x8, Info8x8 *B8x8Info);$/;"	m	struct:slice
store_8x8_motion_vectors_b_slice	src/rdopt.c	/^void store_8x8_motion_vectors_b_slice(Slice *currSlice, int dir, int block8x8, Info8x8 *B8x8Info)$/;"	f
store_8x8_motion_vectors_p_slice	src/rdopt.c	/^void store_8x8_motion_vectors_p_slice(Slice *currSlice, int dir, int block8x8, Info8x8 *B8x8Info)$/;"	f
store_adaptive_rounding_16x16	src/q_around.c	/^void store_adaptive_rounding_16x16 (VideoParameters *p_Vid, int****ARCofAdj, int mode)$/;"	f
store_adaptive_rounding_4x4	src/q_around.c	/^void store_adaptive_rounding_4x4 (VideoParameters *p_Vid, int****ARCofAdj, int mode, int block_y, int block_x)$/;"	f
store_coded_picture	src/image.c	/^void store_coded_picture(DecodedPictureBuffer *p_Dpb)$/;"	f
store_coding_and_rc_info	src/image_mp.c	/^void store_coding_and_rc_info(VideoParameters *p_Vid, CodingInfo *coding_info)$/;"	f
store_coding_info	src/image_mp.c	/^void store_coding_info(VideoParameters *p_Vid, CodingInfo *coding_info)$/;"	f
store_coding_state	inc/global.h	/^  void (*store_coding_state) (Macroblock *currMB, struct coding_state *);$/;"	m	struct:slice
store_coding_state_cabac	src/rdopt_coding_state.c	/^static void store_coding_state_cabac (Macroblock *currMB, CSobj *cs)$/;"	f	file:
store_coding_state_cavlc	src/rdopt_coding_state.c	/^void store_coding_state_cavlc (Macroblock *currMB, CSobj *cs)$/;"	f
store_coding_state_nordo	src/rdopt_coding_state.c	/^static void store_coding_state_nordo (Macroblock *currMB, CSobj *cs)$/;"	f	file:
store_contexts	src/context_ini.c	/^void store_contexts (Slice *currSlice)$/;"	f
store_macroblock_parameters	src/rdopt.c	/^void store_macroblock_parameters (Macroblock *currMB, int mode)$/;"	f
store_picture_in_dpb	src/mbuffer.c	/^void store_picture_in_dpb(DecodedPictureBuffer *p_Dpb, StorablePicture* p, FrameFormat *output)$/;"	f
store_proc_picture_in_dpb	src/mbuffer.c	/^void store_proc_picture_in_dpb(DecodedPictureBuffer *p_Dpb, StorablePicture* p, FrameFormat *output)$/;"	f
stored_bits_to_go	inc/global.h	/^  int     stored_bits_to_go;  \/\/!< storage for bitcounter$/;"	m	struct:bit_stream_enc
stored_byte_buf	inc/global.h	/^  byte    stored_byte_buf;    \/\/!< storage for buffer of last written byte$/;"	m	struct:bit_stream_enc
stored_byte_pos	inc/global.h	/^  int     stored_byte_pos;    \/\/!< storage for position in bitstream;$/;"	m	struct:bit_stream_enc
stored_frame_cnt	inc/sei.h	/^  unsigned int stored_frame_cnt;$/;"	m	struct:__anon11
streamBuffer	inc/global.h	/^  byte    *streamBuffer;      \/\/!< actual buffer for written bytes$/;"	m	struct:bit_stream_enc
structure	inc/global.h	/^  PictureStructure    structure;$/;"	m	struct:slice
structure	inc/global.h	/^  PictureStructure structure;  \/\/!< picture structure$/;"	m	struct:video_par
structure	inc/mbuffer.h	/^  PictureStructure structure;$/;"	m	struct:storable_picture
subMBCodingState	inc/params.h	/^  int subMBCodingState;$/;"	m	struct:inp_par_enc
subPacketType	inc/sei.h	/^  unsigned char subPacketType;$/;"	m	struct:__anon9
sub_pel_bipred_motion_estimation	src/me_fullsearch.c	/^sub_pel_bipred_motion_estimation (Macroblock   *currMB,    \/\/ <--  current Macroblock$/;"	f
sub_pel_motion_estimation	src/me_fullsearch.c	/^sub_pel_motion_estimation (Macroblock   *currMB,      \/\/ <--  Current Macroblock$/;"	f
subblk_offset_x	inc/block.h	/^static const unsigned char subblk_offset_x[3][8][4] =$/;"	v
subblk_offset_y	inc/block.h	/^static const unsigned char subblk_offset_y[3][8][4] =$/;"	v
subblock_x	inc/global.h	/^  short               subblock_x;                 \/\/!< current subblock horizontal$/;"	m	struct:macroblock_enc
subblock_y	inc/global.h	/^  short               subblock_y;                 \/\/!< current subblock vertical$/;"	m	struct:macroblock_enc
submacroblock_mode_decision	inc/global.h	/^  void    (*submacroblock_mode_decision)        (Macroblock *currMB, RD_PARAMS *, RD_8x8DATA *, int ****, int, distblk *);$/;"	m	struct:slice
submacroblock_mode_decision_b_slice	src/mode_decision_P8x8.c	/^void submacroblock_mode_decision_b_slice(Macroblock *currMB,$/;"	f
submacroblock_mode_decision_low	src/mode_decision_P8x8.c	/^void submacroblock_mode_decision_low(Macroblock *currMB,$/;"	f
submacroblock_mode_decision_p_slice	src/mode_decision_P8x8.c	/^void submacroblock_mode_decision_p_slice(Macroblock *currMB,$/;"	f
submb_parent_part_refpic_used	inc/global.h	/^  int           submb_parent_part_refpic_used;\/\/<! [2][16] for fast reference decision;$/;"	m	struct:video_par
subseq_char_information_struct	inc/sei.h	/^} subseq_char_information_struct;$/;"	t	typeref:struct:__anon13
subseq_duration	inc/sei.h	/^  unsigned int subseq_duration;$/;"	m	struct:__anon13
subseq_id	inc/sei.h	/^  int subseq_id;$/;"	m	struct:__anon11
subseq_id	inc/sei.h	/^  int subseq_id;$/;"	m	struct:__anon13
subseq_information_struct	inc/sei.h	/^} subseq_information_struct;$/;"	t	typeref:struct:__anon11
subseq_layer_information_struct	inc/sei.h	/^} subseq_layer_information_struct;$/;"	t	typeref:struct:__anon12
subseq_layer_num	inc/sei.h	/^  int subseq_layer_num;$/;"	m	struct:__anon11
subseq_layer_num	inc/sei.h	/^  int subseq_layer_num;$/;"	m	struct:__anon13
subthres	inc/me_epzs_common.h	/^  distblk subthres[8];$/;"	m	struct:epzs_params
sumFrameQP	inc/image.h	/^  int   sumFrameQP; $/;"	m	struct:coding_info
swap_frame_buffer	src/image_mp.c	/^void swap_frame_buffer(VideoParameters *p_Vid, int a, int b)$/;"	f
symbol2uvlc	src/vlc.c	/^int symbol2uvlc(SyntaxElement *sym)$/;"	f
symbol2vlc	src/vlc.c	/^int symbol2vlc(SyntaxElement *sym)$/;"	f
symbol_mode	inc/global.h	/^  char                symbol_mode;$/;"	m	struct:slice
symbol_mode	inc/params.h	/^  int symbol_mode;                   \/\/!< Specifies the mode the symbols are mapped on bits$/;"	m	struct:inp_par_enc
syntaxelement_enc	inc/global.h	/^typedef struct syntaxelement_enc$/;"	s
target_frame_num	inc/sei.h	/^  int target_frame_num;$/;"	m	struct:__anon10
tblk16x16	inc/global.h	/^  int **tblk16x16;   \/\/!< Transform related array$/;"	m	struct:slice
tblk4x4	inc/global.h	/^  int **tblk4x4;     \/\/!< Transform related array$/;"	m	struct:slice
temp0_anchor_pic_flag	inc/global.h	/^  int temp0_anchor_pic_flag[2];$/;"	m	struct:video_par
temp0_inter_view_flag	inc/global.h	/^  int temp0_inter_view_flag[2];$/;"	m	struct:video_par
temp0_nal_reference_idc	inc/global.h	/^  int temp0_nal_reference_idc;$/;"	m	struct:video_par
temp0_non_idr_flag	inc/global.h	/^  int temp0_non_idr_flag[2];$/;"	m	struct:video_par
temp0_priority_id	inc/global.h	/^  int temp0_priority_id;$/;"	m	struct:video_par
temp0_temporal_id	inc/global.h	/^  int temp0_temporal_id;$/;"	m	struct:video_par
temp0_view_id	inc/global.h	/^  int temp0_view_id;$/;"	m	struct:video_par
tempData1	inc/global.h	/^  ImageData tempData1, tempData2, tempData3, tempData4;$/;"	m	struct:video_par
tempData2	inc/global.h	/^  ImageData tempData1, tempData2, tempData3, tempData4;$/;"	m	struct:video_par
tempData3	inc/global.h	/^  ImageData tempData1, tempData2, tempData3, tempData4;$/;"	m	struct:video_par
tempData4	inc/global.h	/^  ImageData tempData1, tempData2, tempData3, tempData4;$/;"	m	struct:video_par
tempImg	inc/global.h	/^  imgpel **tempImg;$/;"	m	struct:video_par
temp_high	inc/global.h	/^  int *temp_low, *temp_high;$/;"	m	struct:video_par
temp_low	inc/global.h	/^  int *temp_low, *temp_high;$/;"	m	struct:video_par
temp_transform_size_8x8_flag	inc/global.h	/^  byte                temp_transform_size_8x8_flag;$/;"	m	struct:macroblock_enc
temporal_id	inc/global.h	/^  int temporal_id;$/;"	m	struct:video_par
temporal_layer	inc/global.h	/^  int temporal_layer;     \/\/! Temporal layer; $/;"	m	struct:__anon5
temporal_layer	inc/mbuffer.h	/^  int         temporal_layer;     $/;"	m	struct:storable_picture
temporal_layer	inc/pred_struct_types.h	/^  int temporal_layer;     $/;"	m	struct:frame_struct
temporal_layer	inc/pred_struct_types.h	/^  int temporal_layer; $/;"	m	struct:pred_struct_frm
temporal_levels	inc/rc_types.h	/^  int   temporal_levels;$/;"	m	struct:rc_generic
terminate_sequence	src/filehandle.c	/^int terminate_sequence(VideoParameters *p_Vid, InputParameters *p_Inp)$/;"	f
terminate_slice	src/slice.c	/^static int terminate_slice(Macroblock *currMB, int lastslice, StatParameters *cur_stats )$/;"	f	file:
test8x8	inc/global.h	/^  int              test8x8;$/;"	m	struct:me_block
test_clip_mvs	src/conformance.c	/^void test_clip_mvs(VideoParameters *p_Vid, MotionVector *mv, Boolean write_mb)$/;"	f
test_valid_direct	src/mv_direct.c	/^static void test_valid_direct(Slice *currSlice, seq_parameter_set_rbsp_t *active_sps, char  *direct_ref_idx, short l0_refX, short l1_refX, int pic_block_y, int pic_block_x)$/;"	f	file:
tex_ctx	inc/global.h	/^  TextureInfoContexts *tex_ctx;     \/\/!< pointer to struct of context models for use in CABAC$/;"	m	struct:slice
tex_ctx	inc/rdopt_coding_state.h	/^  TextureInfoContexts  *tex_ctx;$/;"	m	struct:coding_state
time_offset	inc/sei.h	/^  int time_offset;$/;"	m	struct:__anon19
timestamp	inc/rtp.h	/^  unsigned int timestamp;  \/\/!< timestamp, 27 MHz for H.264$/;"	m	struct:__anon24
tlyr_based_ref_management_frame_pic	src/mmco.c	/^void tlyr_based_ref_management_frame_pic(VideoParameters *p_Vid, int current_pic_num)$/;"	f
tlyr_ref_pic_reorder_frame_default	src/list_reorder.c	/^void tlyr_ref_pic_reorder_frame_default(Slice *currSlice, unsigned num_ref_idx_lX_active, int list_no)$/;"	f
tmp_mv4	inc/global.h	/^  MotionVector ****tmp_mv4;$/;"	m	struct:slice
tmp_mv8	inc/global.h	/^  MotionVector ****tmp_mv8;$/;"	m	struct:slice
tmp_time	inc/global.h	/^  int tmp_time;$/;"	m	struct:prev_coding_stats
tone_map_cancel_flag	inc/sei.h	/^  unsigned char tone_map_cancel_flag;$/;"	m	struct:__anon23
tone_map_id	inc/sei.h	/^  unsigned int  tone_map_id;$/;"	m	struct:__anon23
tone_map_repetition_period	inc/sei.h	/^  unsigned int  tone_map_repetition_period;$/;"	m	struct:__anon23
top	inc/me_epzs_common.h	/^  MotionVector ***top;    \/\/!< motion vector       [list][subblock_x][subblock_y]$/;"	m	struct:__anon28
top_field	inc/global.h	/^  Boolean top_field;      \/\/!< For MB level field\/frame -- top field flag$/;"	m	struct:video_par
top_field	inc/mbuffer.h	/^  StorablePicture *top_field;$/;"	m	struct:frame_store
top_field	inc/mbuffer.h	/^  struct storable_picture *top_field;     \/\/ for mb aff, if frame for referencing the top field$/;"	m	struct:storable_picture	typeref:struct:storable_picture::storable_picture
top_left	inc/params.h	/^  unsigned int *top_left;                         \/\/!< top_left and bottom_right store values indicating foregrounds$/;"	m	struct:inp_par_enc
top_poc	inc/mbuffer.h	/^  int         top_poc;$/;"	m	struct:storable_picture
toppoc	inc/global.h	/^  signed int toppoc;       \/\/!< poc for this frame or field$/;"	m	struct:video_par
tot_time	inc/global.h	/^  int64  tot_time;$/;"	m	struct:video_par
total_byte	inc/sei.h	/^  int total_byte;$/;"	m	struct:__anon16
total_byte	inc/sei.h	/^  int total_byte;$/;"	m	struct:__anon17
total_frame_buffer	inc/global.h	/^  unsigned long total_frame_buffer;$/;"	m	struct:video_par
tr4x4	inc/rdopt.h	/^  RD_8x8DATA *tr4x4;$/;"	m	struct:rdo_structure
tr8x8	inc/rdopt.h	/^  RD_8x8DATA *tr8x8;$/;"	m	struct:rdo_structure
trace2out	src/vlc.c	/^void trace2out(SyntaxElement *sym)$/;"	f
trace2out_cabac	src/vlc.c	/^void trace2out_cabac(SyntaxElement *sym)$/;"	f
trace_coeff	src/macroblock.c	/^static inline void trace_coeff(SyntaxElement *se, int plane, char *type, int k, int level, int run)$/;"	f	file:
trace_enabled	inc/global.h	/^  Boolean trace_enabled;$/;"	m	struct:bit_stream_enc
tracestring	inc/global.h	/^  char                tracestring[TRACESTRING_SIZE];  \/\/!< trace string$/;"	m	struct:syntaxelement_enc
trans_dist_bestY_b8x8	inc/errdo.h	/^  int ***trans_dist_bestY_b8x8;$/;"	m	struct:decoders
trans_dist_bestY_mb	inc/errdo.h	/^  int **trans_dist_bestY_mb;$/;"	m	struct:decoders
trans_dist_wo_res	inc/errdo.h	/^  int **trans_dist_wo_res;$/;"	m	struct:decoders
trans_dist_wo_res_bestY_b8x8	inc/errdo.h	/^  int ***trans_dist_wo_res_bestY_b8x8;$/;"	m	struct:decoders
trans_err_bestY_b8x8	inc/errdo.h	/^  int ***trans_err_bestY_b8x8;$/;"	m	struct:decoders
trans_err_bestY_mb	inc/errdo.h	/^  int **trans_err_bestY_mb;$/;"	m	struct:decoders
trans_err_wo_res	inc/errdo.h	/^  int **trans_err_wo_res;$/;"	m	struct:decoders
trans_err_wo_res_bestY_b8x8	inc/errdo.h	/^  int ***trans_err_wo_res_bestY_b8x8;$/;"	m	struct:decoders
transform_decision	src/macroblock.c	/^byte transform_decision (Macroblock *currMB, int block_check, distblk *cost)$/;"	f
transform_size_contexts	inc/global.h	/^  BiContextType  transform_size_contexts   [NUM_TRANSFORM_SIZE_CTX];$/;"	m	struct:__anon2
transform_termination_control	src/mode_decision.c	/^int transform_termination_control(Macroblock* currMB, int mode) $/;"	f
transmission_dist_UV	inc/errdo.h	/^  int *** transmission_dist_UV;           \/\/!< for storing the transmission distortion for component UV in rmpc algorithm $/;"	m	struct:distortion_estimation
transmission_dist_Y	inc/errdo.h	/^  int **  transmission_dist_Y;            \/\/!< for storing the transmission distortion for component Y in rmpc algorithm$/;"	m	struct:distortion_estimation
transmission_err_UV	inc/errdo.h	/^  int *** transmission_err_UV;            \/\/!< for storing the transmission distortion for component UV in rmpc algorithm $/;"	m	struct:distortion_estimation
transmission_err_Y	inc/errdo.h	/^  int **  transmission_err_Y;             \/\/!< for storing the transmission distortion for component Y in rmpc algorithm$/;"	m	struct:distortion_estimation
trellis_coding	src/rdoq.c	/^void trellis_coding(Macroblock *currMB)$/;"	f
trellis_mp	src/rdoq.c	/^void trellis_mp(Macroblock *currMB)$/;"	f
trellis_sp	src/rdoq.c	/^void trellis_sp(Macroblock *currMB)$/;"	f
type	inc/global.h	/^  int                 type;           \/\/!< type of syntax element for data part.$/;"	m	struct:syntaxelement_enc
type	inc/global.h	/^  short type;$/;"	m	struct:video_par
type	inc/image.h	/^  short type;$/;"	m	struct:coding_info
type	inc/mbuffer.h	/^  int         type;$/;"	m	struct:storable_picture
type	inc/pred_struct_types.h	/^  int type; \/\/ dominant$/;"	m	struct:frame_struct
type	inc/pred_struct_types.h	/^  int type;$/;"	m	struct:slice_struct
type2ctx_abs	inc/cabac.h	/^static const byte type2ctx_abs [] = { 0,  1,  2,  3,  3,  4,  5,  6,  5,  5, 10, 11, 12, 13, 13, 14, 16, 17, 18, 19, 19, 20}; \/\/ 7$/;"	v
type2ctx_bcbp	inc/cabac.h	/^static const byte type2ctx_bcbp[] = { 0,  1,  2,  3,  3,  4,  5,  6,  5,  5, 10, 11, 12, 13, 13, 14, 16, 17, 18, 19, 19, 20};$/;"	v
type2ctx_last	inc/cabac.h	/^static const byte type2ctx_last[] = { 0,  1,  2,  3,  4,  5,  6,  7,  6,  6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}; \/\/ 8$/;"	v
type2ctx_map	inc/cabac.h	/^static const byte type2ctx_map [] = { 0,  1,  2,  3,  4,  5,  6,  7,  6,  6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}; \/\/ 8$/;"	v
type2ctx_one	inc/cabac.h	/^static const byte type2ctx_one [] = { 0,  1,  2,  3,  3,  4,  5,  6,  5,  5, 10, 11, 12, 13, 13, 14, 16, 17, 18, 19, 19, 20}; \/\/ 7$/;"	v
ue_linfo	src/vlc.c	/^void ue_linfo(int ue, int dummy, int *len,int *info)$/;"	f
umhex_smp_struct	inc/me_umhexsmp.h	/^struct umhex_smp_struct {$/;"	s
umhex_struct	inc/me_umhex.h	/^struct umhex_struct {$/;"	s
unary_bin_encode	src/cabac.c	/^static void unary_bin_encode(EncodingEnvironmentPtr eep_dp,$/;"	f	file:
unary_bin_max_encode	src/cabac.c	/^static void unary_bin_max_encode(EncodingEnvironmentPtr eep_dp,$/;"	f	file:
unary_exp_golomb_level_encode	src/cabac.c	/^static void unary_exp_golomb_level_encode( EncodingEnvironmentPtr eep_dp,$/;"	f	file:
unary_exp_golomb_mv_encode	src/cabac.c	/^static void unary_exp_golomb_mv_encode(EncodingEnvironmentPtr eep_dp,$/;"	f	file:
uninit_out_buffer	src/output.c	/^void uninit_out_buffer(VideoParameters *p_Vid)$/;"	f
unmark_for_long_term_reference	src/mbuffer.c	/^void unmark_for_long_term_reference(FrameStore* fs)$/;"	f
unmark_for_reference	src/mbuffer.c	/^void unmark_for_reference(FrameStore* fs)$/;"	f
updateBottomField	src/rc_quadratic.c	/^void updateBottomField( InputParameters *p_Inp, RCQuadratic *p_quad )$/;"	f
updateBparams	src/rc_quadratic.c	/^void updateBparams( RCQuadratic *p_quad, RCGeneric *p_gen, int complexity )$/;"	f
updateComplexity	src/rc_quadratic.c	/^int updateComplexity( VideoParameters *p_Vid, RCQuadratic *p_quad, RCGeneric *p_gen, Boolean is_updated, int nbits )$/;"	f
updateFirstBU	src/rc_quadratic.c	/^int updateFirstBU( VideoParameters *p_Vid, InputParameters *p_Inp, RCQuadratic *p_quad, RCGeneric *p_gen, int topfield )$/;"	f
updateFirstP	src/rc_quadratic.c	/^int updateFirstP( VideoParameters *p_Vid, InputParameters *p_Inp, RCQuadratic *p_quad, RCGeneric *p_gen, int topfield )$/;"	f
updateLastBU	src/rc_quadratic.c	/^void updateLastBU( VideoParameters *p_Vid, InputParameters *p_Inp, RCQuadratic *p_quad, RCGeneric *p_gen, int topfield )$/;"	f
updateMADModel	src/rc_quadratic.c	/^void updateMADModel (VideoParameters *p_Vid, InputParameters *p_Inp, RCQuadratic *p_quad, RCGeneric *p_gen)$/;"	f
updateMV_mp	src/rdoq.c	/^void updateMV_mp(Macroblock *currMB, distblk *m_cost, short ref, int list, int h, int v, int blocktype, int block8x8)$/;"	f
updateMaxValue	src/configfile.c	/^static void updateMaxValue(FrameFormat *format)$/;"	f	file:
updateModelQPBU	src/rc_quadratic.c	/^void updateModelQPBU( VideoParameters *p_Vid, InputParameters *p_Inp, RCQuadratic *p_quad, int m_Qp )$/;"	f
updateModelQPFrame	src/rc_quadratic.c	/^void updateModelQPFrame( RCQuadratic *p_quad, int m_Bits )$/;"	f
updateNegativeTarget	src/rc_quadratic.c	/^int updateNegativeTarget( VideoParameters *p_Vid, InputParameters *p_Inp, RCQuadratic *p_quad, RCGeneric *p_gen, int topfield, int m_Qp )$/;"	f
updateOutFormat	src/configfile.c	/^static void updateOutFormat(InputParameters *p_Inp)$/;"	f	file:
updatePparams	src/rc_quadratic.c	/^void updatePparams( RCQuadratic *p_quad, RCGeneric *p_gen, int complexity )$/;"	f
updateQP	inc/global.h	/^  int  (*updateQP)                (struct video_par *p_Vid, InputParameters *p_Inp, RCQuadratic *p_quad, RCGeneric *p_gen, int topfield);$/;"	m	struct:video_par
updateQPInterlace	src/rc_quadratic.c	/^void updateQPInterlace( RCQuadratic *p_quad, RCGeneric *p_gen )$/;"	f
updateQPInterlaceBU	src/rc_quadratic.c	/^void updateQPInterlaceBU( RCQuadratic *p_quad, RCGeneric *p_gen )$/;"	f
updateQPNonPicAFF	src/rc_quadratic.c	/^void updateQPNonPicAFF( seq_parameter_set_rbsp_t *active_sps, RCQuadratic *p_quad )$/;"	f
updateQPRC0	src/rc_quadratic.c	/^int updateQPRC0(VideoParameters *p_Vid, InputParameters *p_Inp, RCQuadratic *p_quad, RCGeneric *p_gen, int topfield)$/;"	f
updateQPRC1	src/rc_quadratic.c	/^int updateQPRC1(VideoParameters *p_Vid, InputParameters *p_Inp, RCQuadratic *p_quad, RCGeneric *p_gen, int topfield)$/;"	f
updateQPRC2	src/rc_quadratic.c	/^int updateQPRC2(VideoParameters *p_Vid, InputParameters *p_Inp, RCQuadratic *p_quad, RCGeneric *p_gen, int topfield)$/;"	f
updateQPRC3	src/rc_quadratic.c	/^int updateQPRC3(VideoParameters *p_Vid, InputParameters *p_Inp, RCQuadratic *p_quad, RCGeneric *p_gen, int topfield)$/;"	f
updateRCModel	src/rc_quadratic.c	/^void updateRCModel (VideoParameters *p_Vid, InputParameters *p_Inp, RCQuadratic *p_quad, RCGeneric *p_gen)$/;"	f
update_adaptive_rounding_16x16	src/q_around.c	/^void update_adaptive_rounding_16x16(VideoParameters *p_Vid, int****ARCofAdj , int mode)$/;"	f
update_adaptive_rounding_4x4	src/q_around.c	/^void update_adaptive_rounding_4x4 (VideoParameters *p_Vid, int****ARCofAdj , int mode, int block_y, int block_x)$/;"	f
update_adaptive_rounding_8x8	src/q_around.c	/^void update_adaptive_rounding_8x8(VideoParameters *p_Vid, InputParameters *p_Inp, RD_8x8DATA* dataTr, int**** ARCofAdj)$/;"	f
update_bitcounter_stats	src/image.c	/^void update_bitcounter_stats(VideoParameters *p_Vid)$/;"	f
update_field_frame_contexts	src/context_ini.c	/^void update_field_frame_contexts (VideoParameters *p_Vid, int field)$/;"	f
update_frame_indices	src/pred_struct.c	/^static void update_frame_indices( SeqStructure *p_seq_struct, FrameUnitStruct *p_frm_struct, int curr_frame, int pred_frame )$/;"	f	file:
update_full_search_large_blocks	src/me_fullfast.c	/^update_full_search_large_blocks (MEFullFast *p_ffast_me, int list, int refindex, int max_pos)$/;"	f
update_global_stats	src/image.c	/^void update_global_stats(InputParameters *p_Inp, StatParameters *gl_stats, StatParameters *cur_stats)$/;"	f
update_idr_order_stats	src/image.c	/^void update_idr_order_stats(VideoParameters *p_Vid)$/;"	f
update_lambda_costs	src/mode_decision.c	/^void update_lambda_costs(Macroblock *currMB, RD_PARAMS *enc_mb, int lambda_mf[3])$/;"	f
update_mcost	src/mode_decision.c	/^void update_mcost(Slice *currSlice, int ref_lambda, short ref, int cur_list, distblk mcost, distblk *bmcost, char *best_ref)$/;"	f
update_mv_block	src/mv_search.c	/^void update_mv_block(Macroblock *currMB, MEBlock *mv_block, int h, int v)$/;"	f
update_mv_limits	src/conformance.c	/^void update_mv_limits(VideoParameters *p_Vid, byte is_field)$/;"	f
update_offset_params	src/q_around.c	/^void update_offset_params(Macroblock *currMB, int mode, byte luma_transform_size_8x8_flag)$/;"	f
update_pic_num	src/mbuffer.c	/^void update_pic_num(Slice *currSlice)$/;"	f
update_q_offset4x4	src/q_offsets.c	/^static inline void update_q_offset4x4(LevelQuantParams **q_params, short *offsetList, int q_bits)$/;"	f	file:
update_q_offset8x8	src/q_offsets.c	/^static inline void update_q_offset8x8(LevelQuantParams **q_params, short *offsetList, int q_bits)$/;"	f	file:
update_qp	src/macroblock.c	/^void update_qp(Macroblock *currMB)$/;"	f
update_qp_cbp	src/rdopt.c	/^void update_qp_cbp(Macroblock *currMB)$/;"	f
update_qp_cbp_tmp	src/rdopt.c	/^void update_qp_cbp_tmp(Macroblock *currMB, int cbp)$/;"	f
update_refresh_map	src/rdopt.c	/^void update_refresh_map(Macroblock *currMB, int intra, int intra1)$/;"	f
update_video_stats	src/image.c	/^int update_video_stats(VideoParameters *p_Vid)$/;"	f
useCRA	inc/params.h	/^  int useCRA;$/;"	m	struct:inp_par_enc
used_for_reference	inc/mbuffer.h	/^  int         used_for_reference;$/;"	m	struct:storable_picture
used_size	inc/mbuffer.h	/^  unsigned      used_size;$/;"	m	struct:decoded_picture_buffer
used_size_il	inc/mbuffer.h	/^  unsigned      used_size_il;$/;"	m	struct:decoded_picture_buffer
user_data_registered_itu_t_t35_information_struct	inc/sei.h	/^} user_data_registered_itu_t_t35_information_struct;$/;"	t	typeref:struct:__anon17
user_data_unregistered_information_struct	inc/sei.h	/^} user_data_unregistered_information_struct;$/;"	t	typeref:struct:__anon16
v	inc/rtp.h	/^  unsigned int v;          \/\/!< Version, 2 bits, MUST be 0x2$/;"	m	struct:__anon24
valid	inc/global.h	/^  short  valid[MAXMODE];$/;"	m	struct:rd_params
valid_4x4	inc/global.h	/^  byte                valid_4x4;$/;"	m	struct:macroblock_enc
valid_8x8	inc/global.h	/^  byte                valid_8x8;$/;"	m	struct:macroblock_enc
valid_intra_mode	src/rdopt.c	/^int valid_intra_mode(Slice *currSlice, int ipmode)$/;"	f
value	inc/global.h	/^  float value[3];                    \/\/!< current frame distortion$/;"	m	struct:distortion_metric
value1	inc/global.h	/^  int                 value1;         \/\/!< numerical value of syntax element$/;"	m	struct:syntaxelement_enc
value2	inc/global.h	/^  int                 value2;         \/\/!< for blocked symbols, e.g. run\/level$/;"	m	struct:syntaxelement_enc
vcl_initial_cpb_removal_delay	inc/sei.h	/^  int vcl_initial_cpb_removal_delay[MAX_CPB_CNT_MINUS1+1];$/;"	m	struct:__anon8
vcl_initial_cpb_removal_delay_offset	inc/sei.h	/^  int vcl_initial_cpb_removal_delay_offset[MAX_CPB_CNT_MINUS1+1];$/;"	m	struct:__anon8
ver_offset	src/block.c	/^static const unsigned char ver_offset[4][4][4] =  { $/;"	v	file:
vertical_symmetric_extension	src/img_dist_ms_ssim.c	/^void vertical_symmetric_extension(int **buffer, int width, int height)$/;"	f
videoCode	inc/params.h	/^  int videoCode;                        \/\/!< 1 - 709, 3 - 601:  See VideoCode in io_tiff.$/;"	m	struct:inp_par_enc
video_par	inc/global.h	/^typedef struct video_par$/;"	s
view_id	inc/global.h	/^  int                 view_id;$/;"	m	struct:slice
view_id	inc/global.h	/^  int view_id;$/;"	m	struct:prev_coding_stats
view_id	inc/global.h	/^  int view_id;$/;"	m	struct:video_par
view_id	inc/mbuffer.h	/^  int         view_id;$/;"	m	struct:storable_picture
view_id	inc/mbuffer.h	/^  int       view_id;$/;"	m	struct:frame_store
view_id	inc/pred_struct_types.h	/^  int view_id;$/;"	m	struct:frame_struct
wavREF	inc/global.h	/^  int ***wavREF[NUM_WAVELET_LEVEL+1];$/;"	m	struct:video_par
wavSRC	inc/global.h	/^  int ***wavSRC[NUM_WAVELET_LEVEL+1];$/;"	m	struct:video_par
wbp_weight	inc/global.h	/^  short *****wbp_weight;  \/\/ implicit WP weights$/;"	m	struct:video_par
wbp_weight	inc/global.h	/^  short ****wbp_weight;       \/\/!< weight in [list][fwd_index][bwd_idx][component] order$/;"	m	struct:slice
weight	inc/global.h	/^  short weight[3];$/;"	m	struct:wp_params
weight1	inc/global.h	/^  short            weight1;$/;"	m	struct:me_block
weight1_cr	inc/global.h	/^  short            weight1_cr[2];$/;"	m	struct:me_block
weight2	inc/global.h	/^  short            weight2;$/;"	m	struct:me_block
weight2_cr	inc/global.h	/^  short            weight2_cr[2];$/;"	m	struct:me_block
weight_cost	inc/mv_search.h	/^static inline distblk weight_cost(int lambda, int bits)$/;"	f
weight_cr	inc/global.h	/^  short            weight_cr[2];$/;"	m	struct:me_block
weight_luma	inc/global.h	/^  short            weight_luma;$/;"	m	struct:me_block
weighted_bi_prediction	src/lln_mc_prediction.c	/^static inline void weighted_bi_prediction(imgpel** mb_pred, $/;"	f	file:
weighted_bi_prediction	src/mc_prediction.c	/^static inline void weighted_bi_prediction(imgpel** mb_pred, imgpel* l0pred, imgpel *l1pred, $/;"	f	file:
weighted_bi_prediction	src/mc_prediction_otf.c	/^static void weighted_bi_prediction(imgpel** mb_pred, $/;"	f	file:
weighted_bipred_idc	inc/global.h	/^  byte                weighted_bipred_idc;                      \/\/!< Use of weighted biprediction (note that weighted_pred_flag is probably not needed here)$/;"	m	struct:slice
weighted_mc_prediction	src/lln_mc_prediction.c	/^static inline void weighted_mc_prediction(imgpel** mb_pred,$/;"	f	file:
weighted_mc_prediction	src/mc_prediction.c	/^static inline void weighted_mc_prediction(imgpel** mb_pred, imgpel* lpred, $/;"	f	file:
weighted_mc_prediction	src/mc_prediction_otf.c	/^static void weighted_mc_prediction(imgpel** mb_pred, $/;"	f	file:
weighted_pred	inc/pred_struct_types.h	/^  int weighted_pred;$/;"	m	struct:slice_struct
weighted_prediction	inc/global.h	/^  byte                weighted_prediction;                       \/\/!< Use of weighted prediction $/;"	m	struct:slice
width	inc/global.h	/^  int width;                   \/\/!< Number of pels$/;"	m	struct:coding_par
width	inc/global.h	/^  int width;                   \/\/!< Number of pels$/;"	m	struct:video_par
width_blk	inc/global.h	/^  int                 width_blk;               \/\/!< Number of columns in blocks$/;"	m	struct:slice
width_blk	inc/global.h	/^  int width_blk;               \/\/!< Number of columns in blocks$/;"	m	struct:coding_par
width_blk	inc/global.h	/^  int width_blk;               \/\/!< Number of columns in blocks$/;"	m	struct:video_par
width_cr	inc/global.h	/^  int width_cr;                \/\/!< Number of pels chroma$/;"	m	struct:coding_par
width_cr	inc/global.h	/^  int width_cr;                \/\/!< Number of pels chroma$/;"	m	struct:video_par
width_padded	inc/global.h	/^  int width_padded;            \/\/!< Width in pels of padded picture$/;"	m	struct:coding_par
width_padded	inc/global.h	/^  int width_padded;            \/\/!< Width in pels of padded picture$/;"	m	struct:video_par
window_predictor	inc/me_epzs_common.h	/^  EPZSStructure *window_predictor;$/;"	m	struct:epzs_params
window_predictor_ext	inc/me_epzs_common.h	/^  EPZSStructure *window_predictor_ext;$/;"	m	struct:epzs_params
wka0	inc/global.h	/^  int wka0, wka1, wka2, wka3, wka4;$/;"	m	struct:video_par
wka1	inc/global.h	/^  int wka0, wka1, wka2, wka3, wka4;$/;"	m	struct:video_par
wka2	inc/global.h	/^  int wka0, wka1, wka2, wka3, wka4;$/;"	m	struct:video_par
wka3	inc/global.h	/^  int wka0, wka1, wka2, wka3, wka4;$/;"	m	struct:video_par
wka4	inc/global.h	/^  int wka0, wka1, wka2, wka3, wka4;$/;"	m	struct:video_par
wp_chroma_round	inc/global.h	/^  short               wp_chroma_round;$/;"	m	struct:slice
wp_luma_round	inc/global.h	/^  short               wp_luma_round;$/;"	m	struct:slice
wp_mcprec_reorder_lists	src/list_reorder.c	/^void wp_mcprec_reorder_lists( Slice *currSlice )$/;"	f
wp_method	inc/global.h	/^  int wp_method;$/;"	m	struct:prev_coding_stats
wp_offset	inc/global.h	/^  short ***wp_offset;         \/\/!< offset in [list][index][component] order$/;"	m	struct:slice
wp_offsets	inc/global.h	/^  short ****wp_offsets;   \/\/ explicit WP offsets$/;"	m	struct:video_par
wp_parameters_set	inc/global.h	/^  int   wp_parameters_set; $/;"	m	struct:video_par
wp_params	inc/global.h	/^typedef struct wp_params$/;"	s
wp_rd_passes	inc/wp_mcprec.h	/^  WPXPass           wp_rd_passes[3];            \/\/ frame_picture [0...4] (MultiRefWeightedPred == 2)$/;"	m	struct:wpx_object
wp_ref_list	inc/wp_mcprec.h	/^  WeightedPredRefX *wp_ref_list[2];             \/\/ structure with reordering and WP information for ref frames [LIST]$/;"	m	struct:wpx_object
wp_weight	inc/global.h	/^  short ***wp_weight;         \/\/!< weight in [list][index][component] order$/;"	m	struct:slice
wp_weights	inc/global.h	/^  short ****wp_weights;   \/\/ explicit WP weights$/;"	m	struct:video_par
wpxAdaptRefNum	src/wp_mcprec.c	/^void wpxAdaptRefNum( Slice *currSlice )$/;"	f
wpxDetermineWP	src/wp_mcprec.c	/^int wpxDetermineWP( Slice *currSlice, int clist, int n )$/;"	f
wpxFreeWPXObject	src/wp_mcprec.c	/^void wpxFreeWPXObject( VideoParameters *p_Vid )$/;"	f
wpxInitWPXObject	src/wp_mcprec.c	/^void wpxInitWPXObject( VideoParameters *p_Vid )$/;"	f
wpxInitWPXPasses	src/wp_mcprec.c	/^void wpxInitWPXPasses( VideoParameters *p_Vid, InputParameters *p_Inp )$/;"	f
wpxModifyRefPicList	src/wp_mcprec.c	/^void wpxModifyRefPicList( Slice *currSlice )$/;"	f
wpx_object	inc/wp_mcprec.h	/^typedef struct wpx_object$/;"	s
writeB8_B_typeInfo_CABAC	src/cabac.c	/^void writeB8_B_typeInfo_CABAC(SyntaxElement *se, DataPartition *dp)$/;"	f
writeB8_typeInfo	inc/global.h	/^  void (*writeB8_typeInfo)      (SyntaxElement *se, DataPartition *dP);$/;"	m	struct:slice
writeB8_typeInfo	inc/symbol.h	/^  void (*writeB8_typeInfo)      (SyntaxElement *se, DataPartition *dP);$/;"	m	struct:writeMB
writeB8_typeInfo_CABAC	src/cabac.c	/^void writeB8_typeInfo_CABAC(SyntaxElement *se, DataPartition *dp)$/;"	f
writeCBP	inc/global.h	/^  void (*writeCBP)              (Macroblock* currMB, SyntaxElement *se, DataPartition *dP);$/;"	m	struct:slice
writeCBP	inc/symbol.h	/^  void (*writeCBP)              (Macroblock* currMB, SyntaxElement *se, DataPartition *dP);$/;"	m	struct:writeMB
writeCBP_BIT_CABAC	src/cabac.c	/^void writeCBP_BIT_CABAC (Macroblock* currMB, int b8, int bit, int cbp, EncodingEnvironmentPtr eep_dp, TextureInfoContexts *ctx)$/;"	f
writeCBP_CABAC	src/cabac.c	/^void writeCBP_CABAC(Macroblock *currMB, SyntaxElement *se, DataPartition *dp)$/;"	f
writeCBP_VLC	src/vlc.c	/^void writeCBP_VLC (Macroblock* currMB, SyntaxElement *se, DataPartition *dp)$/;"	f
writeCIPredMode	inc/global.h	/^  void (*writeCIPredMode)       (Macroblock *currMB, SyntaxElement *se, DataPartition *dP);$/;"	m	struct:slice
writeCIPredMode	inc/symbol.h	/^  void (*writeCIPredMode)       (Macroblock* currMB, SyntaxElement *se, DataPartition *dP);$/;"	m	struct:writeMB
writeCIPredMode_CABAC	src/cabac.c	/^void writeCIPredMode_CABAC(Macroblock *currMB, SyntaxElement *se, DataPartition *dp)$/;"	f
writeCoeff16x16	inc/global.h	/^  int  (*writeCoeff16x16)       (Macroblock* currMB, ColorPlane);$/;"	m	struct:slice
writeCoeff16x16_CABAC	src/macroblock.c	/^int writeCoeff16x16_CABAC (Macroblock* currMB, ColorPlane plane)$/;"	f
writeCoeff16x16_CAVLC	src/macroblock.c	/^int writeCoeff16x16_CAVLC (Macroblock* currMB, ColorPlane plane)$/;"	f
writeCoeff4x4_CABAC	src/macroblock.c	/^int writeCoeff4x4_CABAC (Macroblock* currMB, ColorPlane plane, int b8, int b4, int intra4x4mode)$/;"	f
writeCoeff4x4_CAVLC	inc/global.h	/^  int  (*writeCoeff4x4_CAVLC)   (Macroblock* currMB, int block_type, int b8, int b4, int param);$/;"	m	struct:slice
writeCoeff4x4_CAVLC_444	src/macroblock.c	/^int writeCoeff4x4_CAVLC_444 (Macroblock* currMB, int block_type, int b8, int b4, int param)$/;"	f
writeCoeff4x4_CAVLC_normal	src/macroblock.c	/^int writeCoeff4x4_CAVLC_normal (Macroblock* currMB, int block_type, int b8, int b4, int param)$/;"	f
writeCoeff8x8	src/macroblock.c	/^int writeCoeff8x8 (Macroblock* currMB, ColorPlane pl, int block8x8, int block_mode, int transform_size_flag)$/;"	f
writeCoeff8x8_CABAC	src/macroblock.c	/^int writeCoeff8x8_CABAC (Macroblock* currMB, ColorPlane plane, int b8, int intra_mode)$/;"	f
writeDquant	inc/global.h	/^  void (*writeDquant)           (Macroblock* currMB, SyntaxElement *se, DataPartition *dP);$/;"	m	struct:slice
writeDquant	inc/symbol.h	/^  void (*writeDquant)           (Macroblock* currMB, SyntaxElement *se, DataPartition *dP);$/;"	m	struct:writeMB
writeDquant_CABAC	src/cabac.c	/^void writeDquant_CABAC(Macroblock *currMB, SyntaxElement *se, DataPartition *dp)$/;"	f
writeFieldModeInfo	inc/global.h	/^  void (*writeFieldModeInfo)    (Macroblock *currMB, SyntaxElement *se, DataPartition *dP);$/;"	m	struct:slice
writeFieldModeInfo	inc/symbol.h	/^  void (*writeFieldModeInfo)    (Macroblock *currMB, SyntaxElement *se, DataPartition *dP);$/;"	m	struct:writeMB
writeFieldModeInfo_CABAC	src/cabac.c	/^void writeFieldModeInfo_CABAC(Macroblock *currMB, SyntaxElement *se, DataPartition *dp)$/;"	f
writeFlag_CAVLC	src/vlc.c	/^void writeFlag_CAVLC(Macroblock *currMB, SyntaxElement *se, DataPartition *dp)$/;"	f
writeIPCMByteAlign	src/macroblock.c	/^static int writeIPCMByteAlign(Bitstream *currStream, SyntaxElement *se, int *bitCount)$/;"	f	file:
writeIPCMChroma	src/macroblock.c	/^static int writeIPCMChroma (Macroblock *currMB, imgpel **imgUV, Bitstream *currStream, SyntaxElement *se, int *bitCount)$/;"	f	file:
writeIPCMData	src/macroblock.c	/^static int writeIPCMData(Macroblock *currMB, DataPartition*  dataPart)$/;"	f	file:
writeIPCMLuma	src/macroblock.c	/^static int writeIPCMLuma (Macroblock *currMB, imgpel **imgY, Bitstream *currStream, SyntaxElement *se, int *bitCount)$/;"	f	file:
writeIntra4x4Modes	src/macroblock.c	/^static int writeIntra4x4Modes(Macroblock *currMB)$/;"	f	file:
writeIntra8x8Modes	src/macroblock.c	/^static int writeIntra8x8Modes(Macroblock *currMB)$/;"	f	file:
writeIntraModes	src/macroblock.c	/^static int writeIntraModes(Macroblock *currMB)$/;"	f	file:
writeIntraPredMode	inc/global.h	/^  void (*writeIntraPredMode)    (SyntaxElement *se, DataPartition *dP);$/;"	m	struct:slice
writeIntraPredMode	inc/symbol.h	/^  void (*writeIntraPredMode)    (SyntaxElement *se, DataPartition *dP);$/;"	m	struct:writeMB
writeIntraPredMode_CABAC	src/cabac.c	/^void writeIntraPredMode_CABAC(SyntaxElement *se, DataPartition *dp)$/;"	f
writeIntraPredMode_CAVLC	src/vlc.c	/^void writeIntraPredMode_CAVLC(SyntaxElement *se, DataPartition *dp)$/;"	f
writeMB	inc/symbol.h	/^struct writeMB {$/;"	s
writeMB_B_typeInfo_CABAC	src/cabac.c	/^void writeMB_B_typeInfo_CABAC(Macroblock *currMB, SyntaxElement *se, DataPartition *dp)$/;"	f
writeMB_Bskip_flagInfo_CABAC	src/cabac.c	/^void writeMB_Bskip_flagInfo_CABAC(Macroblock *currMB, SyntaxElement *se, DataPartition *dp)$/;"	f
writeMB_I_typeInfo_CABAC	src/cabac.c	/^void writeMB_I_typeInfo_CABAC(Macroblock *currMB, SyntaxElement *se, DataPartition *dp)$/;"	f
writeMB_P_typeInfo_CABAC	src/cabac.c	/^void writeMB_P_typeInfo_CABAC(Macroblock *currMB, SyntaxElement *se, DataPartition *dp)$/;"	f
writeMB_Pskip_flagInfo_CABAC	src/cabac.c	/^void writeMB_Pskip_flagInfo_CABAC(Macroblock *currMB, SyntaxElement *se, DataPartition *dp)$/;"	f
writeMB_Skip	inc/global.h	/^  void (*writeMB_Skip)          (Macroblock *currMB, SyntaxElement *se, DataPartition *dP);$/;"	m	struct:slice
writeMB_transform_size	inc/global.h	/^  void (*writeMB_transform_size)(Macroblock *currMB, SyntaxElement *se, DataPartition *dP);$/;"	m	struct:slice
writeMB_transform_size	inc/symbol.h	/^  void (*writeMB_transform_size)(Macroblock *currMB, SyntaxElement *se, DataPartition *dP);$/;"	m	struct:writeMB
writeMB_transform_size_CABAC	src/cabac.c	/^void writeMB_transform_size_CABAC(Macroblock *currMB, SyntaxElement *se, DataPartition *dp)$/;"	f
writeMB_typeInfo	inc/global.h	/^  void (*writeMB_typeInfo)      (Macroblock *currMB, SyntaxElement *se, DataPartition *dP);$/;"	m	struct:slice
writeMB_typeInfo	inc/symbol.h	/^  void (*writeMB_typeInfo)      (Macroblock *currMB, SyntaxElement *se, DataPartition *dP);$/;"	m	struct:writeMB
writeMVD	inc/global.h	/^  void (*writeMVD)              (Macroblock *currMB, SyntaxElement *se, DataPartition *dP);$/;"	m	struct:slice
writeMVD	inc/symbol.h	/^  void (*writeMVD)              (Macroblock *currMB, SyntaxElement *se, DataPartition *dP);$/;"	m	struct:writeMB
writeMVD_CABAC	src/cabac.c	/^void writeMVD_CABAC(Macroblock *currMB, SyntaxElement *se, DataPartition *dp)$/;"	f
writeMotionInfo2NAL	inc/global.h	/^  int  (*writeMotionInfo2NAL)   (Macroblock* currMB);$/;"	m	struct:slice
writeMotionVector8x8	src/macroblock.c	/^int writeMotionVector8x8 (Macroblock *currMB, $/;"	f
writeRefFrame	inc/global.h	/^  void (*writeRefFrame[6])      (Macroblock* currMB, SyntaxElement *se, DataPartition *dP);$/;"	m	struct:slice
writeRefFrame	inc/symbol.h	/^  void (*writeRefFrame[6])      (Macroblock *currMB, SyntaxElement *se, DataPartition *dP);$/;"	m	struct:writeMB
writeRefPic_2Ref_CAVLC	src/vlc.c	/^void writeRefPic_2Ref_CAVLC(Macroblock *currMB, SyntaxElement *se, DataPartition *dp )$/;"	f
writeRefPic_B_CABAC	src/cabac.c	/^void writeRefPic_B_CABAC(Macroblock *currMB, SyntaxElement *se, DataPartition *dp)$/;"	f
writeRefPic_Dummy	src/vlc.c	/^void writeRefPic_Dummy(Macroblock *currMB, SyntaxElement *se, DataPartition *dp )$/;"	f
writeRefPic_NRef_CAVLC	src/vlc.c	/^void writeRefPic_NRef_CAVLC(Macroblock *currMB, SyntaxElement *se, DataPartition *dp )$/;"	f
writeRefPic_P_CABAC	src/cabac.c	/^void writeRefPic_P_CABAC(Macroblock *currMB, SyntaxElement *se, DataPartition *dp)$/;"	f
writeReferenceFrame	src/macroblock.c	/^int writeReferenceFrame (Macroblock* currMB, int i, int j, int list_idx, int  ref)$/;"	f
writeRunLevel_CABAC	src/cabac.c	/^void writeRunLevel_CABAC (Macroblock* currMB, SyntaxElement *se, DataPartition *dp)$/;"	f
writeSE_Dummy	src/vlc.c	/^void writeSE_Dummy(SyntaxElement *se, DataPartition *dp )$/;"	f
writeSE_Fix	src/vlc.c	/^void writeSE_Fix(SyntaxElement *se, Bitstream *bitstream )$/;"	f
writeSE_Flag	src/vlc.c	/^void writeSE_Flag(SyntaxElement *se, DataPartition *dp )$/;"	f
writeSE_SVLC	src/vlc.c	/^void writeSE_SVLC(SyntaxElement *se, DataPartition *dp)$/;"	f
writeSE_UVLC	src/vlc.c	/^void writeSE_UVLC(SyntaxElement *se, DataPartition *dp)$/;"	f
writeSE_invFlag	src/vlc.c	/^void writeSE_invFlag(SyntaxElement *se, DataPartition *dp )$/;"	f
writeSVLC_CAVLC	src/vlc.c	/^void writeSVLC_CAVLC(Macroblock *currMB, SyntaxElement *se, DataPartition *dp)$/;"	f
writeSyntaxElement2Buf_Fixed	src/vlc.c	/^int writeSyntaxElement2Buf_Fixed(SyntaxElement *se, Bitstream* this_streamBuffer )$/;"	f
writeSyntaxElement2Buf_UVLC	src/vlc.c	/^int writeSyntaxElement2Buf_UVLC(SyntaxElement *se, Bitstream* this_streamBuffer )$/;"	f
writeSyntaxElement_Level_VLC1	src/vlc.c	/^int writeSyntaxElement_Level_VLC1(SyntaxElement *se, DataPartition *dp, int profile_idc)$/;"	f
writeSyntaxElement_Level_VLCN	src/vlc.c	/^int writeSyntaxElement_Level_VLCN(SyntaxElement *se, int vlc, DataPartition *dp, int profile_idc)$/;"	f
writeSyntaxElement_NumCoeffTrailingOnes	src/vlc.c	/^int writeSyntaxElement_NumCoeffTrailingOnes(SyntaxElement *se, DataPartition *dp)$/;"	f
writeSyntaxElement_NumCoeffTrailingOnesChromaDC	src/vlc.c	/^int writeSyntaxElement_NumCoeffTrailingOnesChromaDC(VideoParameters *p_Vid, SyntaxElement *se, DataPartition *dp)$/;"	f
writeSyntaxElement_Run	src/vlc.c	/^int writeSyntaxElement_Run(SyntaxElement *se, DataPartition *dp)$/;"	f
writeSyntaxElement_TotalZeros	src/vlc.c	/^int writeSyntaxElement_TotalZeros(SyntaxElement *se, DataPartition *dp)$/;"	f
writeSyntaxElement_TotalZerosChromaDC	src/vlc.c	/^int writeSyntaxElement_TotalZerosChromaDC(VideoParameters *p_Vid, SyntaxElement *se, DataPartition *dp)$/;"	f
writeSyntaxElement_VLC	src/vlc.c	/^int writeSyntaxElement_VLC(SyntaxElement *se, DataPartition *dp)$/;"	f
writeUVLC2buffer	src/vlc.c	/^void  writeUVLC2buffer(SyntaxElement *se, Bitstream *currStream)$/;"	f
writeUVLC_CAVLC	src/vlc.c	/^void writeUVLC_CAVLC(Macroblock *currMB, SyntaxElement *se, DataPartition *dp)$/;"	f
writeVlcByteAlign	src/vlc.c	/^void writeVlcByteAlign(VideoParameters *p_Vid, Bitstream* currStream, StatParameters *cur_stats)$/;"	f
write_CBP_and_Dquant	src/macroblock.c	/^int write_CBP_and_Dquant (Macroblock* currMB)$/;"	f
write_MB_layer	inc/global.h	/^  int  (*write_MB_layer)        (Macroblock *currMB, int rdopt, int *coeff_rate);$/;"	m	struct:slice
write_PPS	src/filehandle.c	/^int write_PPS(VideoParameters *p_Vid, int len, int PPS_id)$/;"	f
write_and_store_CBP_block_bit	inc/global.h	/^  void (*write_and_store_CBP_block_bit) (Macroblock* currMB, EncodingEnvironmentPtr eep_dp, int type, int cbp_bit, TextureInfoContexts*  tex_ctx);$/;"	m	struct:slice
write_and_store_CBP_block_bit	src/cabac.c	/^void write_and_store_CBP_block_bit (Macroblock* currMB, EncodingEnvironmentPtr eep_dp, int type, int cbp_bit, TextureInfoContexts*  tex_ctx)$/;"	f
write_and_store_CBP_block_bit_444	src/cabac.c	/^void write_and_store_CBP_block_bit_444 (Macroblock* currMB, EncodingEnvironmentPtr eep_dp, int type, int cbp_bit, TextureInfoContexts*  tex_ctx)$/;"	f
write_b_slice_MB_layer	src/macroblock.c	/^int write_b_slice_MB_layer (Macroblock *currMB, int rdopt, int *coeff_rate)$/;"	f
write_b_slice_motion_info_to_NAL	src/macroblock.c	/^int write_b_slice_motion_info_to_NAL (Macroblock* currMB)$/;"	f
write_buffer	src/leaky_bucket.c	/^void write_buffer(InputParameters *p_Inp, unsigned long NumberLeakyBuckets, unsigned long Rmin[], unsigned long Bmin[], unsigned long Fmin[])$/;"	f
write_chroma_coeff	src/macroblock.c	/^static int write_chroma_coeff (Macroblock* currMB)$/;"	f	file:
write_chroma_intra_pred_mode	src/macroblock.c	/^int write_chroma_intra_pred_mode(Macroblock* currMB)$/;"	f
write_el_field_vcl_nalu	src/image.c	/^void write_el_field_vcl_nalu(VideoParameters *p_Vid)$/;"	f
write_flag	inc/global.h	/^  int     write_flag;         \/\/!< Bitstream contains data and needs to be written$/;"	m	struct:bit_stream_enc
write_frame_picture	src/image.c	/^void write_frame_picture(VideoParameters *p_Vid)$/;"	f
write_i_slice_MB_layer	src/macroblock.c	/^int write_i_slice_MB_layer (Macroblock *currMB, int rdopt, int *coeff_rate)$/;"	f
write_macroblock	inc/global.h	/^  byte write_macroblock;$/;"	m	struct:video_par
write_macroblock	src/macroblock.c	/^void write_macroblock (Macroblock* currMB, int eos_bit)$/;"	f
write_mb	inc/global.h	/^  byte                write_mb;$/;"	m	struct:macroblock_enc
write_mbaff_frame	inc/global.h	/^  int write_mbaff_frame;$/;"	m	struct:video_par
write_non_vcl_nalu	src/image.c	/^void write_non_vcl_nalu( VideoParameters *p_Vid )$/;"	f
write_non_vcl_nalu_bot_fld	src/image.c	/^void write_non_vcl_nalu_bot_fld( VideoParameters *p_Vid )$/;"	f
write_non_vcl_nalu_mvc	src/image.c	/^void write_non_vcl_nalu_mvc( VideoParameters *p_Vid )$/;"	f
write_out_picture	src/output.c	/^void write_out_picture(StorablePicture *p, FrameFormat *output, int p_out)$/;"	f
write_p_slice_MB_layer	src/macroblock.c	/^int write_p_slice_MB_layer (Macroblock *currMB, int rdopt, int *coeff_rate)$/;"	f
write_p_slice_motion_info_to_NAL	src/macroblock.c	/^int write_p_slice_motion_info_to_NAL (Macroblock* currMB)$/;"	f
write_picture	src/output.c	/^void write_picture(StorablePicture *p, FrameFormat *output, int p_out)$/;"	f
write_se_v	src/vlc.c	/^int write_se_v (char *tracestring, int value, Bitstream *bitstream)$/;"	f
write_sei_message	src/sei.c	/^static void write_sei_message(SEIParameters *p_SEI, int id, byte* payload, int payload_size, int payload_type)$/;"	f	file:
write_significance_map	src/cabac.c	/^void write_significance_map (Macroblock* currMB, EncodingEnvironmentPtr eep_dp, int type, int coeff[], int coeff_ctr, TextureInfoContexts*  tex_ctx)$/;"	f
write_significant_coefficients	src/cabac.c	/^void write_significant_coefficients (EncodingEnvironmentPtr eep_dp, int type, int coeff[], TextureInfoContexts*  tex_ctx, int coeff_cnt)$/;"	f
write_stored_frame	src/output.c	/^void write_stored_frame( VideoParameters *p_Vid, FrameStore *fs, FrameFormat *output, int p_out)$/;"	f
write_terminating_bit	src/macroblock.c	/^void write_terminating_bit (Slice *currSlice, int bit)$/;"	f
write_u_1	src/vlc.c	/^Boolean write_u_1 (char *tracestring, int value, Bitstream *bitstream)$/;"	f
write_u_v	src/vlc.c	/^int write_u_v (int n, char *tracestring, int value, Bitstream *bitstream)$/;"	f
write_ue_v	src/vlc.c	/^int write_ue_v (char *tracestring, int value, Bitstream *bitstream)$/;"	f
write_unpaired_field	src/output.c	/^void write_unpaired_field(VideoParameters *p_Vid, FrameStore* fs, FrameFormat *output, int p_out)$/;"	f
writeout_picture	src/image.c	/^static void writeout_picture(VideoParameters *p_Vid, Picture *pic)$/;"	f	file:
writeout_picture	src/image.c	/^static void writeout_picture(VideoParameters *p_Vid, Picture *pic, int is_bottom)$/;"	f	file:
x	inc/global.h	/^  short x;$/;"	m	struct:block_pos
x	inc/global.h	/^  short x;$/;"	m	struct:pix_pos
x	inc/rtp.h	/^  unsigned int x;          \/\/!< Extension, MUST be zero$/;"	m	struct:__anon24
y	inc/global.h	/^  short y;$/;"	m	struct:block_pos
y	inc/global.h	/^  short y;$/;"	m	struct:pix_pos
yuv_format	inc/global.h	/^  ColorFormat yuv_format;$/;"	m	struct:coding_par
yuv_format	inc/global.h	/^  ColorFormat yuv_format;$/;"	m	struct:video_par
yuv_format	inc/params.h	/^  int yuv_format;                       \/\/!< YUV format (0=4:0:0, 1=4:2:0, 2=4:2:2, 3=4:4:4)$/;"	m	struct:inp_par_enc
zero_mv	inc/global.h	/^static const MotionVector zero_mv = {0, 0};$/;"	v
